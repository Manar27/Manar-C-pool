
ITI_Door.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005c9e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ba  00800060  00005c9e  00005d32  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  0080011a  0080011a  00005dec  2**0
                  ALLOC
  3 .stab         000040f8  00000000  00000000  00005dec  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000128c  00000000  00000000  00009ee4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000b170  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000b2b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000b420  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000d069  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000df54  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000ed04  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000ee64  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000f0f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000f8bf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 12 07 	jmp	0xe24	; 0xe24 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e9       	ldi	r30, 0x9E	; 158
      68:	fc e5       	ldi	r31, 0x5C	; 92
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 31       	cpi	r26, 0x1A	; 26
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e1       	ldi	r26, 0x1A	; 26
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 31       	cpi	r26, 0x1C	; 28
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 68 13 	call	0x26d0	; 0x26d0 <main>
      8a:	0c 94 4d 2e 	jmp	0x5c9a	; 0x5c9a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 16 2e 	jmp	0x5c2c	; 0x5c2c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a2 e1       	ldi	r26, 0x12	; 18
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 32 2e 	jmp	0x5c64	; 0x5c64 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 22 2e 	jmp	0x5c44	; 0x5c44 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 3e 2e 	jmp	0x5c7c	; 0x5c7c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 22 2e 	jmp	0x5c44	; 0x5c44 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 3e 2e 	jmp	0x5c7c	; 0x5c7c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 16 2e 	jmp	0x5c2c	; 0x5c2c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	82 e1       	ldi	r24, 0x12	; 18
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 32 2e 	jmp	0x5c64	; 0x5c64 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 22 2e 	jmp	0x5c44	; 0x5c44 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 3e 2e 	jmp	0x5c7c	; 0x5c7c <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 22 2e 	jmp	0x5c44	; 0x5c44 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 3e 2e 	jmp	0x5c7c	; 0x5c7c <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 22 2e 	jmp	0x5c44	; 0x5c44 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 3e 2e 	jmp	0x5c7c	; 0x5c7c <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 26 2e 	jmp	0x5c4c	; 0x5c4c <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 42 2e 	jmp	0x5c84	; 0x5c84 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <UART_enuInit>:
#include "../Header/UART_prv.h"

static void (*GPTF_RX) (void) = NULL;

UART_tenuErrorStatus  UART_enuInit(UART_tstrConfiguration* Add_pstrConfigue)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <UART_enuInit+0x6>
     b4c:	0f 92       	push	r0
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	9b 83       	std	Y+3, r25	; 0x03
     b54:	8a 83       	std	Y+2, r24	; 0x02
	UART_tenuErrorStatus Local_enuErrorStatus= UART_OK;
     b56:	19 82       	std	Y+1, r1	; 0x01

	if(Add_pstrConfigue== NULL)
     b58:	8a 81       	ldd	r24, Y+2	; 0x02
     b5a:	9b 81       	ldd	r25, Y+3	; 0x03
     b5c:	00 97       	sbiw	r24, 0x00	; 0
     b5e:	19 f4       	brne	.+6      	; 0xb66 <UART_enuInit+0x20>
	{
		Local_enuErrorStatus= UART_NOK;
     b60:	81 e0       	ldi	r24, 0x01	; 1
     b62:	89 83       	std	Y+1, r24	; 0x01
     b64:	5a c0       	rjmp	.+180    	; 0xc1a <UART_enuInit+0xd4>
	}
	else
	{
        UART_u8_UCSRC_REG |=(1<<7);   //URSEL Set to 1
     b66:	a0 e4       	ldi	r26, 0x40	; 64
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	e0 e4       	ldi	r30, 0x40	; 64
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	80 81       	ld	r24, Z
     b70:	80 68       	ori	r24, 0x80	; 128
     b72:	8c 93       	st	X, r24
		// Set Parity bits
         UART_u8_UCSRC_REG |=Add_pstrConfigue->UART_u8ParityBits;
     b74:	a0 e4       	ldi	r26, 0x40	; 64
     b76:	b0 e0       	ldi	r27, 0x00	; 0
     b78:	e0 e4       	ldi	r30, 0x40	; 64
     b7a:	f0 e0       	ldi	r31, 0x00	; 0
     b7c:	90 81       	ld	r25, Z
     b7e:	ea 81       	ldd	r30, Y+2	; 0x02
     b80:	fb 81       	ldd	r31, Y+3	; 0x03
     b82:	80 81       	ld	r24, Z
     b84:	89 2b       	or	r24, r25
     b86:	8c 93       	st	X, r24

         // Set Stop bit
         UART_u8_UCSRC_REG |=Add_pstrConfigue->UART_u8PStopBit;
     b88:	a0 e4       	ldi	r26, 0x40	; 64
     b8a:	b0 e0       	ldi	r27, 0x00	; 0
     b8c:	e0 e4       	ldi	r30, 0x40	; 64
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	90 81       	ld	r25, Z
     b92:	ea 81       	ldd	r30, Y+2	; 0x02
     b94:	fb 81       	ldd	r31, Y+3	; 0x03
     b96:	81 81       	ldd	r24, Z+1	; 0x01
     b98:	89 2b       	or	r24, r25
     b9a:	8c 93       	st	X, r24

         //check 9 bit
         if(Add_pstrConfigue->UART_u8DataBits == UART_u8_NINE_DATA_BITS)
     b9c:	ea 81       	ldd	r30, Y+2	; 0x02
     b9e:	fb 81       	ldd	r31, Y+3	; 0x03
     ba0:	82 81       	ldd	r24, Z+2	; 0x02
     ba2:	86 30       	cpi	r24, 0x06	; 6
     ba4:	39 f4       	brne	.+14     	; 0xbb4 <UART_enuInit+0x6e>
         {
        	 UART_u8_UCSRB_REG |=0x04;
     ba6:	aa e2       	ldi	r26, 0x2A	; 42
     ba8:	b0 e0       	ldi	r27, 0x00	; 0
     baa:	ea e2       	ldi	r30, 0x2A	; 42
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	80 81       	ld	r24, Z
     bb0:	84 60       	ori	r24, 0x04	; 4
     bb2:	8c 93       	st	X, r24
         }

         // Set Character Size
         UART_u8_UCSRC_REG |=Add_pstrConfigue->UART_u8DataBits;
     bb4:	a0 e4       	ldi	r26, 0x40	; 64
     bb6:	b0 e0       	ldi	r27, 0x00	; 0
     bb8:	e0 e4       	ldi	r30, 0x40	; 64
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	90 81       	ld	r25, Z
     bbe:	ea 81       	ldd	r30, Y+2	; 0x02
     bc0:	fb 81       	ldd	r31, Y+3	; 0x03
     bc2:	82 81       	ldd	r24, Z+2	; 0x02
     bc4:	89 2b       	or	r24, r25
     bc6:	8c 93       	st	X, r24

         //Choose Transmite or Receive
         UART_u8_UCSRB_REG |=Add_pstrConfigue->UART_u8Mode;
     bc8:	aa e2       	ldi	r26, 0x2A	; 42
     bca:	b0 e0       	ldi	r27, 0x00	; 0
     bcc:	ea e2       	ldi	r30, 0x2A	; 42
     bce:	f0 e0       	ldi	r31, 0x00	; 0
     bd0:	90 81       	ld	r25, Z
     bd2:	ea 81       	ldd	r30, Y+2	; 0x02
     bd4:	fb 81       	ldd	r31, Y+3	; 0x03
     bd6:	83 81       	ldd	r24, Z+3	; 0x03
     bd8:	89 2b       	or	r24, r25
     bda:	8c 93       	st	X, r24

         // set Baud Rate
         UART_u8_UCSRC_REG &=~(1<<7);   //URSEL Set to 0
     bdc:	a0 e4       	ldi	r26, 0x40	; 64
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	e0 e4       	ldi	r30, 0x40	; 64
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	8f 77       	andi	r24, 0x7F	; 127
     be8:	8c 93       	st	X, r24
         UART_u8_UBRRL_REG |= (u8)(Add_pstrConfigue->UART_u16BaudRate);
     bea:	a9 e2       	ldi	r26, 0x29	; 41
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	e9 e2       	ldi	r30, 0x29	; 41
     bf0:	f0 e0       	ldi	r31, 0x00	; 0
     bf2:	20 81       	ld	r18, Z
     bf4:	ea 81       	ldd	r30, Y+2	; 0x02
     bf6:	fb 81       	ldd	r31, Y+3	; 0x03
     bf8:	84 81       	ldd	r24, Z+4	; 0x04
     bfa:	95 81       	ldd	r25, Z+5	; 0x05
     bfc:	82 2b       	or	r24, r18
     bfe:	8c 93       	st	X, r24
         UART_u8_UBRRH_REG |= (u8)((Add_pstrConfigue->UART_u16BaudRate)>>8);
     c00:	a0 e4       	ldi	r26, 0x40	; 64
     c02:	b0 e0       	ldi	r27, 0x00	; 0
     c04:	e0 e4       	ldi	r30, 0x40	; 64
     c06:	f0 e0       	ldi	r31, 0x00	; 0
     c08:	20 81       	ld	r18, Z
     c0a:	ea 81       	ldd	r30, Y+2	; 0x02
     c0c:	fb 81       	ldd	r31, Y+3	; 0x03
     c0e:	84 81       	ldd	r24, Z+4	; 0x04
     c10:	95 81       	ldd	r25, Z+5	; 0x05
     c12:	89 2f       	mov	r24, r25
     c14:	99 27       	eor	r25, r25
     c16:	82 2b       	or	r24, r18
     c18:	8c 93       	st	X, r24

	}

	return Local_enuErrorStatus;
     c1a:	89 81       	ldd	r24, Y+1	; 0x01
}
     c1c:	0f 90       	pop	r0
     c1e:	0f 90       	pop	r0
     c20:	0f 90       	pop	r0
     c22:	cf 91       	pop	r28
     c24:	df 91       	pop	r29
     c26:	08 95       	ret

00000c28 <UART_enuInitRXInterrupt>:
UART_tenuErrorStatus  UART_enuInitRXInterrupt(UART_tstrConfiguration* Add_pstrConfigue)
{
     c28:	df 93       	push	r29
     c2a:	cf 93       	push	r28
     c2c:	00 d0       	rcall	.+0      	; 0xc2e <UART_enuInitRXInterrupt+0x6>
     c2e:	0f 92       	push	r0
     c30:	cd b7       	in	r28, 0x3d	; 61
     c32:	de b7       	in	r29, 0x3e	; 62
     c34:	9b 83       	std	Y+3, r25	; 0x03
     c36:	8a 83       	std	Y+2, r24	; 0x02

	UART_tenuErrorStatus Local_enuErrorStatus= UART_OK;
     c38:	19 82       	std	Y+1, r1	; 0x01

	if(Add_pstrConfigue== NULL)
     c3a:	8a 81       	ldd	r24, Y+2	; 0x02
     c3c:	9b 81       	ldd	r25, Y+3	; 0x03
     c3e:	00 97       	sbiw	r24, 0x00	; 0
     c40:	19 f4       	brne	.+6      	; 0xc48 <UART_enuInitRXInterrupt+0x20>
	{
		Local_enuErrorStatus= UART_NOK;
     c42:	81 e0       	ldi	r24, 0x01	; 1
     c44:	89 83       	std	Y+1, r24	; 0x01
     c46:	61 c0       	rjmp	.+194    	; 0xd0a <UART_enuInitRXInterrupt+0xe2>
	}
	else
	{
        UART_u8_UCSRC_REG |=(1<<7);   //URSEL Set to 1
     c48:	a0 e4       	ldi	r26, 0x40	; 64
     c4a:	b0 e0       	ldi	r27, 0x00	; 0
     c4c:	e0 e4       	ldi	r30, 0x40	; 64
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	80 81       	ld	r24, Z
     c52:	80 68       	ori	r24, 0x80	; 128
     c54:	8c 93       	st	X, r24
		// Set Parity bits
         UART_u8_UCSRC_REG |=Add_pstrConfigue->UART_u8ParityBits;
     c56:	a0 e4       	ldi	r26, 0x40	; 64
     c58:	b0 e0       	ldi	r27, 0x00	; 0
     c5a:	e0 e4       	ldi	r30, 0x40	; 64
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	90 81       	ld	r25, Z
     c60:	ea 81       	ldd	r30, Y+2	; 0x02
     c62:	fb 81       	ldd	r31, Y+3	; 0x03
     c64:	80 81       	ld	r24, Z
     c66:	89 2b       	or	r24, r25
     c68:	8c 93       	st	X, r24

         // Set Stop bit
         UART_u8_UCSRC_REG |=Add_pstrConfigue->UART_u8PStopBit;
     c6a:	a0 e4       	ldi	r26, 0x40	; 64
     c6c:	b0 e0       	ldi	r27, 0x00	; 0
     c6e:	e0 e4       	ldi	r30, 0x40	; 64
     c70:	f0 e0       	ldi	r31, 0x00	; 0
     c72:	90 81       	ld	r25, Z
     c74:	ea 81       	ldd	r30, Y+2	; 0x02
     c76:	fb 81       	ldd	r31, Y+3	; 0x03
     c78:	81 81       	ldd	r24, Z+1	; 0x01
     c7a:	89 2b       	or	r24, r25
     c7c:	8c 93       	st	X, r24

         //check 9 bit
         if(Add_pstrConfigue->UART_u8DataBits == UART_u8_NINE_DATA_BITS)
     c7e:	ea 81       	ldd	r30, Y+2	; 0x02
     c80:	fb 81       	ldd	r31, Y+3	; 0x03
     c82:	82 81       	ldd	r24, Z+2	; 0x02
     c84:	86 30       	cpi	r24, 0x06	; 6
     c86:	39 f4       	brne	.+14     	; 0xc96 <UART_enuInitRXInterrupt+0x6e>
         {
        	 UART_u8_UCSRB_REG |=0x04;
     c88:	aa e2       	ldi	r26, 0x2A	; 42
     c8a:	b0 e0       	ldi	r27, 0x00	; 0
     c8c:	ea e2       	ldi	r30, 0x2A	; 42
     c8e:	f0 e0       	ldi	r31, 0x00	; 0
     c90:	80 81       	ld	r24, Z
     c92:	84 60       	ori	r24, 0x04	; 4
     c94:	8c 93       	st	X, r24
         }

         // Set Character Size
         UART_u8_UCSRC_REG |=Add_pstrConfigue->UART_u8DataBits;
     c96:	a0 e4       	ldi	r26, 0x40	; 64
     c98:	b0 e0       	ldi	r27, 0x00	; 0
     c9a:	e0 e4       	ldi	r30, 0x40	; 64
     c9c:	f0 e0       	ldi	r31, 0x00	; 0
     c9e:	90 81       	ld	r25, Z
     ca0:	ea 81       	ldd	r30, Y+2	; 0x02
     ca2:	fb 81       	ldd	r31, Y+3	; 0x03
     ca4:	82 81       	ldd	r24, Z+2	; 0x02
     ca6:	89 2b       	or	r24, r25
     ca8:	8c 93       	st	X, r24

         //Choose Transmite or Receive
         UART_u8_UCSRB_REG |=Add_pstrConfigue->UART_u8Mode;
     caa:	aa e2       	ldi	r26, 0x2A	; 42
     cac:	b0 e0       	ldi	r27, 0x00	; 0
     cae:	ea e2       	ldi	r30, 0x2A	; 42
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	90 81       	ld	r25, Z
     cb4:	ea 81       	ldd	r30, Y+2	; 0x02
     cb6:	fb 81       	ldd	r31, Y+3	; 0x03
     cb8:	83 81       	ldd	r24, Z+3	; 0x03
     cba:	89 2b       	or	r24, r25
     cbc:	8c 93       	st	X, r24
         /*enable RXICE Rx complete interrupt*/
         UART_u8_UCSRB_REG |= (1<<7);
     cbe:	aa e2       	ldi	r26, 0x2A	; 42
     cc0:	b0 e0       	ldi	r27, 0x00	; 0
     cc2:	ea e2       	ldi	r30, 0x2A	; 42
     cc4:	f0 e0       	ldi	r31, 0x00	; 0
     cc6:	80 81       	ld	r24, Z
     cc8:	80 68       	ori	r24, 0x80	; 128
     cca:	8c 93       	st	X, r24

         // set Baud Rate
         UART_u8_UCSRC_REG &=~(1<<7);   //URSEL Set to 0
     ccc:	a0 e4       	ldi	r26, 0x40	; 64
     cce:	b0 e0       	ldi	r27, 0x00	; 0
     cd0:	e0 e4       	ldi	r30, 0x40	; 64
     cd2:	f0 e0       	ldi	r31, 0x00	; 0
     cd4:	80 81       	ld	r24, Z
     cd6:	8f 77       	andi	r24, 0x7F	; 127
     cd8:	8c 93       	st	X, r24
         UART_u8_UBRRL_REG |= (u8)(Add_pstrConfigue->UART_u16BaudRate);
     cda:	a9 e2       	ldi	r26, 0x29	; 41
     cdc:	b0 e0       	ldi	r27, 0x00	; 0
     cde:	e9 e2       	ldi	r30, 0x29	; 41
     ce0:	f0 e0       	ldi	r31, 0x00	; 0
     ce2:	20 81       	ld	r18, Z
     ce4:	ea 81       	ldd	r30, Y+2	; 0x02
     ce6:	fb 81       	ldd	r31, Y+3	; 0x03
     ce8:	84 81       	ldd	r24, Z+4	; 0x04
     cea:	95 81       	ldd	r25, Z+5	; 0x05
     cec:	82 2b       	or	r24, r18
     cee:	8c 93       	st	X, r24
         UART_u8_UBRRH_REG |= (u8)((Add_pstrConfigue->UART_u16BaudRate)>>8);
     cf0:	a0 e4       	ldi	r26, 0x40	; 64
     cf2:	b0 e0       	ldi	r27, 0x00	; 0
     cf4:	e0 e4       	ldi	r30, 0x40	; 64
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	20 81       	ld	r18, Z
     cfa:	ea 81       	ldd	r30, Y+2	; 0x02
     cfc:	fb 81       	ldd	r31, Y+3	; 0x03
     cfe:	84 81       	ldd	r24, Z+4	; 0x04
     d00:	95 81       	ldd	r25, Z+5	; 0x05
     d02:	89 2f       	mov	r24, r25
     d04:	99 27       	eor	r25, r25
     d06:	82 2b       	or	r24, r18
     d08:	8c 93       	st	X, r24


	}

	return Local_enuErrorStatus;
     d0a:	89 81       	ldd	r24, Y+1	; 0x01
}
     d0c:	0f 90       	pop	r0
     d0e:	0f 90       	pop	r0
     d10:	0f 90       	pop	r0
     d12:	cf 91       	pop	r28
     d14:	df 91       	pop	r29
     d16:	08 95       	ret

00000d18 <UART_enuTransmite>:
UART_tenuErrorStatus  UART_enuTransmite(u16 Copy_pu16Data)
{
     d18:	df 93       	push	r29
     d1a:	cf 93       	push	r28
     d1c:	00 d0       	rcall	.+0      	; 0xd1e <UART_enuTransmite+0x6>
     d1e:	0f 92       	push	r0
     d20:	cd b7       	in	r28, 0x3d	; 61
     d22:	de b7       	in	r29, 0x3e	; 62
     d24:	9b 83       	std	Y+3, r25	; 0x03
     d26:	8a 83       	std	Y+2, r24	; 0x02
	UART_tenuErrorStatus Local_enuErrorStatus= UART_OK;
     d28:	19 82       	std	Y+1, r1	; 0x01
	}
	else
	{

	       // poling on the flag >>> wait for UDR to be empty
     while(((UART_u8_UCSRA_REG >> 5) & 0x01 )== 0);
     d2a:	eb e2       	ldi	r30, 0x2B	; 43
     d2c:	f0 e0       	ldi	r31, 0x00	; 0
     d2e:	80 81       	ld	r24, Z
     d30:	82 95       	swap	r24
     d32:	86 95       	lsr	r24
     d34:	87 70       	andi	r24, 0x07	; 7
     d36:	88 2f       	mov	r24, r24
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	81 70       	andi	r24, 0x01	; 1
     d3c:	90 70       	andi	r25, 0x00	; 0
     d3e:	00 97       	sbiw	r24, 0x00	; 0
     d40:	a1 f3       	breq	.-24     	; 0xd2a <UART_enuTransmite+0x12>

     UART_u8_UCSRB_REG &= ~(1<<0);  // Clear TXB8
     d42:	aa e2       	ldi	r26, 0x2A	; 42
     d44:	b0 e0       	ldi	r27, 0x00	; 0
     d46:	ea e2       	ldi	r30, 0x2A	; 42
     d48:	f0 e0       	ldi	r31, 0x00	; 0
     d4a:	80 81       	ld	r24, Z
     d4c:	8e 7f       	andi	r24, 0xFE	; 254
     d4e:	8c 93       	st	X, r24
     if ( Copy_pu16Data & 0x0100 )
     d50:	8a 81       	ldd	r24, Y+2	; 0x02
     d52:	9b 81       	ldd	r25, Y+3	; 0x03
     d54:	80 70       	andi	r24, 0x00	; 0
     d56:	91 70       	andi	r25, 0x01	; 1
     d58:	00 97       	sbiw	r24, 0x00	; 0
     d5a:	39 f0       	breq	.+14     	; 0xd6a <UART_enuTransmite+0x52>
     {
    	 UART_u8_UCSRB_REG |= 0x01; //Set TXB8
     d5c:	aa e2       	ldi	r26, 0x2A	; 42
     d5e:	b0 e0       	ldi	r27, 0x00	; 0
     d60:	ea e2       	ldi	r30, 0x2A	; 42
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	80 81       	ld	r24, Z
     d66:	81 60       	ori	r24, 0x01	; 1
     d68:	8c 93       	st	X, r24
     }
     /* Put data into UDR Register */
     UART_u8_UDR_REG = (u8)(Copy_pu16Data);
     d6a:	ec e2       	ldi	r30, 0x2C	; 44
     d6c:	f0 e0       	ldi	r31, 0x00	; 0
     d6e:	8a 81       	ldd	r24, Y+2	; 0x02
     d70:	80 83       	st	Z, r24


	}

	return Local_enuErrorStatus;
     d72:	89 81       	ldd	r24, Y+1	; 0x01
}
     d74:	0f 90       	pop	r0
     d76:	0f 90       	pop	r0
     d78:	0f 90       	pop	r0
     d7a:	cf 91       	pop	r28
     d7c:	df 91       	pop	r29
     d7e:	08 95       	ret

00000d80 <UART_enuReceive>:

UART_tenuErrorStatus  UART_enuReceive(u8* Add_pu16Data)
{
     d80:	df 93       	push	r29
     d82:	cf 93       	push	r28
     d84:	00 d0       	rcall	.+0      	; 0xd86 <UART_enuReceive+0x6>
     d86:	0f 92       	push	r0
     d88:	cd b7       	in	r28, 0x3d	; 61
     d8a:	de b7       	in	r29, 0x3e	; 62
     d8c:	9b 83       	std	Y+3, r25	; 0x03
     d8e:	8a 83       	std	Y+2, r24	; 0x02
	UART_tenuErrorStatus Local_enuErrorStatus= UART_OK;
     d90:	19 82       	std	Y+1, r1	; 0x01

	if(Add_pu16Data==NULL)
     d92:	8a 81       	ldd	r24, Y+2	; 0x02
     d94:	9b 81       	ldd	r25, Y+3	; 0x03
     d96:	00 97       	sbiw	r24, 0x00	; 0
     d98:	19 f4       	brne	.+6      	; 0xda0 <UART_enuReceive+0x20>
	{
		Local_enuErrorStatus= UART_NOK;
     d9a:	81 e0       	ldi	r24, 0x01	; 1
     d9c:	89 83       	std	Y+1, r24	; 0x01
     d9e:	29 c0       	rjmp	.+82     	; 0xdf2 <UART_enuReceive+0x72>
	}
	else
	{
	       // poling on the flag >>> wait for data to be received
	     while(((UART_u8_UCSRA_REG >> 7) & 0x01 )== 0);
     da0:	eb e2       	ldi	r30, 0x2B	; 43
     da2:	f0 e0       	ldi	r31, 0x00	; 0
     da4:	80 81       	ld	r24, Z
     da6:	88 23       	and	r24, r24
     da8:	dc f7       	brge	.-10     	; 0xda0 <UART_enuReceive+0x20>

	      // check frame error and Data over Run error
	     if(((UART_u8_UCSRA_REG>>3) & 0x01) || ((UART_u8_UCSRA_REG>>4) & 0x01))
     daa:	eb e2       	ldi	r30, 0x2B	; 43
     dac:	f0 e0       	ldi	r31, 0x00	; 0
     dae:	80 81       	ld	r24, Z
     db0:	86 95       	lsr	r24
     db2:	86 95       	lsr	r24
     db4:	86 95       	lsr	r24
     db6:	88 2f       	mov	r24, r24
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	81 70       	andi	r24, 0x01	; 1
     dbc:	90 70       	andi	r25, 0x00	; 0
     dbe:	88 23       	and	r24, r24
     dc0:	59 f4       	brne	.+22     	; 0xdd8 <UART_enuReceive+0x58>
     dc2:	eb e2       	ldi	r30, 0x2B	; 43
     dc4:	f0 e0       	ldi	r31, 0x00	; 0
     dc6:	80 81       	ld	r24, Z
     dc8:	82 95       	swap	r24
     dca:	8f 70       	andi	r24, 0x0F	; 15
     dcc:	88 2f       	mov	r24, r24
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	81 70       	andi	r24, 0x01	; 1
     dd2:	90 70       	andi	r25, 0x00	; 0
     dd4:	88 23       	and	r24, r24
     dd6:	19 f0       	breq	.+6      	; 0xdde <UART_enuReceive+0x5e>
	     {
	    	 Local_enuErrorStatus= UART_NOK;
     dd8:	81 e0       	ldi	r24, 0x01	; 1
     dda:	89 83       	std	Y+1, r24	; 0x01
     ddc:	0a c0       	rjmp	.+20     	; 0xdf2 <UART_enuReceive+0x72>
	     }
	     else
	     {
	    	 //*Add_pu16Data =(((UART_u8_UCSRB_REG>>1) & 0X01) << 8); // get bit number 9
	    	 *Add_pu16Data |= UART_u8_UDR_REG;     // get Lowbyte
     dde:	ea 81       	ldd	r30, Y+2	; 0x02
     de0:	fb 81       	ldd	r31, Y+3	; 0x03
     de2:	90 81       	ld	r25, Z
     de4:	ec e2       	ldi	r30, 0x2C	; 44
     de6:	f0 e0       	ldi	r31, 0x00	; 0
     de8:	80 81       	ld	r24, Z
     dea:	89 2b       	or	r24, r25
     dec:	ea 81       	ldd	r30, Y+2	; 0x02
     dee:	fb 81       	ldd	r31, Y+3	; 0x03
     df0:	80 83       	st	Z, r24
	     }
	}
	return Local_enuErrorStatus;
     df2:	89 81       	ldd	r24, Y+1	; 0x01
}
     df4:	0f 90       	pop	r0
     df6:	0f 90       	pop	r0
     df8:	0f 90       	pop	r0
     dfa:	cf 91       	pop	r28
     dfc:	df 91       	pop	r29
     dfe:	08 95       	ret

00000e00 <UART_CallBackFunctionRX>:
void UART_CallBackFunctionRX(void (*PTF)(void))
{
     e00:	df 93       	push	r29
     e02:	cf 93       	push	r28
     e04:	00 d0       	rcall	.+0      	; 0xe06 <UART_CallBackFunctionRX+0x6>
     e06:	cd b7       	in	r28, 0x3d	; 61
     e08:	de b7       	in	r29, 0x3e	; 62
     e0a:	9a 83       	std	Y+2, r25	; 0x02
     e0c:	89 83       	std	Y+1, r24	; 0x01
	GPTF_RX = PTF;
     e0e:	89 81       	ldd	r24, Y+1	; 0x01
     e10:	9a 81       	ldd	r25, Y+2	; 0x02
     e12:	90 93 1b 01 	sts	0x011B, r25
     e16:	80 93 1a 01 	sts	0x011A, r24
}
     e1a:	0f 90       	pop	r0
     e1c:	0f 90       	pop	r0
     e1e:	cf 91       	pop	r28
     e20:	df 91       	pop	r29
     e22:	08 95       	ret

00000e24 <__vector_13>:
void __vector_13(void)
{
     e24:	1f 92       	push	r1
     e26:	0f 92       	push	r0
     e28:	0f b6       	in	r0, 0x3f	; 63
     e2a:	0f 92       	push	r0
     e2c:	11 24       	eor	r1, r1
     e2e:	2f 93       	push	r18
     e30:	3f 93       	push	r19
     e32:	4f 93       	push	r20
     e34:	5f 93       	push	r21
     e36:	6f 93       	push	r22
     e38:	7f 93       	push	r23
     e3a:	8f 93       	push	r24
     e3c:	9f 93       	push	r25
     e3e:	af 93       	push	r26
     e40:	bf 93       	push	r27
     e42:	ef 93       	push	r30
     e44:	ff 93       	push	r31
     e46:	df 93       	push	r29
     e48:	cf 93       	push	r28
     e4a:	cd b7       	in	r28, 0x3d	; 61
     e4c:	de b7       	in	r29, 0x3e	; 62
	GPTF_RX();
     e4e:	e0 91 1a 01 	lds	r30, 0x011A
     e52:	f0 91 1b 01 	lds	r31, 0x011B
     e56:	09 95       	icall
}
     e58:	cf 91       	pop	r28
     e5a:	df 91       	pop	r29
     e5c:	ff 91       	pop	r31
     e5e:	ef 91       	pop	r30
     e60:	bf 91       	pop	r27
     e62:	af 91       	pop	r26
     e64:	9f 91       	pop	r25
     e66:	8f 91       	pop	r24
     e68:	7f 91       	pop	r23
     e6a:	6f 91       	pop	r22
     e6c:	5f 91       	pop	r21
     e6e:	4f 91       	pop	r20
     e70:	3f 91       	pop	r19
     e72:	2f 91       	pop	r18
     e74:	0f 90       	pop	r0
     e76:	0f be       	out	0x3f, r0	; 63
     e78:	0f 90       	pop	r0
     e7a:	1f 90       	pop	r1
     e7c:	18 95       	reti

00000e7e <GIE_VoidEnable>:

#include "../Header/GIE_Register.h"
#include "../Header/GIE_interface.h"

void GIE_VoidEnable (void)
{
     e7e:	df 93       	push	r29
     e80:	cf 93       	push	r28
     e82:	cd b7       	in	r28, 0x3d	; 61
     e84:	de b7       	in	r29, 0x3e	; 62
	Set_Bit(GIE_SREG,GIE_SREG_I);
     e86:	af e5       	ldi	r26, 0x5F	; 95
     e88:	b0 e0       	ldi	r27, 0x00	; 0
     e8a:	ef e5       	ldi	r30, 0x5F	; 95
     e8c:	f0 e0       	ldi	r31, 0x00	; 0
     e8e:	80 81       	ld	r24, Z
     e90:	80 68       	ori	r24, 0x80	; 128
     e92:	8c 93       	st	X, r24
}
     e94:	cf 91       	pop	r28
     e96:	df 91       	pop	r29
     e98:	08 95       	ret

00000e9a <GIE_VoidDisable>:

void GIE_VoidDisable (void)
{
     e9a:	df 93       	push	r29
     e9c:	cf 93       	push	r28
     e9e:	cd b7       	in	r28, 0x3d	; 61
     ea0:	de b7       	in	r29, 0x3e	; 62
	clear_Bit(GIE_SREG,GIE_SREG_I);
     ea2:	af e5       	ldi	r26, 0x5F	; 95
     ea4:	b0 e0       	ldi	r27, 0x00	; 0
     ea6:	ef e5       	ldi	r30, 0x5F	; 95
     ea8:	f0 e0       	ldi	r31, 0x00	; 0
     eaa:	80 81       	ld	r24, Z
     eac:	8f 77       	andi	r24, 0x7F	; 127
     eae:	8c 93       	st	X, r24
}
     eb0:	cf 91       	pop	r28
     eb2:	df 91       	pop	r29
     eb4:	08 95       	ret

00000eb6 <DIO_VoidSetPinDir>:
#include "../Header/DIO_interface.h"
#include "../Header/DIO_Private.h"
#include "../Header/DIO_Register.h"

void DIO_VoidSetPinDir(u8 Local_Groupname, u8 Local_PinNumber, u8 Local_DirectionState)
{
     eb6:	df 93       	push	r29
     eb8:	cf 93       	push	r28
     eba:	cd b7       	in	r28, 0x3d	; 61
     ebc:	de b7       	in	r29, 0x3e	; 62
     ebe:	27 97       	sbiw	r28, 0x07	; 7
     ec0:	0f b6       	in	r0, 0x3f	; 63
     ec2:	f8 94       	cli
     ec4:	de bf       	out	0x3e, r29	; 62
     ec6:	0f be       	out	0x3f, r0	; 63
     ec8:	cd bf       	out	0x3d, r28	; 61
     eca:	89 83       	std	Y+1, r24	; 0x01
     ecc:	6a 83       	std	Y+2, r22	; 0x02
     ece:	4b 83       	std	Y+3, r20	; 0x03
	if (Local_Groupname <= Group_D && Local_PinNumber <= Pin_D7)
     ed0:	89 81       	ldd	r24, Y+1	; 0x01
     ed2:	85 30       	cpi	r24, 0x05	; 5
     ed4:	08 f0       	brcs	.+2      	; 0xed8 <DIO_VoidSetPinDir+0x22>
     ed6:	f0 c0       	rjmp	.+480    	; 0x10b8 <DIO_VoidSetPinDir+0x202>
     ed8:	8a 81       	ldd	r24, Y+2	; 0x02
     eda:	88 30       	cpi	r24, 0x08	; 8
     edc:	08 f0       	brcs	.+2      	; 0xee0 <DIO_VoidSetPinDir+0x2a>
     ede:	ec c0       	rjmp	.+472    	; 0x10b8 <DIO_VoidSetPinDir+0x202>
	{
		if (Local_DirectionState == Input)
     ee0:	8b 81       	ldd	r24, Y+3	; 0x03
     ee2:	88 23       	and	r24, r24
     ee4:	09 f0       	breq	.+2      	; 0xee8 <DIO_VoidSetPinDir+0x32>
     ee6:	75 c0       	rjmp	.+234    	; 0xfd2 <DIO_VoidSetPinDir+0x11c>
		{
			switch (Local_Groupname)
     ee8:	89 81       	ldd	r24, Y+1	; 0x01
     eea:	28 2f       	mov	r18, r24
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	3f 83       	std	Y+7, r19	; 0x07
     ef0:	2e 83       	std	Y+6, r18	; 0x06
     ef2:	8e 81       	ldd	r24, Y+6	; 0x06
     ef4:	9f 81       	ldd	r25, Y+7	; 0x07
     ef6:	82 30       	cpi	r24, 0x02	; 2
     ef8:	91 05       	cpc	r25, r1
     efa:	61 f1       	breq	.+88     	; 0xf54 <DIO_VoidSetPinDir+0x9e>
     efc:	2e 81       	ldd	r18, Y+6	; 0x06
     efe:	3f 81       	ldd	r19, Y+7	; 0x07
     f00:	23 30       	cpi	r18, 0x03	; 3
     f02:	31 05       	cpc	r19, r1
     f04:	34 f4       	brge	.+12     	; 0xf12 <DIO_VoidSetPinDir+0x5c>
     f06:	8e 81       	ldd	r24, Y+6	; 0x06
     f08:	9f 81       	ldd	r25, Y+7	; 0x07
     f0a:	81 30       	cpi	r24, 0x01	; 1
     f0c:	91 05       	cpc	r25, r1
     f0e:	69 f0       	breq	.+26     	; 0xf2a <DIO_VoidSetPinDir+0x74>
     f10:	d3 c0       	rjmp	.+422    	; 0x10b8 <DIO_VoidSetPinDir+0x202>
     f12:	2e 81       	ldd	r18, Y+6	; 0x06
     f14:	3f 81       	ldd	r19, Y+7	; 0x07
     f16:	23 30       	cpi	r18, 0x03	; 3
     f18:	31 05       	cpc	r19, r1
     f1a:	89 f1       	breq	.+98     	; 0xf7e <DIO_VoidSetPinDir+0xc8>
     f1c:	8e 81       	ldd	r24, Y+6	; 0x06
     f1e:	9f 81       	ldd	r25, Y+7	; 0x07
     f20:	84 30       	cpi	r24, 0x04	; 4
     f22:	91 05       	cpc	r25, r1
     f24:	09 f4       	brne	.+2      	; 0xf28 <DIO_VoidSetPinDir+0x72>
     f26:	40 c0       	rjmp	.+128    	; 0xfa8 <DIO_VoidSetPinDir+0xf2>
     f28:	c7 c0       	rjmp	.+398    	; 0x10b8 <DIO_VoidSetPinDir+0x202>
			{
				case Group_A :
					clear_Bit(DIO_DDRA, Local_PinNumber);
     f2a:	aa e3       	ldi	r26, 0x3A	; 58
     f2c:	b0 e0       	ldi	r27, 0x00	; 0
     f2e:	ea e3       	ldi	r30, 0x3A	; 58
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	80 81       	ld	r24, Z
     f34:	48 2f       	mov	r20, r24
     f36:	8a 81       	ldd	r24, Y+2	; 0x02
     f38:	28 2f       	mov	r18, r24
     f3a:	30 e0       	ldi	r19, 0x00	; 0
     f3c:	81 e0       	ldi	r24, 0x01	; 1
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	02 2e       	mov	r0, r18
     f42:	02 c0       	rjmp	.+4      	; 0xf48 <DIO_VoidSetPinDir+0x92>
     f44:	88 0f       	add	r24, r24
     f46:	99 1f       	adc	r25, r25
     f48:	0a 94       	dec	r0
     f4a:	e2 f7       	brpl	.-8      	; 0xf44 <DIO_VoidSetPinDir+0x8e>
     f4c:	80 95       	com	r24
     f4e:	84 23       	and	r24, r20
     f50:	8c 93       	st	X, r24
     f52:	b2 c0       	rjmp	.+356    	; 0x10b8 <DIO_VoidSetPinDir+0x202>
					break;
				case Group_B :
					clear_Bit (DIO_DDRB, Local_PinNumber);
     f54:	a7 e3       	ldi	r26, 0x37	; 55
     f56:	b0 e0       	ldi	r27, 0x00	; 0
     f58:	e7 e3       	ldi	r30, 0x37	; 55
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	48 2f       	mov	r20, r24
     f60:	8a 81       	ldd	r24, Y+2	; 0x02
     f62:	28 2f       	mov	r18, r24
     f64:	30 e0       	ldi	r19, 0x00	; 0
     f66:	81 e0       	ldi	r24, 0x01	; 1
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	02 2e       	mov	r0, r18
     f6c:	02 c0       	rjmp	.+4      	; 0xf72 <DIO_VoidSetPinDir+0xbc>
     f6e:	88 0f       	add	r24, r24
     f70:	99 1f       	adc	r25, r25
     f72:	0a 94       	dec	r0
     f74:	e2 f7       	brpl	.-8      	; 0xf6e <DIO_VoidSetPinDir+0xb8>
     f76:	80 95       	com	r24
     f78:	84 23       	and	r24, r20
     f7a:	8c 93       	st	X, r24
     f7c:	9d c0       	rjmp	.+314    	; 0x10b8 <DIO_VoidSetPinDir+0x202>
					break;
				case Group_C :
					clear_Bit (DIO_DDRC, Local_PinNumber);
     f7e:	a4 e3       	ldi	r26, 0x34	; 52
     f80:	b0 e0       	ldi	r27, 0x00	; 0
     f82:	e4 e3       	ldi	r30, 0x34	; 52
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	80 81       	ld	r24, Z
     f88:	48 2f       	mov	r20, r24
     f8a:	8a 81       	ldd	r24, Y+2	; 0x02
     f8c:	28 2f       	mov	r18, r24
     f8e:	30 e0       	ldi	r19, 0x00	; 0
     f90:	81 e0       	ldi	r24, 0x01	; 1
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	02 2e       	mov	r0, r18
     f96:	02 c0       	rjmp	.+4      	; 0xf9c <DIO_VoidSetPinDir+0xe6>
     f98:	88 0f       	add	r24, r24
     f9a:	99 1f       	adc	r25, r25
     f9c:	0a 94       	dec	r0
     f9e:	e2 f7       	brpl	.-8      	; 0xf98 <DIO_VoidSetPinDir+0xe2>
     fa0:	80 95       	com	r24
     fa2:	84 23       	and	r24, r20
     fa4:	8c 93       	st	X, r24
     fa6:	88 c0       	rjmp	.+272    	; 0x10b8 <DIO_VoidSetPinDir+0x202>
					break;
				case Group_D :
					clear_Bit (DIO_DDRD, Local_PinNumber);
     fa8:	a1 e3       	ldi	r26, 0x31	; 49
     faa:	b0 e0       	ldi	r27, 0x00	; 0
     fac:	e1 e3       	ldi	r30, 0x31	; 49
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	80 81       	ld	r24, Z
     fb2:	48 2f       	mov	r20, r24
     fb4:	8a 81       	ldd	r24, Y+2	; 0x02
     fb6:	28 2f       	mov	r18, r24
     fb8:	30 e0       	ldi	r19, 0x00	; 0
     fba:	81 e0       	ldi	r24, 0x01	; 1
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	02 2e       	mov	r0, r18
     fc0:	02 c0       	rjmp	.+4      	; 0xfc6 <DIO_VoidSetPinDir+0x110>
     fc2:	88 0f       	add	r24, r24
     fc4:	99 1f       	adc	r25, r25
     fc6:	0a 94       	dec	r0
     fc8:	e2 f7       	brpl	.-8      	; 0xfc2 <DIO_VoidSetPinDir+0x10c>
     fca:	80 95       	com	r24
     fcc:	84 23       	and	r24, r20
     fce:	8c 93       	st	X, r24
     fd0:	73 c0       	rjmp	.+230    	; 0x10b8 <DIO_VoidSetPinDir+0x202>
					break;
			}
		}
		else if (Local_DirectionState == Output)
     fd2:	8b 81       	ldd	r24, Y+3	; 0x03
     fd4:	81 30       	cpi	r24, 0x01	; 1
     fd6:	09 f0       	breq	.+2      	; 0xfda <DIO_VoidSetPinDir+0x124>
     fd8:	6f c0       	rjmp	.+222    	; 0x10b8 <DIO_VoidSetPinDir+0x202>
		{
			switch (Local_Groupname)
     fda:	89 81       	ldd	r24, Y+1	; 0x01
     fdc:	28 2f       	mov	r18, r24
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	3d 83       	std	Y+5, r19	; 0x05
     fe2:	2c 83       	std	Y+4, r18	; 0x04
     fe4:	8c 81       	ldd	r24, Y+4	; 0x04
     fe6:	9d 81       	ldd	r25, Y+5	; 0x05
     fe8:	82 30       	cpi	r24, 0x02	; 2
     fea:	91 05       	cpc	r25, r1
     fec:	51 f1       	breq	.+84     	; 0x1042 <DIO_VoidSetPinDir+0x18c>
     fee:	2c 81       	ldd	r18, Y+4	; 0x04
     ff0:	3d 81       	ldd	r19, Y+5	; 0x05
     ff2:	23 30       	cpi	r18, 0x03	; 3
     ff4:	31 05       	cpc	r19, r1
     ff6:	34 f4       	brge	.+12     	; 0x1004 <DIO_VoidSetPinDir+0x14e>
     ff8:	8c 81       	ldd	r24, Y+4	; 0x04
     ffa:	9d 81       	ldd	r25, Y+5	; 0x05
     ffc:	81 30       	cpi	r24, 0x01	; 1
     ffe:	91 05       	cpc	r25, r1
    1000:	61 f0       	breq	.+24     	; 0x101a <DIO_VoidSetPinDir+0x164>
    1002:	5a c0       	rjmp	.+180    	; 0x10b8 <DIO_VoidSetPinDir+0x202>
    1004:	2c 81       	ldd	r18, Y+4	; 0x04
    1006:	3d 81       	ldd	r19, Y+5	; 0x05
    1008:	23 30       	cpi	r18, 0x03	; 3
    100a:	31 05       	cpc	r19, r1
    100c:	71 f1       	breq	.+92     	; 0x106a <DIO_VoidSetPinDir+0x1b4>
    100e:	8c 81       	ldd	r24, Y+4	; 0x04
    1010:	9d 81       	ldd	r25, Y+5	; 0x05
    1012:	84 30       	cpi	r24, 0x04	; 4
    1014:	91 05       	cpc	r25, r1
    1016:	e9 f1       	breq	.+122    	; 0x1092 <DIO_VoidSetPinDir+0x1dc>
    1018:	4f c0       	rjmp	.+158    	; 0x10b8 <DIO_VoidSetPinDir+0x202>
			{
				case Group_A :
					Set_Bit(DIO_DDRA, Local_PinNumber);
    101a:	aa e3       	ldi	r26, 0x3A	; 58
    101c:	b0 e0       	ldi	r27, 0x00	; 0
    101e:	ea e3       	ldi	r30, 0x3A	; 58
    1020:	f0 e0       	ldi	r31, 0x00	; 0
    1022:	80 81       	ld	r24, Z
    1024:	48 2f       	mov	r20, r24
    1026:	8a 81       	ldd	r24, Y+2	; 0x02
    1028:	28 2f       	mov	r18, r24
    102a:	30 e0       	ldi	r19, 0x00	; 0
    102c:	81 e0       	ldi	r24, 0x01	; 1
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	02 2e       	mov	r0, r18
    1032:	02 c0       	rjmp	.+4      	; 0x1038 <DIO_VoidSetPinDir+0x182>
    1034:	88 0f       	add	r24, r24
    1036:	99 1f       	adc	r25, r25
    1038:	0a 94       	dec	r0
    103a:	e2 f7       	brpl	.-8      	; 0x1034 <DIO_VoidSetPinDir+0x17e>
    103c:	84 2b       	or	r24, r20
    103e:	8c 93       	st	X, r24
    1040:	3b c0       	rjmp	.+118    	; 0x10b8 <DIO_VoidSetPinDir+0x202>
					break;
				case Group_B :
					Set_Bit(DIO_DDRB, Local_PinNumber);
    1042:	a7 e3       	ldi	r26, 0x37	; 55
    1044:	b0 e0       	ldi	r27, 0x00	; 0
    1046:	e7 e3       	ldi	r30, 0x37	; 55
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	80 81       	ld	r24, Z
    104c:	48 2f       	mov	r20, r24
    104e:	8a 81       	ldd	r24, Y+2	; 0x02
    1050:	28 2f       	mov	r18, r24
    1052:	30 e0       	ldi	r19, 0x00	; 0
    1054:	81 e0       	ldi	r24, 0x01	; 1
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	02 2e       	mov	r0, r18
    105a:	02 c0       	rjmp	.+4      	; 0x1060 <DIO_VoidSetPinDir+0x1aa>
    105c:	88 0f       	add	r24, r24
    105e:	99 1f       	adc	r25, r25
    1060:	0a 94       	dec	r0
    1062:	e2 f7       	brpl	.-8      	; 0x105c <DIO_VoidSetPinDir+0x1a6>
    1064:	84 2b       	or	r24, r20
    1066:	8c 93       	st	X, r24
    1068:	27 c0       	rjmp	.+78     	; 0x10b8 <DIO_VoidSetPinDir+0x202>
					break;
				case Group_C :
					Set_Bit(DIO_DDRC, Local_PinNumber);
    106a:	a4 e3       	ldi	r26, 0x34	; 52
    106c:	b0 e0       	ldi	r27, 0x00	; 0
    106e:	e4 e3       	ldi	r30, 0x34	; 52
    1070:	f0 e0       	ldi	r31, 0x00	; 0
    1072:	80 81       	ld	r24, Z
    1074:	48 2f       	mov	r20, r24
    1076:	8a 81       	ldd	r24, Y+2	; 0x02
    1078:	28 2f       	mov	r18, r24
    107a:	30 e0       	ldi	r19, 0x00	; 0
    107c:	81 e0       	ldi	r24, 0x01	; 1
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	02 2e       	mov	r0, r18
    1082:	02 c0       	rjmp	.+4      	; 0x1088 <DIO_VoidSetPinDir+0x1d2>
    1084:	88 0f       	add	r24, r24
    1086:	99 1f       	adc	r25, r25
    1088:	0a 94       	dec	r0
    108a:	e2 f7       	brpl	.-8      	; 0x1084 <DIO_VoidSetPinDir+0x1ce>
    108c:	84 2b       	or	r24, r20
    108e:	8c 93       	st	X, r24
    1090:	13 c0       	rjmp	.+38     	; 0x10b8 <DIO_VoidSetPinDir+0x202>
					break;
				case Group_D :
					Set_Bit(DIO_DDRD, Local_PinNumber);
    1092:	a1 e3       	ldi	r26, 0x31	; 49
    1094:	b0 e0       	ldi	r27, 0x00	; 0
    1096:	e1 e3       	ldi	r30, 0x31	; 49
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	80 81       	ld	r24, Z
    109c:	48 2f       	mov	r20, r24
    109e:	8a 81       	ldd	r24, Y+2	; 0x02
    10a0:	28 2f       	mov	r18, r24
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	81 e0       	ldi	r24, 0x01	; 1
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	02 2e       	mov	r0, r18
    10aa:	02 c0       	rjmp	.+4      	; 0x10b0 <DIO_VoidSetPinDir+0x1fa>
    10ac:	88 0f       	add	r24, r24
    10ae:	99 1f       	adc	r25, r25
    10b0:	0a 94       	dec	r0
    10b2:	e2 f7       	brpl	.-8      	; 0x10ac <DIO_VoidSetPinDir+0x1f6>
    10b4:	84 2b       	or	r24, r20
    10b6:	8c 93       	st	X, r24
					break;
			}
		}
	}
}
    10b8:	27 96       	adiw	r28, 0x07	; 7
    10ba:	0f b6       	in	r0, 0x3f	; 63
    10bc:	f8 94       	cli
    10be:	de bf       	out	0x3e, r29	; 62
    10c0:	0f be       	out	0x3f, r0	; 63
    10c2:	cd bf       	out	0x3d, r28	; 61
    10c4:	cf 91       	pop	r28
    10c6:	df 91       	pop	r29
    10c8:	08 95       	ret

000010ca <DIO_VoidSetPinValue>:
void DIO_VoidSetPinValue(u8 Local_Groupname, u8 Local_PinNumber, u8 Local_valueState)
{
    10ca:	df 93       	push	r29
    10cc:	cf 93       	push	r28
    10ce:	cd b7       	in	r28, 0x3d	; 61
    10d0:	de b7       	in	r29, 0x3e	; 62
    10d2:	27 97       	sbiw	r28, 0x07	; 7
    10d4:	0f b6       	in	r0, 0x3f	; 63
    10d6:	f8 94       	cli
    10d8:	de bf       	out	0x3e, r29	; 62
    10da:	0f be       	out	0x3f, r0	; 63
    10dc:	cd bf       	out	0x3d, r28	; 61
    10de:	89 83       	std	Y+1, r24	; 0x01
    10e0:	6a 83       	std	Y+2, r22	; 0x02
    10e2:	4b 83       	std	Y+3, r20	; 0x03
	if (Local_Groupname <= Group_D && Local_PinNumber <= Pin_D7)
    10e4:	89 81       	ldd	r24, Y+1	; 0x01
    10e6:	85 30       	cpi	r24, 0x05	; 5
    10e8:	08 f0       	brcs	.+2      	; 0x10ec <DIO_VoidSetPinValue+0x22>
    10ea:	f0 c0       	rjmp	.+480    	; 0x12cc <DIO_VoidSetPinValue+0x202>
    10ec:	8a 81       	ldd	r24, Y+2	; 0x02
    10ee:	88 30       	cpi	r24, 0x08	; 8
    10f0:	08 f0       	brcs	.+2      	; 0x10f4 <DIO_VoidSetPinValue+0x2a>
    10f2:	ec c0       	rjmp	.+472    	; 0x12cc <DIO_VoidSetPinValue+0x202>
	{
		if (Local_valueState == Low)
    10f4:	8b 81       	ldd	r24, Y+3	; 0x03
    10f6:	88 23       	and	r24, r24
    10f8:	09 f0       	breq	.+2      	; 0x10fc <DIO_VoidSetPinValue+0x32>
    10fa:	75 c0       	rjmp	.+234    	; 0x11e6 <DIO_VoidSetPinValue+0x11c>
		{
			switch (Local_Groupname)
    10fc:	89 81       	ldd	r24, Y+1	; 0x01
    10fe:	28 2f       	mov	r18, r24
    1100:	30 e0       	ldi	r19, 0x00	; 0
    1102:	3f 83       	std	Y+7, r19	; 0x07
    1104:	2e 83       	std	Y+6, r18	; 0x06
    1106:	8e 81       	ldd	r24, Y+6	; 0x06
    1108:	9f 81       	ldd	r25, Y+7	; 0x07
    110a:	82 30       	cpi	r24, 0x02	; 2
    110c:	91 05       	cpc	r25, r1
    110e:	61 f1       	breq	.+88     	; 0x1168 <DIO_VoidSetPinValue+0x9e>
    1110:	2e 81       	ldd	r18, Y+6	; 0x06
    1112:	3f 81       	ldd	r19, Y+7	; 0x07
    1114:	23 30       	cpi	r18, 0x03	; 3
    1116:	31 05       	cpc	r19, r1
    1118:	34 f4       	brge	.+12     	; 0x1126 <DIO_VoidSetPinValue+0x5c>
    111a:	8e 81       	ldd	r24, Y+6	; 0x06
    111c:	9f 81       	ldd	r25, Y+7	; 0x07
    111e:	81 30       	cpi	r24, 0x01	; 1
    1120:	91 05       	cpc	r25, r1
    1122:	69 f0       	breq	.+26     	; 0x113e <DIO_VoidSetPinValue+0x74>
    1124:	d3 c0       	rjmp	.+422    	; 0x12cc <DIO_VoidSetPinValue+0x202>
    1126:	2e 81       	ldd	r18, Y+6	; 0x06
    1128:	3f 81       	ldd	r19, Y+7	; 0x07
    112a:	23 30       	cpi	r18, 0x03	; 3
    112c:	31 05       	cpc	r19, r1
    112e:	89 f1       	breq	.+98     	; 0x1192 <DIO_VoidSetPinValue+0xc8>
    1130:	8e 81       	ldd	r24, Y+6	; 0x06
    1132:	9f 81       	ldd	r25, Y+7	; 0x07
    1134:	84 30       	cpi	r24, 0x04	; 4
    1136:	91 05       	cpc	r25, r1
    1138:	09 f4       	brne	.+2      	; 0x113c <DIO_VoidSetPinValue+0x72>
    113a:	40 c0       	rjmp	.+128    	; 0x11bc <DIO_VoidSetPinValue+0xf2>
    113c:	c7 c0       	rjmp	.+398    	; 0x12cc <DIO_VoidSetPinValue+0x202>
			{
				case Group_A:
					clear_Bit(DIO_PORTA, Local_PinNumber);
    113e:	ab e3       	ldi	r26, 0x3B	; 59
    1140:	b0 e0       	ldi	r27, 0x00	; 0
    1142:	eb e3       	ldi	r30, 0x3B	; 59
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	80 81       	ld	r24, Z
    1148:	48 2f       	mov	r20, r24
    114a:	8a 81       	ldd	r24, Y+2	; 0x02
    114c:	28 2f       	mov	r18, r24
    114e:	30 e0       	ldi	r19, 0x00	; 0
    1150:	81 e0       	ldi	r24, 0x01	; 1
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	02 2e       	mov	r0, r18
    1156:	02 c0       	rjmp	.+4      	; 0x115c <DIO_VoidSetPinValue+0x92>
    1158:	88 0f       	add	r24, r24
    115a:	99 1f       	adc	r25, r25
    115c:	0a 94       	dec	r0
    115e:	e2 f7       	brpl	.-8      	; 0x1158 <DIO_VoidSetPinValue+0x8e>
    1160:	80 95       	com	r24
    1162:	84 23       	and	r24, r20
    1164:	8c 93       	st	X, r24
    1166:	b2 c0       	rjmp	.+356    	; 0x12cc <DIO_VoidSetPinValue+0x202>
					break;
				case Group_B:
					clear_Bit(DIO_PORTB, Local_PinNumber);
    1168:	a8 e3       	ldi	r26, 0x38	; 56
    116a:	b0 e0       	ldi	r27, 0x00	; 0
    116c:	e8 e3       	ldi	r30, 0x38	; 56
    116e:	f0 e0       	ldi	r31, 0x00	; 0
    1170:	80 81       	ld	r24, Z
    1172:	48 2f       	mov	r20, r24
    1174:	8a 81       	ldd	r24, Y+2	; 0x02
    1176:	28 2f       	mov	r18, r24
    1178:	30 e0       	ldi	r19, 0x00	; 0
    117a:	81 e0       	ldi	r24, 0x01	; 1
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	02 2e       	mov	r0, r18
    1180:	02 c0       	rjmp	.+4      	; 0x1186 <DIO_VoidSetPinValue+0xbc>
    1182:	88 0f       	add	r24, r24
    1184:	99 1f       	adc	r25, r25
    1186:	0a 94       	dec	r0
    1188:	e2 f7       	brpl	.-8      	; 0x1182 <DIO_VoidSetPinValue+0xb8>
    118a:	80 95       	com	r24
    118c:	84 23       	and	r24, r20
    118e:	8c 93       	st	X, r24
    1190:	9d c0       	rjmp	.+314    	; 0x12cc <DIO_VoidSetPinValue+0x202>
					break;
				case Group_C:
					clear_Bit(DIO_PORTC, Local_PinNumber);
    1192:	a5 e3       	ldi	r26, 0x35	; 53
    1194:	b0 e0       	ldi	r27, 0x00	; 0
    1196:	e5 e3       	ldi	r30, 0x35	; 53
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	48 2f       	mov	r20, r24
    119e:	8a 81       	ldd	r24, Y+2	; 0x02
    11a0:	28 2f       	mov	r18, r24
    11a2:	30 e0       	ldi	r19, 0x00	; 0
    11a4:	81 e0       	ldi	r24, 0x01	; 1
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	02 2e       	mov	r0, r18
    11aa:	02 c0       	rjmp	.+4      	; 0x11b0 <DIO_VoidSetPinValue+0xe6>
    11ac:	88 0f       	add	r24, r24
    11ae:	99 1f       	adc	r25, r25
    11b0:	0a 94       	dec	r0
    11b2:	e2 f7       	brpl	.-8      	; 0x11ac <DIO_VoidSetPinValue+0xe2>
    11b4:	80 95       	com	r24
    11b6:	84 23       	and	r24, r20
    11b8:	8c 93       	st	X, r24
    11ba:	88 c0       	rjmp	.+272    	; 0x12cc <DIO_VoidSetPinValue+0x202>
					break;
				case Group_D:
					clear_Bit(DIO_PORTD, Local_PinNumber);
    11bc:	a2 e3       	ldi	r26, 0x32	; 50
    11be:	b0 e0       	ldi	r27, 0x00	; 0
    11c0:	e2 e3       	ldi	r30, 0x32	; 50
    11c2:	f0 e0       	ldi	r31, 0x00	; 0
    11c4:	80 81       	ld	r24, Z
    11c6:	48 2f       	mov	r20, r24
    11c8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ca:	28 2f       	mov	r18, r24
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	81 e0       	ldi	r24, 0x01	; 1
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	02 2e       	mov	r0, r18
    11d4:	02 c0       	rjmp	.+4      	; 0x11da <DIO_VoidSetPinValue+0x110>
    11d6:	88 0f       	add	r24, r24
    11d8:	99 1f       	adc	r25, r25
    11da:	0a 94       	dec	r0
    11dc:	e2 f7       	brpl	.-8      	; 0x11d6 <DIO_VoidSetPinValue+0x10c>
    11de:	80 95       	com	r24
    11e0:	84 23       	and	r24, r20
    11e2:	8c 93       	st	X, r24
    11e4:	73 c0       	rjmp	.+230    	; 0x12cc <DIO_VoidSetPinValue+0x202>
					break;
			}
		}
		else if (Local_valueState == High)
    11e6:	8b 81       	ldd	r24, Y+3	; 0x03
    11e8:	81 30       	cpi	r24, 0x01	; 1
    11ea:	09 f0       	breq	.+2      	; 0x11ee <DIO_VoidSetPinValue+0x124>
    11ec:	6f c0       	rjmp	.+222    	; 0x12cc <DIO_VoidSetPinValue+0x202>
		{
			switch (Local_Groupname)
    11ee:	89 81       	ldd	r24, Y+1	; 0x01
    11f0:	28 2f       	mov	r18, r24
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	3d 83       	std	Y+5, r19	; 0x05
    11f6:	2c 83       	std	Y+4, r18	; 0x04
    11f8:	8c 81       	ldd	r24, Y+4	; 0x04
    11fa:	9d 81       	ldd	r25, Y+5	; 0x05
    11fc:	82 30       	cpi	r24, 0x02	; 2
    11fe:	91 05       	cpc	r25, r1
    1200:	51 f1       	breq	.+84     	; 0x1256 <DIO_VoidSetPinValue+0x18c>
    1202:	2c 81       	ldd	r18, Y+4	; 0x04
    1204:	3d 81       	ldd	r19, Y+5	; 0x05
    1206:	23 30       	cpi	r18, 0x03	; 3
    1208:	31 05       	cpc	r19, r1
    120a:	34 f4       	brge	.+12     	; 0x1218 <DIO_VoidSetPinValue+0x14e>
    120c:	8c 81       	ldd	r24, Y+4	; 0x04
    120e:	9d 81       	ldd	r25, Y+5	; 0x05
    1210:	81 30       	cpi	r24, 0x01	; 1
    1212:	91 05       	cpc	r25, r1
    1214:	61 f0       	breq	.+24     	; 0x122e <DIO_VoidSetPinValue+0x164>
    1216:	5a c0       	rjmp	.+180    	; 0x12cc <DIO_VoidSetPinValue+0x202>
    1218:	2c 81       	ldd	r18, Y+4	; 0x04
    121a:	3d 81       	ldd	r19, Y+5	; 0x05
    121c:	23 30       	cpi	r18, 0x03	; 3
    121e:	31 05       	cpc	r19, r1
    1220:	71 f1       	breq	.+92     	; 0x127e <DIO_VoidSetPinValue+0x1b4>
    1222:	8c 81       	ldd	r24, Y+4	; 0x04
    1224:	9d 81       	ldd	r25, Y+5	; 0x05
    1226:	84 30       	cpi	r24, 0x04	; 4
    1228:	91 05       	cpc	r25, r1
    122a:	e9 f1       	breq	.+122    	; 0x12a6 <DIO_VoidSetPinValue+0x1dc>
    122c:	4f c0       	rjmp	.+158    	; 0x12cc <DIO_VoidSetPinValue+0x202>
			{
				case Group_A:
					Set_Bit(DIO_PORTA, Local_PinNumber);
    122e:	ab e3       	ldi	r26, 0x3B	; 59
    1230:	b0 e0       	ldi	r27, 0x00	; 0
    1232:	eb e3       	ldi	r30, 0x3B	; 59
    1234:	f0 e0       	ldi	r31, 0x00	; 0
    1236:	80 81       	ld	r24, Z
    1238:	48 2f       	mov	r20, r24
    123a:	8a 81       	ldd	r24, Y+2	; 0x02
    123c:	28 2f       	mov	r18, r24
    123e:	30 e0       	ldi	r19, 0x00	; 0
    1240:	81 e0       	ldi	r24, 0x01	; 1
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	02 2e       	mov	r0, r18
    1246:	02 c0       	rjmp	.+4      	; 0x124c <DIO_VoidSetPinValue+0x182>
    1248:	88 0f       	add	r24, r24
    124a:	99 1f       	adc	r25, r25
    124c:	0a 94       	dec	r0
    124e:	e2 f7       	brpl	.-8      	; 0x1248 <DIO_VoidSetPinValue+0x17e>
    1250:	84 2b       	or	r24, r20
    1252:	8c 93       	st	X, r24
    1254:	3b c0       	rjmp	.+118    	; 0x12cc <DIO_VoidSetPinValue+0x202>
					break;
				case Group_B:
					Set_Bit(DIO_PORTB, Local_PinNumber);
    1256:	a8 e3       	ldi	r26, 0x38	; 56
    1258:	b0 e0       	ldi	r27, 0x00	; 0
    125a:	e8 e3       	ldi	r30, 0x38	; 56
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	80 81       	ld	r24, Z
    1260:	48 2f       	mov	r20, r24
    1262:	8a 81       	ldd	r24, Y+2	; 0x02
    1264:	28 2f       	mov	r18, r24
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	81 e0       	ldi	r24, 0x01	; 1
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	02 2e       	mov	r0, r18
    126e:	02 c0       	rjmp	.+4      	; 0x1274 <DIO_VoidSetPinValue+0x1aa>
    1270:	88 0f       	add	r24, r24
    1272:	99 1f       	adc	r25, r25
    1274:	0a 94       	dec	r0
    1276:	e2 f7       	brpl	.-8      	; 0x1270 <DIO_VoidSetPinValue+0x1a6>
    1278:	84 2b       	or	r24, r20
    127a:	8c 93       	st	X, r24
    127c:	27 c0       	rjmp	.+78     	; 0x12cc <DIO_VoidSetPinValue+0x202>
					break;
				case Group_C:
					Set_Bit(DIO_PORTC, Local_PinNumber);
    127e:	a5 e3       	ldi	r26, 0x35	; 53
    1280:	b0 e0       	ldi	r27, 0x00	; 0
    1282:	e5 e3       	ldi	r30, 0x35	; 53
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	80 81       	ld	r24, Z
    1288:	48 2f       	mov	r20, r24
    128a:	8a 81       	ldd	r24, Y+2	; 0x02
    128c:	28 2f       	mov	r18, r24
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	81 e0       	ldi	r24, 0x01	; 1
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	02 2e       	mov	r0, r18
    1296:	02 c0       	rjmp	.+4      	; 0x129c <DIO_VoidSetPinValue+0x1d2>
    1298:	88 0f       	add	r24, r24
    129a:	99 1f       	adc	r25, r25
    129c:	0a 94       	dec	r0
    129e:	e2 f7       	brpl	.-8      	; 0x1298 <DIO_VoidSetPinValue+0x1ce>
    12a0:	84 2b       	or	r24, r20
    12a2:	8c 93       	st	X, r24
    12a4:	13 c0       	rjmp	.+38     	; 0x12cc <DIO_VoidSetPinValue+0x202>
					break;
				case Group_D:
					Set_Bit(DIO_PORTD, Local_PinNumber);
    12a6:	a2 e3       	ldi	r26, 0x32	; 50
    12a8:	b0 e0       	ldi	r27, 0x00	; 0
    12aa:	e2 e3       	ldi	r30, 0x32	; 50
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
    12ae:	80 81       	ld	r24, Z
    12b0:	48 2f       	mov	r20, r24
    12b2:	8a 81       	ldd	r24, Y+2	; 0x02
    12b4:	28 2f       	mov	r18, r24
    12b6:	30 e0       	ldi	r19, 0x00	; 0
    12b8:	81 e0       	ldi	r24, 0x01	; 1
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	02 2e       	mov	r0, r18
    12be:	02 c0       	rjmp	.+4      	; 0x12c4 <DIO_VoidSetPinValue+0x1fa>
    12c0:	88 0f       	add	r24, r24
    12c2:	99 1f       	adc	r25, r25
    12c4:	0a 94       	dec	r0
    12c6:	e2 f7       	brpl	.-8      	; 0x12c0 <DIO_VoidSetPinValue+0x1f6>
    12c8:	84 2b       	or	r24, r20
    12ca:	8c 93       	st	X, r24
					break;
			}
		}
	}
}
    12cc:	27 96       	adiw	r28, 0x07	; 7
    12ce:	0f b6       	in	r0, 0x3f	; 63
    12d0:	f8 94       	cli
    12d2:	de bf       	out	0x3e, r29	; 62
    12d4:	0f be       	out	0x3f, r0	; 63
    12d6:	cd bf       	out	0x3d, r28	; 61
    12d8:	cf 91       	pop	r28
    12da:	df 91       	pop	r29
    12dc:	08 95       	ret

000012de <DIO_u8GetPinValue>:
u8	 DIO_u8GetPinValue (u8 Local_Groupname, u8 Local_PinNumber)
{
    12de:	df 93       	push	r29
    12e0:	cf 93       	push	r28
    12e2:	00 d0       	rcall	.+0      	; 0x12e4 <DIO_u8GetPinValue+0x6>
    12e4:	00 d0       	rcall	.+0      	; 0x12e6 <DIO_u8GetPinValue+0x8>
    12e6:	00 d0       	rcall	.+0      	; 0x12e8 <DIO_u8GetPinValue+0xa>
    12e8:	cd b7       	in	r28, 0x3d	; 61
    12ea:	de b7       	in	r29, 0x3e	; 62
    12ec:	8a 83       	std	Y+2, r24	; 0x02
    12ee:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_returndata = 0;
    12f0:	19 82       	std	Y+1, r1	; 0x01
	if (Local_Groupname <= Group_D && Local_PinNumber <= Pin_D7)
    12f2:	8a 81       	ldd	r24, Y+2	; 0x02
    12f4:	85 30       	cpi	r24, 0x05	; 5
    12f6:	08 f0       	brcs	.+2      	; 0x12fa <DIO_u8GetPinValue+0x1c>
    12f8:	6e c0       	rjmp	.+220    	; 0x13d6 <DIO_u8GetPinValue+0xf8>
    12fa:	8b 81       	ldd	r24, Y+3	; 0x03
    12fc:	88 30       	cpi	r24, 0x08	; 8
    12fe:	08 f0       	brcs	.+2      	; 0x1302 <DIO_u8GetPinValue+0x24>
    1300:	6a c0       	rjmp	.+212    	; 0x13d6 <DIO_u8GetPinValue+0xf8>
	{
		switch (Local_Groupname)
    1302:	8a 81       	ldd	r24, Y+2	; 0x02
    1304:	28 2f       	mov	r18, r24
    1306:	30 e0       	ldi	r19, 0x00	; 0
    1308:	3e 83       	std	Y+6, r19	; 0x06
    130a:	2d 83       	std	Y+5, r18	; 0x05
    130c:	4d 81       	ldd	r20, Y+5	; 0x05
    130e:	5e 81       	ldd	r21, Y+6	; 0x06
    1310:	42 30       	cpi	r20, 0x02	; 2
    1312:	51 05       	cpc	r21, r1
    1314:	41 f1       	breq	.+80     	; 0x1366 <DIO_u8GetPinValue+0x88>
    1316:	8d 81       	ldd	r24, Y+5	; 0x05
    1318:	9e 81       	ldd	r25, Y+6	; 0x06
    131a:	83 30       	cpi	r24, 0x03	; 3
    131c:	91 05       	cpc	r25, r1
    131e:	34 f4       	brge	.+12     	; 0x132c <DIO_u8GetPinValue+0x4e>
    1320:	2d 81       	ldd	r18, Y+5	; 0x05
    1322:	3e 81       	ldd	r19, Y+6	; 0x06
    1324:	21 30       	cpi	r18, 0x01	; 1
    1326:	31 05       	cpc	r19, r1
    1328:	61 f0       	breq	.+24     	; 0x1342 <DIO_u8GetPinValue+0x64>
    132a:	52 c0       	rjmp	.+164    	; 0x13d0 <DIO_u8GetPinValue+0xf2>
    132c:	4d 81       	ldd	r20, Y+5	; 0x05
    132e:	5e 81       	ldd	r21, Y+6	; 0x06
    1330:	43 30       	cpi	r20, 0x03	; 3
    1332:	51 05       	cpc	r21, r1
    1334:	51 f1       	breq	.+84     	; 0x138a <DIO_u8GetPinValue+0xac>
    1336:	8d 81       	ldd	r24, Y+5	; 0x05
    1338:	9e 81       	ldd	r25, Y+6	; 0x06
    133a:	84 30       	cpi	r24, 0x04	; 4
    133c:	91 05       	cpc	r25, r1
    133e:	b9 f1       	breq	.+110    	; 0x13ae <DIO_u8GetPinValue+0xd0>
    1340:	47 c0       	rjmp	.+142    	; 0x13d0 <DIO_u8GetPinValue+0xf2>
		{
			case Group_A:
				Local_returndata = Get_Bit(DIO_PINA, Local_PinNumber);
    1342:	e9 e3       	ldi	r30, 0x39	; 57
    1344:	f0 e0       	ldi	r31, 0x00	; 0
    1346:	80 81       	ld	r24, Z
    1348:	28 2f       	mov	r18, r24
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	8b 81       	ldd	r24, Y+3	; 0x03
    134e:	88 2f       	mov	r24, r24
    1350:	90 e0       	ldi	r25, 0x00	; 0
    1352:	a9 01       	movw	r20, r18
    1354:	02 c0       	rjmp	.+4      	; 0x135a <DIO_u8GetPinValue+0x7c>
    1356:	55 95       	asr	r21
    1358:	47 95       	ror	r20
    135a:	8a 95       	dec	r24
    135c:	e2 f7       	brpl	.-8      	; 0x1356 <DIO_u8GetPinValue+0x78>
    135e:	ca 01       	movw	r24, r20
    1360:	81 70       	andi	r24, 0x01	; 1
    1362:	89 83       	std	Y+1, r24	; 0x01
    1364:	35 c0       	rjmp	.+106    	; 0x13d0 <DIO_u8GetPinValue+0xf2>
				break;
			case Group_B:
				Local_returndata = Get_Bit(DIO_PINB, Local_PinNumber);
    1366:	e6 e3       	ldi	r30, 0x36	; 54
    1368:	f0 e0       	ldi	r31, 0x00	; 0
    136a:	80 81       	ld	r24, Z
    136c:	28 2f       	mov	r18, r24
    136e:	30 e0       	ldi	r19, 0x00	; 0
    1370:	8b 81       	ldd	r24, Y+3	; 0x03
    1372:	88 2f       	mov	r24, r24
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	a9 01       	movw	r20, r18
    1378:	02 c0       	rjmp	.+4      	; 0x137e <DIO_u8GetPinValue+0xa0>
    137a:	55 95       	asr	r21
    137c:	47 95       	ror	r20
    137e:	8a 95       	dec	r24
    1380:	e2 f7       	brpl	.-8      	; 0x137a <DIO_u8GetPinValue+0x9c>
    1382:	ca 01       	movw	r24, r20
    1384:	81 70       	andi	r24, 0x01	; 1
    1386:	89 83       	std	Y+1, r24	; 0x01
    1388:	23 c0       	rjmp	.+70     	; 0x13d0 <DIO_u8GetPinValue+0xf2>
				break;
			case Group_C:
				Local_returndata = Get_Bit(DIO_PINC, Local_PinNumber);
    138a:	e3 e3       	ldi	r30, 0x33	; 51
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	80 81       	ld	r24, Z
    1390:	28 2f       	mov	r18, r24
    1392:	30 e0       	ldi	r19, 0x00	; 0
    1394:	8b 81       	ldd	r24, Y+3	; 0x03
    1396:	88 2f       	mov	r24, r24
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	a9 01       	movw	r20, r18
    139c:	02 c0       	rjmp	.+4      	; 0x13a2 <DIO_u8GetPinValue+0xc4>
    139e:	55 95       	asr	r21
    13a0:	47 95       	ror	r20
    13a2:	8a 95       	dec	r24
    13a4:	e2 f7       	brpl	.-8      	; 0x139e <DIO_u8GetPinValue+0xc0>
    13a6:	ca 01       	movw	r24, r20
    13a8:	81 70       	andi	r24, 0x01	; 1
    13aa:	89 83       	std	Y+1, r24	; 0x01
    13ac:	11 c0       	rjmp	.+34     	; 0x13d0 <DIO_u8GetPinValue+0xf2>
				break;
			case Group_D:
				Local_returndata = Get_Bit(DIO_PIND, Local_PinNumber);
    13ae:	e0 e3       	ldi	r30, 0x30	; 48
    13b0:	f0 e0       	ldi	r31, 0x00	; 0
    13b2:	80 81       	ld	r24, Z
    13b4:	28 2f       	mov	r18, r24
    13b6:	30 e0       	ldi	r19, 0x00	; 0
    13b8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ba:	88 2f       	mov	r24, r24
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	a9 01       	movw	r20, r18
    13c0:	02 c0       	rjmp	.+4      	; 0x13c6 <DIO_u8GetPinValue+0xe8>
    13c2:	55 95       	asr	r21
    13c4:	47 95       	ror	r20
    13c6:	8a 95       	dec	r24
    13c8:	e2 f7       	brpl	.-8      	; 0x13c2 <DIO_u8GetPinValue+0xe4>
    13ca:	ca 01       	movw	r24, r20
    13cc:	81 70       	andi	r24, 0x01	; 1
    13ce:	89 83       	std	Y+1, r24	; 0x01
				break;
		}
		return Local_returndata;
    13d0:	59 81       	ldd	r21, Y+1	; 0x01
    13d2:	5c 83       	std	Y+4, r21	; 0x04
    13d4:	02 c0       	rjmp	.+4      	; 0x13da <DIO_u8GetPinValue+0xfc>
	}
	else
	{
		return -1;
    13d6:	8f ef       	ldi	r24, 0xFF	; 255
    13d8:	8c 83       	std	Y+4, r24	; 0x04
    13da:	8c 81       	ldd	r24, Y+4	; 0x04
	}
}
    13dc:	26 96       	adiw	r28, 0x06	; 6
    13de:	0f b6       	in	r0, 0x3f	; 63
    13e0:	f8 94       	cli
    13e2:	de bf       	out	0x3e, r29	; 62
    13e4:	0f be       	out	0x3f, r0	; 63
    13e6:	cd bf       	out	0x3d, r28	; 61
    13e8:	cf 91       	pop	r28
    13ea:	df 91       	pop	r29
    13ec:	08 95       	ret

000013ee <DIO_VoidSetPortDir>:
void DIO_VoidSetPortDir(u8 Local_Groupname, u8 Local_DirectionState)
{
    13ee:	df 93       	push	r29
    13f0:	cf 93       	push	r28
    13f2:	00 d0       	rcall	.+0      	; 0x13f4 <DIO_VoidSetPortDir+0x6>
    13f4:	00 d0       	rcall	.+0      	; 0x13f6 <DIO_VoidSetPortDir+0x8>
    13f6:	cd b7       	in	r28, 0x3d	; 61
    13f8:	de b7       	in	r29, 0x3e	; 62
    13fa:	89 83       	std	Y+1, r24	; 0x01
    13fc:	6a 83       	std	Y+2, r22	; 0x02
	switch (Local_Groupname)
    13fe:	89 81       	ldd	r24, Y+1	; 0x01
    1400:	28 2f       	mov	r18, r24
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	3c 83       	std	Y+4, r19	; 0x04
    1406:	2b 83       	std	Y+3, r18	; 0x03
    1408:	8b 81       	ldd	r24, Y+3	; 0x03
    140a:	9c 81       	ldd	r25, Y+4	; 0x04
    140c:	82 30       	cpi	r24, 0x02	; 2
    140e:	91 05       	cpc	r25, r1
    1410:	d9 f0       	breq	.+54     	; 0x1448 <DIO_VoidSetPortDir+0x5a>
    1412:	2b 81       	ldd	r18, Y+3	; 0x03
    1414:	3c 81       	ldd	r19, Y+4	; 0x04
    1416:	23 30       	cpi	r18, 0x03	; 3
    1418:	31 05       	cpc	r19, r1
    141a:	34 f4       	brge	.+12     	; 0x1428 <DIO_VoidSetPortDir+0x3a>
    141c:	8b 81       	ldd	r24, Y+3	; 0x03
    141e:	9c 81       	ldd	r25, Y+4	; 0x04
    1420:	81 30       	cpi	r24, 0x01	; 1
    1422:	91 05       	cpc	r25, r1
    1424:	61 f0       	breq	.+24     	; 0x143e <DIO_VoidSetPortDir+0x50>
    1426:	1e c0       	rjmp	.+60     	; 0x1464 <DIO_VoidSetPortDir+0x76>
    1428:	2b 81       	ldd	r18, Y+3	; 0x03
    142a:	3c 81       	ldd	r19, Y+4	; 0x04
    142c:	23 30       	cpi	r18, 0x03	; 3
    142e:	31 05       	cpc	r19, r1
    1430:	81 f0       	breq	.+32     	; 0x1452 <DIO_VoidSetPortDir+0x64>
    1432:	8b 81       	ldd	r24, Y+3	; 0x03
    1434:	9c 81       	ldd	r25, Y+4	; 0x04
    1436:	84 30       	cpi	r24, 0x04	; 4
    1438:	91 05       	cpc	r25, r1
    143a:	81 f0       	breq	.+32     	; 0x145c <DIO_VoidSetPortDir+0x6e>
    143c:	13 c0       	rjmp	.+38     	; 0x1464 <DIO_VoidSetPortDir+0x76>
	{
		case Group_A:
			DIO_DDRA = Local_DirectionState;
    143e:	ea e3       	ldi	r30, 0x3A	; 58
    1440:	f0 e0       	ldi	r31, 0x00	; 0
    1442:	8a 81       	ldd	r24, Y+2	; 0x02
    1444:	80 83       	st	Z, r24
    1446:	0e c0       	rjmp	.+28     	; 0x1464 <DIO_VoidSetPortDir+0x76>
			break;
		case Group_B:
			DIO_DDRB = Local_DirectionState;
    1448:	e7 e3       	ldi	r30, 0x37	; 55
    144a:	f0 e0       	ldi	r31, 0x00	; 0
    144c:	8a 81       	ldd	r24, Y+2	; 0x02
    144e:	80 83       	st	Z, r24
    1450:	09 c0       	rjmp	.+18     	; 0x1464 <DIO_VoidSetPortDir+0x76>
			break;
		case Group_C:
			DIO_DDRC = Local_DirectionState;
    1452:	e4 e3       	ldi	r30, 0x34	; 52
    1454:	f0 e0       	ldi	r31, 0x00	; 0
    1456:	8a 81       	ldd	r24, Y+2	; 0x02
    1458:	80 83       	st	Z, r24
    145a:	04 c0       	rjmp	.+8      	; 0x1464 <DIO_VoidSetPortDir+0x76>
			break;
		case Group_D:
			DIO_DDRD = Local_DirectionState;
    145c:	e1 e3       	ldi	r30, 0x31	; 49
    145e:	f0 e0       	ldi	r31, 0x00	; 0
    1460:	8a 81       	ldd	r24, Y+2	; 0x02
    1462:	80 83       	st	Z, r24
			break;
	}
}
    1464:	0f 90       	pop	r0
    1466:	0f 90       	pop	r0
    1468:	0f 90       	pop	r0
    146a:	0f 90       	pop	r0
    146c:	cf 91       	pop	r28
    146e:	df 91       	pop	r29
    1470:	08 95       	ret

00001472 <DIO_VoidSetPortValue>:
void DIO_VoidSetPortValue(u8 Local_Groupname, u8 Local_valueState)
{
    1472:	df 93       	push	r29
    1474:	cf 93       	push	r28
    1476:	00 d0       	rcall	.+0      	; 0x1478 <DIO_VoidSetPortValue+0x6>
    1478:	00 d0       	rcall	.+0      	; 0x147a <DIO_VoidSetPortValue+0x8>
    147a:	cd b7       	in	r28, 0x3d	; 61
    147c:	de b7       	in	r29, 0x3e	; 62
    147e:	89 83       	std	Y+1, r24	; 0x01
    1480:	6a 83       	std	Y+2, r22	; 0x02
	switch (Local_Groupname)
    1482:	89 81       	ldd	r24, Y+1	; 0x01
    1484:	28 2f       	mov	r18, r24
    1486:	30 e0       	ldi	r19, 0x00	; 0
    1488:	3c 83       	std	Y+4, r19	; 0x04
    148a:	2b 83       	std	Y+3, r18	; 0x03
    148c:	8b 81       	ldd	r24, Y+3	; 0x03
    148e:	9c 81       	ldd	r25, Y+4	; 0x04
    1490:	82 30       	cpi	r24, 0x02	; 2
    1492:	91 05       	cpc	r25, r1
    1494:	d9 f0       	breq	.+54     	; 0x14cc <DIO_VoidSetPortValue+0x5a>
    1496:	2b 81       	ldd	r18, Y+3	; 0x03
    1498:	3c 81       	ldd	r19, Y+4	; 0x04
    149a:	23 30       	cpi	r18, 0x03	; 3
    149c:	31 05       	cpc	r19, r1
    149e:	34 f4       	brge	.+12     	; 0x14ac <DIO_VoidSetPortValue+0x3a>
    14a0:	8b 81       	ldd	r24, Y+3	; 0x03
    14a2:	9c 81       	ldd	r25, Y+4	; 0x04
    14a4:	81 30       	cpi	r24, 0x01	; 1
    14a6:	91 05       	cpc	r25, r1
    14a8:	61 f0       	breq	.+24     	; 0x14c2 <DIO_VoidSetPortValue+0x50>
    14aa:	1e c0       	rjmp	.+60     	; 0x14e8 <DIO_VoidSetPortValue+0x76>
    14ac:	2b 81       	ldd	r18, Y+3	; 0x03
    14ae:	3c 81       	ldd	r19, Y+4	; 0x04
    14b0:	23 30       	cpi	r18, 0x03	; 3
    14b2:	31 05       	cpc	r19, r1
    14b4:	81 f0       	breq	.+32     	; 0x14d6 <DIO_VoidSetPortValue+0x64>
    14b6:	8b 81       	ldd	r24, Y+3	; 0x03
    14b8:	9c 81       	ldd	r25, Y+4	; 0x04
    14ba:	84 30       	cpi	r24, 0x04	; 4
    14bc:	91 05       	cpc	r25, r1
    14be:	81 f0       	breq	.+32     	; 0x14e0 <DIO_VoidSetPortValue+0x6e>
    14c0:	13 c0       	rjmp	.+38     	; 0x14e8 <DIO_VoidSetPortValue+0x76>
	{
		case Group_A:
			DIO_PORTA = Local_valueState;
    14c2:	eb e3       	ldi	r30, 0x3B	; 59
    14c4:	f0 e0       	ldi	r31, 0x00	; 0
    14c6:	8a 81       	ldd	r24, Y+2	; 0x02
    14c8:	80 83       	st	Z, r24
    14ca:	0e c0       	rjmp	.+28     	; 0x14e8 <DIO_VoidSetPortValue+0x76>
			break;
		case Group_B:
			DIO_PORTB = Local_valueState;
    14cc:	e8 e3       	ldi	r30, 0x38	; 56
    14ce:	f0 e0       	ldi	r31, 0x00	; 0
    14d0:	8a 81       	ldd	r24, Y+2	; 0x02
    14d2:	80 83       	st	Z, r24
    14d4:	09 c0       	rjmp	.+18     	; 0x14e8 <DIO_VoidSetPortValue+0x76>
			break;
		case Group_C:
			DIO_PORTC = Local_valueState;
    14d6:	e5 e3       	ldi	r30, 0x35	; 53
    14d8:	f0 e0       	ldi	r31, 0x00	; 0
    14da:	8a 81       	ldd	r24, Y+2	; 0x02
    14dc:	80 83       	st	Z, r24
    14de:	04 c0       	rjmp	.+8      	; 0x14e8 <DIO_VoidSetPortValue+0x76>
			break;
		case Group_D:
			DIO_PORTD = Local_valueState;
    14e0:	e2 e3       	ldi	r30, 0x32	; 50
    14e2:	f0 e0       	ldi	r31, 0x00	; 0
    14e4:	8a 81       	ldd	r24, Y+2	; 0x02
    14e6:	80 83       	st	Z, r24
			break;
	}
}
    14e8:	0f 90       	pop	r0
    14ea:	0f 90       	pop	r0
    14ec:	0f 90       	pop	r0
    14ee:	0f 90       	pop	r0
    14f0:	cf 91       	pop	r28
    14f2:	df 91       	pop	r29
    14f4:	08 95       	ret

000014f6 <DIO_u8GetPortValue>:
u8	 DIO_u8GetPortValue (u8 Local_Groupname)
{
    14f6:	df 93       	push	r29
    14f8:	cf 93       	push	r28
    14fa:	00 d0       	rcall	.+0      	; 0x14fc <DIO_u8GetPortValue+0x6>
    14fc:	00 d0       	rcall	.+0      	; 0x14fe <DIO_u8GetPortValue+0x8>
    14fe:	0f 92       	push	r0
    1500:	cd b7       	in	r28, 0x3d	; 61
    1502:	de b7       	in	r29, 0x3e	; 62
    1504:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_returndata = 0;
    1506:	19 82       	std	Y+1, r1	; 0x01
	if (Local_Groupname <= Group_D)
    1508:	8a 81       	ldd	r24, Y+2	; 0x02
    150a:	85 30       	cpi	r24, 0x05	; 5
    150c:	b0 f5       	brcc	.+108    	; 0x157a <DIO_u8GetPortValue+0x84>
	{
		switch (Local_Groupname)
    150e:	8a 81       	ldd	r24, Y+2	; 0x02
    1510:	28 2f       	mov	r18, r24
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	3d 83       	std	Y+5, r19	; 0x05
    1516:	2c 83       	std	Y+4, r18	; 0x04
    1518:	8c 81       	ldd	r24, Y+4	; 0x04
    151a:	9d 81       	ldd	r25, Y+5	; 0x05
    151c:	82 30       	cpi	r24, 0x02	; 2
    151e:	91 05       	cpc	r25, r1
    1520:	d9 f0       	breq	.+54     	; 0x1558 <DIO_u8GetPortValue+0x62>
    1522:	2c 81       	ldd	r18, Y+4	; 0x04
    1524:	3d 81       	ldd	r19, Y+5	; 0x05
    1526:	23 30       	cpi	r18, 0x03	; 3
    1528:	31 05       	cpc	r19, r1
    152a:	34 f4       	brge	.+12     	; 0x1538 <DIO_u8GetPortValue+0x42>
    152c:	8c 81       	ldd	r24, Y+4	; 0x04
    152e:	9d 81       	ldd	r25, Y+5	; 0x05
    1530:	81 30       	cpi	r24, 0x01	; 1
    1532:	91 05       	cpc	r25, r1
    1534:	61 f0       	breq	.+24     	; 0x154e <DIO_u8GetPortValue+0x58>
    1536:	1e c0       	rjmp	.+60     	; 0x1574 <DIO_u8GetPortValue+0x7e>
    1538:	2c 81       	ldd	r18, Y+4	; 0x04
    153a:	3d 81       	ldd	r19, Y+5	; 0x05
    153c:	23 30       	cpi	r18, 0x03	; 3
    153e:	31 05       	cpc	r19, r1
    1540:	81 f0       	breq	.+32     	; 0x1562 <DIO_u8GetPortValue+0x6c>
    1542:	8c 81       	ldd	r24, Y+4	; 0x04
    1544:	9d 81       	ldd	r25, Y+5	; 0x05
    1546:	84 30       	cpi	r24, 0x04	; 4
    1548:	91 05       	cpc	r25, r1
    154a:	81 f0       	breq	.+32     	; 0x156c <DIO_u8GetPortValue+0x76>
    154c:	13 c0       	rjmp	.+38     	; 0x1574 <DIO_u8GetPortValue+0x7e>
		{
			case Group_A:
				Local_returndata = DIO_PINA;
    154e:	e9 e3       	ldi	r30, 0x39	; 57
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	80 81       	ld	r24, Z
    1554:	89 83       	std	Y+1, r24	; 0x01
    1556:	0e c0       	rjmp	.+28     	; 0x1574 <DIO_u8GetPortValue+0x7e>
				break;
			case Group_B:
				Local_returndata = DIO_PINB;
    1558:	e6 e3       	ldi	r30, 0x36	; 54
    155a:	f0 e0       	ldi	r31, 0x00	; 0
    155c:	80 81       	ld	r24, Z
    155e:	89 83       	std	Y+1, r24	; 0x01
    1560:	09 c0       	rjmp	.+18     	; 0x1574 <DIO_u8GetPortValue+0x7e>
				break;
			case Group_C:
				Local_returndata = DIO_PINC;
    1562:	e3 e3       	ldi	r30, 0x33	; 51
    1564:	f0 e0       	ldi	r31, 0x00	; 0
    1566:	80 81       	ld	r24, Z
    1568:	89 83       	std	Y+1, r24	; 0x01
    156a:	04 c0       	rjmp	.+8      	; 0x1574 <DIO_u8GetPortValue+0x7e>
				break;
			case Group_D:
				Local_returndata = DIO_PIND;
    156c:	e0 e3       	ldi	r30, 0x30	; 48
    156e:	f0 e0       	ldi	r31, 0x00	; 0
    1570:	80 81       	ld	r24, Z
    1572:	89 83       	std	Y+1, r24	; 0x01
				break;
		}
		return Local_returndata;
    1574:	99 81       	ldd	r25, Y+1	; 0x01
    1576:	9b 83       	std	Y+3, r25	; 0x03
    1578:	02 c0       	rjmp	.+4      	; 0x157e <DIO_u8GetPortValue+0x88>
	}
	else
	{
		return -1;
    157a:	2f ef       	ldi	r18, 0xFF	; 255
    157c:	2b 83       	std	Y+3, r18	; 0x03
    157e:	8b 81       	ldd	r24, Y+3	; 0x03
	}
}
    1580:	0f 90       	pop	r0
    1582:	0f 90       	pop	r0
    1584:	0f 90       	pop	r0
    1586:	0f 90       	pop	r0
    1588:	0f 90       	pop	r0
    158a:	cf 91       	pop	r28
    158c:	df 91       	pop	r29
    158e:	08 95       	ret

00001590 <DIO_VoidToggleBit>:
void DIO_VoidToggleBit(u8 Local_Groupname, u8 Local_PinNumber)
{
    1590:	df 93       	push	r29
    1592:	cf 93       	push	r28
    1594:	00 d0       	rcall	.+0      	; 0x1596 <DIO_VoidToggleBit+0x6>
    1596:	00 d0       	rcall	.+0      	; 0x1598 <DIO_VoidToggleBit+0x8>
    1598:	cd b7       	in	r28, 0x3d	; 61
    159a:	de b7       	in	r29, 0x3e	; 62
    159c:	89 83       	std	Y+1, r24	; 0x01
    159e:	6a 83       	std	Y+2, r22	; 0x02
	switch (Local_Groupname)
    15a0:	89 81       	ldd	r24, Y+1	; 0x01
    15a2:	28 2f       	mov	r18, r24
    15a4:	30 e0       	ldi	r19, 0x00	; 0
    15a6:	3c 83       	std	Y+4, r19	; 0x04
    15a8:	2b 83       	std	Y+3, r18	; 0x03
    15aa:	8b 81       	ldd	r24, Y+3	; 0x03
    15ac:	9c 81       	ldd	r25, Y+4	; 0x04
    15ae:	82 30       	cpi	r24, 0x02	; 2
    15b0:	91 05       	cpc	r25, r1
    15b2:	51 f1       	breq	.+84     	; 0x1608 <DIO_VoidToggleBit+0x78>
    15b4:	2b 81       	ldd	r18, Y+3	; 0x03
    15b6:	3c 81       	ldd	r19, Y+4	; 0x04
    15b8:	23 30       	cpi	r18, 0x03	; 3
    15ba:	31 05       	cpc	r19, r1
    15bc:	34 f4       	brge	.+12     	; 0x15ca <DIO_VoidToggleBit+0x3a>
    15be:	8b 81       	ldd	r24, Y+3	; 0x03
    15c0:	9c 81       	ldd	r25, Y+4	; 0x04
    15c2:	81 30       	cpi	r24, 0x01	; 1
    15c4:	91 05       	cpc	r25, r1
    15c6:	61 f0       	breq	.+24     	; 0x15e0 <DIO_VoidToggleBit+0x50>
    15c8:	5a c0       	rjmp	.+180    	; 0x167e <DIO_VoidToggleBit+0xee>
    15ca:	2b 81       	ldd	r18, Y+3	; 0x03
    15cc:	3c 81       	ldd	r19, Y+4	; 0x04
    15ce:	23 30       	cpi	r18, 0x03	; 3
    15d0:	31 05       	cpc	r19, r1
    15d2:	71 f1       	breq	.+92     	; 0x1630 <DIO_VoidToggleBit+0xa0>
    15d4:	8b 81       	ldd	r24, Y+3	; 0x03
    15d6:	9c 81       	ldd	r25, Y+4	; 0x04
    15d8:	84 30       	cpi	r24, 0x04	; 4
    15da:	91 05       	cpc	r25, r1
    15dc:	e9 f1       	breq	.+122    	; 0x1658 <DIO_VoidToggleBit+0xc8>
    15de:	4f c0       	rjmp	.+158    	; 0x167e <DIO_VoidToggleBit+0xee>
	{
		case Group_A:
			toggle_Bit(DIO_PORTA, Local_PinNumber);
    15e0:	ab e3       	ldi	r26, 0x3B	; 59
    15e2:	b0 e0       	ldi	r27, 0x00	; 0
    15e4:	eb e3       	ldi	r30, 0x3B	; 59
    15e6:	f0 e0       	ldi	r31, 0x00	; 0
    15e8:	80 81       	ld	r24, Z
    15ea:	48 2f       	mov	r20, r24
    15ec:	8a 81       	ldd	r24, Y+2	; 0x02
    15ee:	28 2f       	mov	r18, r24
    15f0:	30 e0       	ldi	r19, 0x00	; 0
    15f2:	81 e0       	ldi	r24, 0x01	; 1
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	02 2e       	mov	r0, r18
    15f8:	02 c0       	rjmp	.+4      	; 0x15fe <DIO_VoidToggleBit+0x6e>
    15fa:	88 0f       	add	r24, r24
    15fc:	99 1f       	adc	r25, r25
    15fe:	0a 94       	dec	r0
    1600:	e2 f7       	brpl	.-8      	; 0x15fa <DIO_VoidToggleBit+0x6a>
    1602:	84 27       	eor	r24, r20
    1604:	8c 93       	st	X, r24
    1606:	3b c0       	rjmp	.+118    	; 0x167e <DIO_VoidToggleBit+0xee>
			break;
		case Group_B:
			toggle_Bit(DIO_PORTB, Local_PinNumber);
    1608:	a8 e3       	ldi	r26, 0x38	; 56
    160a:	b0 e0       	ldi	r27, 0x00	; 0
    160c:	e8 e3       	ldi	r30, 0x38	; 56
    160e:	f0 e0       	ldi	r31, 0x00	; 0
    1610:	80 81       	ld	r24, Z
    1612:	48 2f       	mov	r20, r24
    1614:	8a 81       	ldd	r24, Y+2	; 0x02
    1616:	28 2f       	mov	r18, r24
    1618:	30 e0       	ldi	r19, 0x00	; 0
    161a:	81 e0       	ldi	r24, 0x01	; 1
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	02 2e       	mov	r0, r18
    1620:	02 c0       	rjmp	.+4      	; 0x1626 <DIO_VoidToggleBit+0x96>
    1622:	88 0f       	add	r24, r24
    1624:	99 1f       	adc	r25, r25
    1626:	0a 94       	dec	r0
    1628:	e2 f7       	brpl	.-8      	; 0x1622 <DIO_VoidToggleBit+0x92>
    162a:	84 27       	eor	r24, r20
    162c:	8c 93       	st	X, r24
    162e:	27 c0       	rjmp	.+78     	; 0x167e <DIO_VoidToggleBit+0xee>
			break;
		case Group_C:
			toggle_Bit(DIO_PORTC, Local_PinNumber);
    1630:	a5 e3       	ldi	r26, 0x35	; 53
    1632:	b0 e0       	ldi	r27, 0x00	; 0
    1634:	e5 e3       	ldi	r30, 0x35	; 53
    1636:	f0 e0       	ldi	r31, 0x00	; 0
    1638:	80 81       	ld	r24, Z
    163a:	48 2f       	mov	r20, r24
    163c:	8a 81       	ldd	r24, Y+2	; 0x02
    163e:	28 2f       	mov	r18, r24
    1640:	30 e0       	ldi	r19, 0x00	; 0
    1642:	81 e0       	ldi	r24, 0x01	; 1
    1644:	90 e0       	ldi	r25, 0x00	; 0
    1646:	02 2e       	mov	r0, r18
    1648:	02 c0       	rjmp	.+4      	; 0x164e <DIO_VoidToggleBit+0xbe>
    164a:	88 0f       	add	r24, r24
    164c:	99 1f       	adc	r25, r25
    164e:	0a 94       	dec	r0
    1650:	e2 f7       	brpl	.-8      	; 0x164a <DIO_VoidToggleBit+0xba>
    1652:	84 27       	eor	r24, r20
    1654:	8c 93       	st	X, r24
    1656:	13 c0       	rjmp	.+38     	; 0x167e <DIO_VoidToggleBit+0xee>
			break;
		case Group_D:
			toggle_Bit(DIO_PORTD, Local_PinNumber);
    1658:	a2 e3       	ldi	r26, 0x32	; 50
    165a:	b0 e0       	ldi	r27, 0x00	; 0
    165c:	e2 e3       	ldi	r30, 0x32	; 50
    165e:	f0 e0       	ldi	r31, 0x00	; 0
    1660:	80 81       	ld	r24, Z
    1662:	48 2f       	mov	r20, r24
    1664:	8a 81       	ldd	r24, Y+2	; 0x02
    1666:	28 2f       	mov	r18, r24
    1668:	30 e0       	ldi	r19, 0x00	; 0
    166a:	81 e0       	ldi	r24, 0x01	; 1
    166c:	90 e0       	ldi	r25, 0x00	; 0
    166e:	02 2e       	mov	r0, r18
    1670:	02 c0       	rjmp	.+4      	; 0x1676 <DIO_VoidToggleBit+0xe6>
    1672:	88 0f       	add	r24, r24
    1674:	99 1f       	adc	r25, r25
    1676:	0a 94       	dec	r0
    1678:	e2 f7       	brpl	.-8      	; 0x1672 <DIO_VoidToggleBit+0xe2>
    167a:	84 27       	eor	r24, r20
    167c:	8c 93       	st	X, r24
			break;
	}
}
    167e:	0f 90       	pop	r0
    1680:	0f 90       	pop	r0
    1682:	0f 90       	pop	r0
    1684:	0f 90       	pop	r0
    1686:	cf 91       	pop	r28
    1688:	df 91       	pop	r29
    168a:	08 95       	ret

0000168c <DIO_VoidTogglePORT>:
void DIO_VoidTogglePORT(u8 Local_Groupname)
{
    168c:	df 93       	push	r29
    168e:	cf 93       	push	r28
    1690:	00 d0       	rcall	.+0      	; 0x1692 <DIO_VoidTogglePORT+0x6>
    1692:	0f 92       	push	r0
    1694:	cd b7       	in	r28, 0x3d	; 61
    1696:	de b7       	in	r29, 0x3e	; 62
    1698:	89 83       	std	Y+1, r24	; 0x01

	switch (Local_Groupname)
    169a:	89 81       	ldd	r24, Y+1	; 0x01
    169c:	28 2f       	mov	r18, r24
    169e:	30 e0       	ldi	r19, 0x00	; 0
    16a0:	3b 83       	std	Y+3, r19	; 0x03
    16a2:	2a 83       	std	Y+2, r18	; 0x02
    16a4:	8a 81       	ldd	r24, Y+2	; 0x02
    16a6:	9b 81       	ldd	r25, Y+3	; 0x03
    16a8:	82 30       	cpi	r24, 0x02	; 2
    16aa:	91 05       	cpc	r25, r1
    16ac:	f1 f0       	breq	.+60     	; 0x16ea <DIO_VoidTogglePORT+0x5e>
    16ae:	2a 81       	ldd	r18, Y+2	; 0x02
    16b0:	3b 81       	ldd	r19, Y+3	; 0x03
    16b2:	23 30       	cpi	r18, 0x03	; 3
    16b4:	31 05       	cpc	r19, r1
    16b6:	34 f4       	brge	.+12     	; 0x16c4 <DIO_VoidTogglePORT+0x38>
    16b8:	8a 81       	ldd	r24, Y+2	; 0x02
    16ba:	9b 81       	ldd	r25, Y+3	; 0x03
    16bc:	81 30       	cpi	r24, 0x01	; 1
    16be:	91 05       	cpc	r25, r1
    16c0:	61 f0       	breq	.+24     	; 0x16da <DIO_VoidTogglePORT+0x4e>
    16c2:	2a c0       	rjmp	.+84     	; 0x1718 <DIO_VoidTogglePORT+0x8c>
    16c4:	2a 81       	ldd	r18, Y+2	; 0x02
    16c6:	3b 81       	ldd	r19, Y+3	; 0x03
    16c8:	23 30       	cpi	r18, 0x03	; 3
    16ca:	31 05       	cpc	r19, r1
    16cc:	b1 f0       	breq	.+44     	; 0x16fa <DIO_VoidTogglePORT+0x6e>
    16ce:	8a 81       	ldd	r24, Y+2	; 0x02
    16d0:	9b 81       	ldd	r25, Y+3	; 0x03
    16d2:	84 30       	cpi	r24, 0x04	; 4
    16d4:	91 05       	cpc	r25, r1
    16d6:	c9 f0       	breq	.+50     	; 0x170a <DIO_VoidTogglePORT+0x7e>
    16d8:	1f c0       	rjmp	.+62     	; 0x1718 <DIO_VoidTogglePORT+0x8c>
	{
		case Group_A:
			DIO_PORTA = ~DIO_PORTA;
    16da:	ab e3       	ldi	r26, 0x3B	; 59
    16dc:	b0 e0       	ldi	r27, 0x00	; 0
    16de:	eb e3       	ldi	r30, 0x3B	; 59
    16e0:	f0 e0       	ldi	r31, 0x00	; 0
    16e2:	80 81       	ld	r24, Z
    16e4:	80 95       	com	r24
    16e6:	8c 93       	st	X, r24
    16e8:	17 c0       	rjmp	.+46     	; 0x1718 <DIO_VoidTogglePORT+0x8c>
			break;
		case Group_B:
			DIO_PORTB = ~DIO_PORTB;
    16ea:	a8 e3       	ldi	r26, 0x38	; 56
    16ec:	b0 e0       	ldi	r27, 0x00	; 0
    16ee:	e8 e3       	ldi	r30, 0x38	; 56
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	80 81       	ld	r24, Z
    16f4:	80 95       	com	r24
    16f6:	8c 93       	st	X, r24
    16f8:	0f c0       	rjmp	.+30     	; 0x1718 <DIO_VoidTogglePORT+0x8c>
			break;
		case Group_C:
			DIO_PORTC = ~DIO_PORTC;
    16fa:	a5 e3       	ldi	r26, 0x35	; 53
    16fc:	b0 e0       	ldi	r27, 0x00	; 0
    16fe:	e5 e3       	ldi	r30, 0x35	; 53
    1700:	f0 e0       	ldi	r31, 0x00	; 0
    1702:	80 81       	ld	r24, Z
    1704:	80 95       	com	r24
    1706:	8c 93       	st	X, r24
    1708:	07 c0       	rjmp	.+14     	; 0x1718 <DIO_VoidTogglePORT+0x8c>
			break;
		case Group_D:
			DIO_PORTD = ~DIO_PORTD;
    170a:	a2 e3       	ldi	r26, 0x32	; 50
    170c:	b0 e0       	ldi	r27, 0x00	; 0
    170e:	e2 e3       	ldi	r30, 0x32	; 50
    1710:	f0 e0       	ldi	r31, 0x00	; 0
    1712:	80 81       	ld	r24, Z
    1714:	80 95       	com	r24
    1716:	8c 93       	st	X, r24
			break;
	}

}
    1718:	0f 90       	pop	r0
    171a:	0f 90       	pop	r0
    171c:	0f 90       	pop	r0
    171e:	cf 91       	pop	r28
    1720:	df 91       	pop	r29
    1722:	08 95       	ret

00001724 <LCD_VoidSendCommand>:

#include <stdio.h>
#include <util/delay.h>

void LCD_VoidSendCommand(u8 Local_command)
{
    1724:	df 93       	push	r29
    1726:	cf 93       	push	r28
    1728:	0f 92       	push	r0
    172a:	cd b7       	in	r28, 0x3d	; 61
    172c:	de b7       	in	r29, 0x3e	; 62
    172e:	89 83       	std	Y+1, r24	; 0x01
	/*set RS pin to command --> 0*/
	DIO_VoidSetPinValue(LCD_Control_Group,LCD_RS_Pin,Low);
    1730:	84 e0       	ldi	r24, 0x04	; 4
    1732:	65 e0       	ldi	r22, 0x05	; 5
    1734:	40 e0       	ldi	r20, 0x00	; 0
    1736:	0e 94 65 08 	call	0x10ca	; 0x10ca <DIO_VoidSetPinValue>
	/*set RW pin to write --> 0*/
	DIO_VoidSetPinValue(LCD_Control_Group,LCD_RW_Pin,Low);
    173a:	84 e0       	ldi	r24, 0x04	; 4
    173c:	66 e0       	ldi	r22, 0x06	; 6
    173e:	40 e0       	ldi	r20, 0x00	; 0
    1740:	0e 94 65 08 	call	0x10ca	; 0x10ca <DIO_VoidSetPinValue>
	/*set Enable pin to High*/
	DIO_VoidSetPinValue(LCD_Control_Group,LCD_E_Pin,High);
    1744:	84 e0       	ldi	r24, 0x04	; 4
    1746:	67 e0       	ldi	r22, 0x07	; 7
    1748:	41 e0       	ldi	r20, 0x01	; 1
    174a:	0e 94 65 08 	call	0x10ca	; 0x10ca <DIO_VoidSetPinValue>
	/*send the command line*/
	DIO_VoidSetPortValue(LCD_DataGroup,Local_command);
    174e:	82 e0       	ldi	r24, 0x02	; 2
    1750:	69 81       	ldd	r22, Y+1	; 0x01
    1752:	0e 94 39 0a 	call	0x1472	; 0x1472 <DIO_VoidSetPortValue>
	/*set Enable pin to Low*/
	DIO_VoidSetPinValue(LCD_Control_Group,LCD_E_Pin,Low);
    1756:	84 e0       	ldi	r24, 0x04	; 4
    1758:	67 e0       	ldi	r22, 0x07	; 7
    175a:	40 e0       	ldi	r20, 0x00	; 0
    175c:	0e 94 65 08 	call	0x10ca	; 0x10ca <DIO_VoidSetPinValue>
}
    1760:	0f 90       	pop	r0
    1762:	cf 91       	pop	r28
    1764:	df 91       	pop	r29
    1766:	08 95       	ret

00001768 <LCD_VoidSendChar>:
void LCD_VoidSendChar(u8 Local_char)
{
    1768:	df 93       	push	r29
    176a:	cf 93       	push	r28
    176c:	0f 92       	push	r0
    176e:	cd b7       	in	r28, 0x3d	; 61
    1770:	de b7       	in	r29, 0x3e	; 62
    1772:	89 83       	std	Y+1, r24	; 0x01
	/*set RS pin to Data --> 1*/
	DIO_VoidSetPinValue(LCD_Control_Group,LCD_RS_Pin,High);
    1774:	84 e0       	ldi	r24, 0x04	; 4
    1776:	65 e0       	ldi	r22, 0x05	; 5
    1778:	41 e0       	ldi	r20, 0x01	; 1
    177a:	0e 94 65 08 	call	0x10ca	; 0x10ca <DIO_VoidSetPinValue>
	/*set RW pin to write --> 0*/
	DIO_VoidSetPinValue(LCD_Control_Group,LCD_RW_Pin,Low);
    177e:	84 e0       	ldi	r24, 0x04	; 4
    1780:	66 e0       	ldi	r22, 0x06	; 6
    1782:	40 e0       	ldi	r20, 0x00	; 0
    1784:	0e 94 65 08 	call	0x10ca	; 0x10ca <DIO_VoidSetPinValue>
	/*set Enable pin to Low*/
	DIO_VoidSetPinValue(LCD_Control_Group,LCD_E_Pin,High);
    1788:	84 e0       	ldi	r24, 0x04	; 4
    178a:	67 e0       	ldi	r22, 0x07	; 7
    178c:	41 e0       	ldi	r20, 0x01	; 1
    178e:	0e 94 65 08 	call	0x10ca	; 0x10ca <DIO_VoidSetPinValue>
	/*send the char*/
	DIO_VoidSetPortValue(LCD_DataGroup,Local_char);
    1792:	82 e0       	ldi	r24, 0x02	; 2
    1794:	69 81       	ldd	r22, Y+1	; 0x01
    1796:	0e 94 39 0a 	call	0x1472	; 0x1472 <DIO_VoidSetPortValue>
	/*set Enable pin to Low*/
	DIO_VoidSetPinValue(LCD_Control_Group,LCD_E_Pin,Low);
    179a:	84 e0       	ldi	r24, 0x04	; 4
    179c:	67 e0       	ldi	r22, 0x07	; 7
    179e:	40 e0       	ldi	r20, 0x00	; 0
    17a0:	0e 94 65 08 	call	0x10ca	; 0x10ca <DIO_VoidSetPinValue>
}
    17a4:	0f 90       	pop	r0
    17a6:	cf 91       	pop	r28
    17a8:	df 91       	pop	r29
    17aa:	08 95       	ret

000017ac <LCD_Void8BitInit>:
void LCD_Void8BitInit(void)
{
    17ac:	0f 93       	push	r16
    17ae:	1f 93       	push	r17
    17b0:	df 93       	push	r29
    17b2:	cf 93       	push	r28
    17b4:	cd b7       	in	r28, 0x3d	; 61
    17b6:	de b7       	in	r29, 0x3e	; 62
    17b8:	c6 54       	subi	r28, 0x46	; 70
    17ba:	d0 40       	sbci	r29, 0x00	; 0
    17bc:	0f b6       	in	r0, 0x3f	; 63
    17be:	f8 94       	cli
    17c0:	de bf       	out	0x3e, r29	; 62
    17c2:	0f be       	out	0x3f, r0	; 63
    17c4:	cd bf       	out	0x3d, r28	; 61
	/*Select The Directions*/
	DIO_VoidSetPortDir(LCD_DataGroup,Max_Output);
    17c6:	82 e0       	ldi	r24, 0x02	; 2
    17c8:	6f ef       	ldi	r22, 0xFF	; 255
    17ca:	0e 94 f7 09 	call	0x13ee	; 0x13ee <DIO_VoidSetPortDir>
	DIO_VoidSetPinDir(LCD_Control_Group, LCD_RS_Pin, Output);
    17ce:	84 e0       	ldi	r24, 0x04	; 4
    17d0:	65 e0       	ldi	r22, 0x05	; 5
    17d2:	41 e0       	ldi	r20, 0x01	; 1
    17d4:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <DIO_VoidSetPinDir>
	DIO_VoidSetPinDir(LCD_Control_Group, LCD_RW_Pin, Output);
    17d8:	84 e0       	ldi	r24, 0x04	; 4
    17da:	66 e0       	ldi	r22, 0x06	; 6
    17dc:	41 e0       	ldi	r20, 0x01	; 1
    17de:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <DIO_VoidSetPinDir>
	DIO_VoidSetPinDir(LCD_Control_Group, LCD_E_Pin, Output);
    17e2:	84 e0       	ldi	r24, 0x04	; 4
    17e4:	67 e0       	ldi	r22, 0x07	; 7
    17e6:	41 e0       	ldi	r20, 0x01	; 1
    17e8:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <DIO_VoidSetPinDir>
    17ec:	fe 01       	movw	r30, r28
    17ee:	ed 5b       	subi	r30, 0xBD	; 189
    17f0:	ff 4f       	sbci	r31, 0xFF	; 255
    17f2:	80 e0       	ldi	r24, 0x00	; 0
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	ac e0       	ldi	r26, 0x0C	; 12
    17f8:	b2 e4       	ldi	r27, 0x42	; 66
    17fa:	80 83       	st	Z, r24
    17fc:	91 83       	std	Z+1, r25	; 0x01
    17fe:	a2 83       	std	Z+2, r26	; 0x02
    1800:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1802:	8e 01       	movw	r16, r28
    1804:	01 5c       	subi	r16, 0xC1	; 193
    1806:	1f 4f       	sbci	r17, 0xFF	; 255
    1808:	fe 01       	movw	r30, r28
    180a:	ed 5b       	subi	r30, 0xBD	; 189
    180c:	ff 4f       	sbci	r31, 0xFF	; 255
    180e:	60 81       	ld	r22, Z
    1810:	71 81       	ldd	r23, Z+1	; 0x01
    1812:	82 81       	ldd	r24, Z+2	; 0x02
    1814:	93 81       	ldd	r25, Z+3	; 0x03
    1816:	20 e0       	ldi	r18, 0x00	; 0
    1818:	30 e0       	ldi	r19, 0x00	; 0
    181a:	4a ef       	ldi	r20, 0xFA	; 250
    181c:	54 e4       	ldi	r21, 0x44	; 68
    181e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1822:	dc 01       	movw	r26, r24
    1824:	cb 01       	movw	r24, r22
    1826:	f8 01       	movw	r30, r16
    1828:	80 83       	st	Z, r24
    182a:	91 83       	std	Z+1, r25	; 0x01
    182c:	a2 83       	std	Z+2, r26	; 0x02
    182e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1830:	fe 01       	movw	r30, r28
    1832:	ff 96       	adiw	r30, 0x3f	; 63
    1834:	60 81       	ld	r22, Z
    1836:	71 81       	ldd	r23, Z+1	; 0x01
    1838:	82 81       	ldd	r24, Z+2	; 0x02
    183a:	93 81       	ldd	r25, Z+3	; 0x03
    183c:	20 e0       	ldi	r18, 0x00	; 0
    183e:	30 e0       	ldi	r19, 0x00	; 0
    1840:	40 e8       	ldi	r20, 0x80	; 128
    1842:	5f e3       	ldi	r21, 0x3F	; 63
    1844:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1848:	88 23       	and	r24, r24
    184a:	2c f4       	brge	.+10     	; 0x1856 <LCD_Void8BitInit+0xaa>
		__ticks = 1;
    184c:	81 e0       	ldi	r24, 0x01	; 1
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	9e af       	std	Y+62, r25	; 0x3e
    1852:	8d af       	std	Y+61, r24	; 0x3d
    1854:	46 c0       	rjmp	.+140    	; 0x18e2 <LCD_Void8BitInit+0x136>
	else if (__tmp > 65535)
    1856:	fe 01       	movw	r30, r28
    1858:	ff 96       	adiw	r30, 0x3f	; 63
    185a:	60 81       	ld	r22, Z
    185c:	71 81       	ldd	r23, Z+1	; 0x01
    185e:	82 81       	ldd	r24, Z+2	; 0x02
    1860:	93 81       	ldd	r25, Z+3	; 0x03
    1862:	20 e0       	ldi	r18, 0x00	; 0
    1864:	3f ef       	ldi	r19, 0xFF	; 255
    1866:	4f e7       	ldi	r20, 0x7F	; 127
    1868:	57 e4       	ldi	r21, 0x47	; 71
    186a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    186e:	18 16       	cp	r1, r24
    1870:	64 f5       	brge	.+88     	; 0x18ca <LCD_Void8BitInit+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1872:	fe 01       	movw	r30, r28
    1874:	ed 5b       	subi	r30, 0xBD	; 189
    1876:	ff 4f       	sbci	r31, 0xFF	; 255
    1878:	60 81       	ld	r22, Z
    187a:	71 81       	ldd	r23, Z+1	; 0x01
    187c:	82 81       	ldd	r24, Z+2	; 0x02
    187e:	93 81       	ldd	r25, Z+3	; 0x03
    1880:	20 e0       	ldi	r18, 0x00	; 0
    1882:	30 e0       	ldi	r19, 0x00	; 0
    1884:	40 e2       	ldi	r20, 0x20	; 32
    1886:	51 e4       	ldi	r21, 0x41	; 65
    1888:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    188c:	dc 01       	movw	r26, r24
    188e:	cb 01       	movw	r24, r22
    1890:	bc 01       	movw	r22, r24
    1892:	cd 01       	movw	r24, r26
    1894:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1898:	dc 01       	movw	r26, r24
    189a:	cb 01       	movw	r24, r22
    189c:	9e af       	std	Y+62, r25	; 0x3e
    189e:	8d af       	std	Y+61, r24	; 0x3d
    18a0:	0f c0       	rjmp	.+30     	; 0x18c0 <LCD_Void8BitInit+0x114>
    18a2:	88 ec       	ldi	r24, 0xC8	; 200
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	9c af       	std	Y+60, r25	; 0x3c
    18a8:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    18aa:	8b ad       	ldd	r24, Y+59	; 0x3b
    18ac:	9c ad       	ldd	r25, Y+60	; 0x3c
    18ae:	01 97       	sbiw	r24, 0x01	; 1
    18b0:	f1 f7       	brne	.-4      	; 0x18ae <LCD_Void8BitInit+0x102>
    18b2:	9c af       	std	Y+60, r25	; 0x3c
    18b4:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18b6:	8d ad       	ldd	r24, Y+61	; 0x3d
    18b8:	9e ad       	ldd	r25, Y+62	; 0x3e
    18ba:	01 97       	sbiw	r24, 0x01	; 1
    18bc:	9e af       	std	Y+62, r25	; 0x3e
    18be:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18c0:	8d ad       	ldd	r24, Y+61	; 0x3d
    18c2:	9e ad       	ldd	r25, Y+62	; 0x3e
    18c4:	00 97       	sbiw	r24, 0x00	; 0
    18c6:	69 f7       	brne	.-38     	; 0x18a2 <LCD_Void8BitInit+0xf6>
    18c8:	16 c0       	rjmp	.+44     	; 0x18f6 <LCD_Void8BitInit+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18ca:	fe 01       	movw	r30, r28
    18cc:	ff 96       	adiw	r30, 0x3f	; 63
    18ce:	60 81       	ld	r22, Z
    18d0:	71 81       	ldd	r23, Z+1	; 0x01
    18d2:	82 81       	ldd	r24, Z+2	; 0x02
    18d4:	93 81       	ldd	r25, Z+3	; 0x03
    18d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18da:	dc 01       	movw	r26, r24
    18dc:	cb 01       	movw	r24, r22
    18de:	9e af       	std	Y+62, r25	; 0x3e
    18e0:	8d af       	std	Y+61, r24	; 0x3d
    18e2:	8d ad       	ldd	r24, Y+61	; 0x3d
    18e4:	9e ad       	ldd	r25, Y+62	; 0x3e
    18e6:	9a af       	std	Y+58, r25	; 0x3a
    18e8:	89 af       	std	Y+57, r24	; 0x39
    18ea:	89 ad       	ldd	r24, Y+57	; 0x39
    18ec:	9a ad       	ldd	r25, Y+58	; 0x3a
    18ee:	01 97       	sbiw	r24, 0x01	; 1
    18f0:	f1 f7       	brne	.-4      	; 0x18ee <LCD_Void8BitInit+0x142>
    18f2:	9a af       	std	Y+58, r25	; 0x3a
    18f4:	89 af       	std	Y+57, r24	; 0x39

	/*wait for more than 30ms after power up*/
	_delay_ms(35);
	/*function set*/
	LCD_VoidSendCommand(LCD_Set8Bit2Line5x8);
    18f6:	88 e3       	ldi	r24, 0x38	; 56
    18f8:	0e 94 92 0b 	call	0x1724	; 0x1724 <LCD_VoidSendCommand>
    18fc:	80 e0       	ldi	r24, 0x00	; 0
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	a0 e8       	ldi	r26, 0x80	; 128
    1902:	bf e3       	ldi	r27, 0x3F	; 63
    1904:	8d ab       	std	Y+53, r24	; 0x35
    1906:	9e ab       	std	Y+54, r25	; 0x36
    1908:	af ab       	std	Y+55, r26	; 0x37
    190a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    190c:	6d a9       	ldd	r22, Y+53	; 0x35
    190e:	7e a9       	ldd	r23, Y+54	; 0x36
    1910:	8f a9       	ldd	r24, Y+55	; 0x37
    1912:	98 ad       	ldd	r25, Y+56	; 0x38
    1914:	20 e0       	ldi	r18, 0x00	; 0
    1916:	30 e0       	ldi	r19, 0x00	; 0
    1918:	4a ef       	ldi	r20, 0xFA	; 250
    191a:	54 e4       	ldi	r21, 0x44	; 68
    191c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1920:	dc 01       	movw	r26, r24
    1922:	cb 01       	movw	r24, r22
    1924:	89 ab       	std	Y+49, r24	; 0x31
    1926:	9a ab       	std	Y+50, r25	; 0x32
    1928:	ab ab       	std	Y+51, r26	; 0x33
    192a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    192c:	69 a9       	ldd	r22, Y+49	; 0x31
    192e:	7a a9       	ldd	r23, Y+50	; 0x32
    1930:	8b a9       	ldd	r24, Y+51	; 0x33
    1932:	9c a9       	ldd	r25, Y+52	; 0x34
    1934:	20 e0       	ldi	r18, 0x00	; 0
    1936:	30 e0       	ldi	r19, 0x00	; 0
    1938:	40 e8       	ldi	r20, 0x80	; 128
    193a:	5f e3       	ldi	r21, 0x3F	; 63
    193c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1940:	88 23       	and	r24, r24
    1942:	2c f4       	brge	.+10     	; 0x194e <LCD_Void8BitInit+0x1a2>
		__ticks = 1;
    1944:	81 e0       	ldi	r24, 0x01	; 1
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	98 ab       	std	Y+48, r25	; 0x30
    194a:	8f a7       	std	Y+47, r24	; 0x2f
    194c:	3f c0       	rjmp	.+126    	; 0x19cc <LCD_Void8BitInit+0x220>
	else if (__tmp > 65535)
    194e:	69 a9       	ldd	r22, Y+49	; 0x31
    1950:	7a a9       	ldd	r23, Y+50	; 0x32
    1952:	8b a9       	ldd	r24, Y+51	; 0x33
    1954:	9c a9       	ldd	r25, Y+52	; 0x34
    1956:	20 e0       	ldi	r18, 0x00	; 0
    1958:	3f ef       	ldi	r19, 0xFF	; 255
    195a:	4f e7       	ldi	r20, 0x7F	; 127
    195c:	57 e4       	ldi	r21, 0x47	; 71
    195e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1962:	18 16       	cp	r1, r24
    1964:	4c f5       	brge	.+82     	; 0x19b8 <LCD_Void8BitInit+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1966:	6d a9       	ldd	r22, Y+53	; 0x35
    1968:	7e a9       	ldd	r23, Y+54	; 0x36
    196a:	8f a9       	ldd	r24, Y+55	; 0x37
    196c:	98 ad       	ldd	r25, Y+56	; 0x38
    196e:	20 e0       	ldi	r18, 0x00	; 0
    1970:	30 e0       	ldi	r19, 0x00	; 0
    1972:	40 e2       	ldi	r20, 0x20	; 32
    1974:	51 e4       	ldi	r21, 0x41	; 65
    1976:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    197a:	dc 01       	movw	r26, r24
    197c:	cb 01       	movw	r24, r22
    197e:	bc 01       	movw	r22, r24
    1980:	cd 01       	movw	r24, r26
    1982:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1986:	dc 01       	movw	r26, r24
    1988:	cb 01       	movw	r24, r22
    198a:	98 ab       	std	Y+48, r25	; 0x30
    198c:	8f a7       	std	Y+47, r24	; 0x2f
    198e:	0f c0       	rjmp	.+30     	; 0x19ae <LCD_Void8BitInit+0x202>
    1990:	88 ec       	ldi	r24, 0xC8	; 200
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	9e a7       	std	Y+46, r25	; 0x2e
    1996:	8d a7       	std	Y+45, r24	; 0x2d
    1998:	8d a5       	ldd	r24, Y+45	; 0x2d
    199a:	9e a5       	ldd	r25, Y+46	; 0x2e
    199c:	01 97       	sbiw	r24, 0x01	; 1
    199e:	f1 f7       	brne	.-4      	; 0x199c <LCD_Void8BitInit+0x1f0>
    19a0:	9e a7       	std	Y+46, r25	; 0x2e
    19a2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19a4:	8f a5       	ldd	r24, Y+47	; 0x2f
    19a6:	98 a9       	ldd	r25, Y+48	; 0x30
    19a8:	01 97       	sbiw	r24, 0x01	; 1
    19aa:	98 ab       	std	Y+48, r25	; 0x30
    19ac:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19ae:	8f a5       	ldd	r24, Y+47	; 0x2f
    19b0:	98 a9       	ldd	r25, Y+48	; 0x30
    19b2:	00 97       	sbiw	r24, 0x00	; 0
    19b4:	69 f7       	brne	.-38     	; 0x1990 <LCD_Void8BitInit+0x1e4>
    19b6:	14 c0       	rjmp	.+40     	; 0x19e0 <LCD_Void8BitInit+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19b8:	69 a9       	ldd	r22, Y+49	; 0x31
    19ba:	7a a9       	ldd	r23, Y+50	; 0x32
    19bc:	8b a9       	ldd	r24, Y+51	; 0x33
    19be:	9c a9       	ldd	r25, Y+52	; 0x34
    19c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19c4:	dc 01       	movw	r26, r24
    19c6:	cb 01       	movw	r24, r22
    19c8:	98 ab       	std	Y+48, r25	; 0x30
    19ca:	8f a7       	std	Y+47, r24	; 0x2f
    19cc:	8f a5       	ldd	r24, Y+47	; 0x2f
    19ce:	98 a9       	ldd	r25, Y+48	; 0x30
    19d0:	9c a7       	std	Y+44, r25	; 0x2c
    19d2:	8b a7       	std	Y+43, r24	; 0x2b
    19d4:	8b a5       	ldd	r24, Y+43	; 0x2b
    19d6:	9c a5       	ldd	r25, Y+44	; 0x2c
    19d8:	01 97       	sbiw	r24, 0x01	; 1
    19da:	f1 f7       	brne	.-4      	; 0x19d8 <LCD_Void8BitInit+0x22c>
    19dc:	9c a7       	std	Y+44, r25	; 0x2c
    19de:	8b a7       	std	Y+43, r24	; 0x2b
	/*wait for more than 39us*/
	_delay_ms(1);
	/*Display On off control*/
	LCD_VoidSendCommand(LCD_CursorON);
    19e0:	8e e0       	ldi	r24, 0x0E	; 14
    19e2:	0e 94 92 0b 	call	0x1724	; 0x1724 <LCD_VoidSendCommand>
    19e6:	80 e0       	ldi	r24, 0x00	; 0
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	a0 e8       	ldi	r26, 0x80	; 128
    19ec:	bf e3       	ldi	r27, 0x3F	; 63
    19ee:	8f a3       	std	Y+39, r24	; 0x27
    19f0:	98 a7       	std	Y+40, r25	; 0x28
    19f2:	a9 a7       	std	Y+41, r26	; 0x29
    19f4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19f6:	6f a1       	ldd	r22, Y+39	; 0x27
    19f8:	78 a5       	ldd	r23, Y+40	; 0x28
    19fa:	89 a5       	ldd	r24, Y+41	; 0x29
    19fc:	9a a5       	ldd	r25, Y+42	; 0x2a
    19fe:	20 e0       	ldi	r18, 0x00	; 0
    1a00:	30 e0       	ldi	r19, 0x00	; 0
    1a02:	4a ef       	ldi	r20, 0xFA	; 250
    1a04:	54 e4       	ldi	r21, 0x44	; 68
    1a06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a0a:	dc 01       	movw	r26, r24
    1a0c:	cb 01       	movw	r24, r22
    1a0e:	8b a3       	std	Y+35, r24	; 0x23
    1a10:	9c a3       	std	Y+36, r25	; 0x24
    1a12:	ad a3       	std	Y+37, r26	; 0x25
    1a14:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1a16:	6b a1       	ldd	r22, Y+35	; 0x23
    1a18:	7c a1       	ldd	r23, Y+36	; 0x24
    1a1a:	8d a1       	ldd	r24, Y+37	; 0x25
    1a1c:	9e a1       	ldd	r25, Y+38	; 0x26
    1a1e:	20 e0       	ldi	r18, 0x00	; 0
    1a20:	30 e0       	ldi	r19, 0x00	; 0
    1a22:	40 e8       	ldi	r20, 0x80	; 128
    1a24:	5f e3       	ldi	r21, 0x3F	; 63
    1a26:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a2a:	88 23       	and	r24, r24
    1a2c:	2c f4       	brge	.+10     	; 0x1a38 <LCD_Void8BitInit+0x28c>
		__ticks = 1;
    1a2e:	81 e0       	ldi	r24, 0x01	; 1
    1a30:	90 e0       	ldi	r25, 0x00	; 0
    1a32:	9a a3       	std	Y+34, r25	; 0x22
    1a34:	89 a3       	std	Y+33, r24	; 0x21
    1a36:	3f c0       	rjmp	.+126    	; 0x1ab6 <LCD_Void8BitInit+0x30a>
	else if (__tmp > 65535)
    1a38:	6b a1       	ldd	r22, Y+35	; 0x23
    1a3a:	7c a1       	ldd	r23, Y+36	; 0x24
    1a3c:	8d a1       	ldd	r24, Y+37	; 0x25
    1a3e:	9e a1       	ldd	r25, Y+38	; 0x26
    1a40:	20 e0       	ldi	r18, 0x00	; 0
    1a42:	3f ef       	ldi	r19, 0xFF	; 255
    1a44:	4f e7       	ldi	r20, 0x7F	; 127
    1a46:	57 e4       	ldi	r21, 0x47	; 71
    1a48:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a4c:	18 16       	cp	r1, r24
    1a4e:	4c f5       	brge	.+82     	; 0x1aa2 <LCD_Void8BitInit+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a50:	6f a1       	ldd	r22, Y+39	; 0x27
    1a52:	78 a5       	ldd	r23, Y+40	; 0x28
    1a54:	89 a5       	ldd	r24, Y+41	; 0x29
    1a56:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a58:	20 e0       	ldi	r18, 0x00	; 0
    1a5a:	30 e0       	ldi	r19, 0x00	; 0
    1a5c:	40 e2       	ldi	r20, 0x20	; 32
    1a5e:	51 e4       	ldi	r21, 0x41	; 65
    1a60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a64:	dc 01       	movw	r26, r24
    1a66:	cb 01       	movw	r24, r22
    1a68:	bc 01       	movw	r22, r24
    1a6a:	cd 01       	movw	r24, r26
    1a6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a70:	dc 01       	movw	r26, r24
    1a72:	cb 01       	movw	r24, r22
    1a74:	9a a3       	std	Y+34, r25	; 0x22
    1a76:	89 a3       	std	Y+33, r24	; 0x21
    1a78:	0f c0       	rjmp	.+30     	; 0x1a98 <LCD_Void8BitInit+0x2ec>
    1a7a:	88 ec       	ldi	r24, 0xC8	; 200
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	98 a3       	std	Y+32, r25	; 0x20
    1a80:	8f 8f       	std	Y+31, r24	; 0x1f
    1a82:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a84:	98 a1       	ldd	r25, Y+32	; 0x20
    1a86:	01 97       	sbiw	r24, 0x01	; 1
    1a88:	f1 f7       	brne	.-4      	; 0x1a86 <LCD_Void8BitInit+0x2da>
    1a8a:	98 a3       	std	Y+32, r25	; 0x20
    1a8c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a8e:	89 a1       	ldd	r24, Y+33	; 0x21
    1a90:	9a a1       	ldd	r25, Y+34	; 0x22
    1a92:	01 97       	sbiw	r24, 0x01	; 1
    1a94:	9a a3       	std	Y+34, r25	; 0x22
    1a96:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a98:	89 a1       	ldd	r24, Y+33	; 0x21
    1a9a:	9a a1       	ldd	r25, Y+34	; 0x22
    1a9c:	00 97       	sbiw	r24, 0x00	; 0
    1a9e:	69 f7       	brne	.-38     	; 0x1a7a <LCD_Void8BitInit+0x2ce>
    1aa0:	14 c0       	rjmp	.+40     	; 0x1aca <LCD_Void8BitInit+0x31e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aa2:	6b a1       	ldd	r22, Y+35	; 0x23
    1aa4:	7c a1       	ldd	r23, Y+36	; 0x24
    1aa6:	8d a1       	ldd	r24, Y+37	; 0x25
    1aa8:	9e a1       	ldd	r25, Y+38	; 0x26
    1aaa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aae:	dc 01       	movw	r26, r24
    1ab0:	cb 01       	movw	r24, r22
    1ab2:	9a a3       	std	Y+34, r25	; 0x22
    1ab4:	89 a3       	std	Y+33, r24	; 0x21
    1ab6:	89 a1       	ldd	r24, Y+33	; 0x21
    1ab8:	9a a1       	ldd	r25, Y+34	; 0x22
    1aba:	9e 8f       	std	Y+30, r25	; 0x1e
    1abc:	8d 8f       	std	Y+29, r24	; 0x1d
    1abe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ac0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1ac2:	01 97       	sbiw	r24, 0x01	; 1
    1ac4:	f1 f7       	brne	.-4      	; 0x1ac2 <LCD_Void8BitInit+0x316>
    1ac6:	9e 8f       	std	Y+30, r25	; 0x1e
    1ac8:	8d 8f       	std	Y+29, r24	; 0x1d
	/*wait for more than 39us*/
	_delay_ms(1);
	/*Clear LCD*/
	LCD_VoidSendCommand(LCD_ClearDisplay);
    1aca:	81 e0       	ldi	r24, 0x01	; 1
    1acc:	0e 94 92 0b 	call	0x1724	; 0x1724 <LCD_VoidSendCommand>
    1ad0:	80 e0       	ldi	r24, 0x00	; 0
    1ad2:	90 e0       	ldi	r25, 0x00	; 0
    1ad4:	a0 e0       	ldi	r26, 0x00	; 0
    1ad6:	b0 e4       	ldi	r27, 0x40	; 64
    1ad8:	89 8f       	std	Y+25, r24	; 0x19
    1ada:	9a 8f       	std	Y+26, r25	; 0x1a
    1adc:	ab 8f       	std	Y+27, r26	; 0x1b
    1ade:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ae0:	69 8d       	ldd	r22, Y+25	; 0x19
    1ae2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ae4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ae6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ae8:	20 e0       	ldi	r18, 0x00	; 0
    1aea:	30 e0       	ldi	r19, 0x00	; 0
    1aec:	4a ef       	ldi	r20, 0xFA	; 250
    1aee:	54 e4       	ldi	r21, 0x44	; 68
    1af0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1af4:	dc 01       	movw	r26, r24
    1af6:	cb 01       	movw	r24, r22
    1af8:	8d 8b       	std	Y+21, r24	; 0x15
    1afa:	9e 8b       	std	Y+22, r25	; 0x16
    1afc:	af 8b       	std	Y+23, r26	; 0x17
    1afe:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b00:	6d 89       	ldd	r22, Y+21	; 0x15
    1b02:	7e 89       	ldd	r23, Y+22	; 0x16
    1b04:	8f 89       	ldd	r24, Y+23	; 0x17
    1b06:	98 8d       	ldd	r25, Y+24	; 0x18
    1b08:	20 e0       	ldi	r18, 0x00	; 0
    1b0a:	30 e0       	ldi	r19, 0x00	; 0
    1b0c:	40 e8       	ldi	r20, 0x80	; 128
    1b0e:	5f e3       	ldi	r21, 0x3F	; 63
    1b10:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b14:	88 23       	and	r24, r24
    1b16:	2c f4       	brge	.+10     	; 0x1b22 <LCD_Void8BitInit+0x376>
		__ticks = 1;
    1b18:	81 e0       	ldi	r24, 0x01	; 1
    1b1a:	90 e0       	ldi	r25, 0x00	; 0
    1b1c:	9c 8b       	std	Y+20, r25	; 0x14
    1b1e:	8b 8b       	std	Y+19, r24	; 0x13
    1b20:	3f c0       	rjmp	.+126    	; 0x1ba0 <LCD_Void8BitInit+0x3f4>
	else if (__tmp > 65535)
    1b22:	6d 89       	ldd	r22, Y+21	; 0x15
    1b24:	7e 89       	ldd	r23, Y+22	; 0x16
    1b26:	8f 89       	ldd	r24, Y+23	; 0x17
    1b28:	98 8d       	ldd	r25, Y+24	; 0x18
    1b2a:	20 e0       	ldi	r18, 0x00	; 0
    1b2c:	3f ef       	ldi	r19, 0xFF	; 255
    1b2e:	4f e7       	ldi	r20, 0x7F	; 127
    1b30:	57 e4       	ldi	r21, 0x47	; 71
    1b32:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b36:	18 16       	cp	r1, r24
    1b38:	4c f5       	brge	.+82     	; 0x1b8c <LCD_Void8BitInit+0x3e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b3a:	69 8d       	ldd	r22, Y+25	; 0x19
    1b3c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b3e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b40:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b42:	20 e0       	ldi	r18, 0x00	; 0
    1b44:	30 e0       	ldi	r19, 0x00	; 0
    1b46:	40 e2       	ldi	r20, 0x20	; 32
    1b48:	51 e4       	ldi	r21, 0x41	; 65
    1b4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b4e:	dc 01       	movw	r26, r24
    1b50:	cb 01       	movw	r24, r22
    1b52:	bc 01       	movw	r22, r24
    1b54:	cd 01       	movw	r24, r26
    1b56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b5a:	dc 01       	movw	r26, r24
    1b5c:	cb 01       	movw	r24, r22
    1b5e:	9c 8b       	std	Y+20, r25	; 0x14
    1b60:	8b 8b       	std	Y+19, r24	; 0x13
    1b62:	0f c0       	rjmp	.+30     	; 0x1b82 <LCD_Void8BitInit+0x3d6>
    1b64:	88 ec       	ldi	r24, 0xC8	; 200
    1b66:	90 e0       	ldi	r25, 0x00	; 0
    1b68:	9a 8b       	std	Y+18, r25	; 0x12
    1b6a:	89 8b       	std	Y+17, r24	; 0x11
    1b6c:	89 89       	ldd	r24, Y+17	; 0x11
    1b6e:	9a 89       	ldd	r25, Y+18	; 0x12
    1b70:	01 97       	sbiw	r24, 0x01	; 1
    1b72:	f1 f7       	brne	.-4      	; 0x1b70 <LCD_Void8BitInit+0x3c4>
    1b74:	9a 8b       	std	Y+18, r25	; 0x12
    1b76:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b78:	8b 89       	ldd	r24, Y+19	; 0x13
    1b7a:	9c 89       	ldd	r25, Y+20	; 0x14
    1b7c:	01 97       	sbiw	r24, 0x01	; 1
    1b7e:	9c 8b       	std	Y+20, r25	; 0x14
    1b80:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b82:	8b 89       	ldd	r24, Y+19	; 0x13
    1b84:	9c 89       	ldd	r25, Y+20	; 0x14
    1b86:	00 97       	sbiw	r24, 0x00	; 0
    1b88:	69 f7       	brne	.-38     	; 0x1b64 <LCD_Void8BitInit+0x3b8>
    1b8a:	14 c0       	rjmp	.+40     	; 0x1bb4 <LCD_Void8BitInit+0x408>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b8c:	6d 89       	ldd	r22, Y+21	; 0x15
    1b8e:	7e 89       	ldd	r23, Y+22	; 0x16
    1b90:	8f 89       	ldd	r24, Y+23	; 0x17
    1b92:	98 8d       	ldd	r25, Y+24	; 0x18
    1b94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b98:	dc 01       	movw	r26, r24
    1b9a:	cb 01       	movw	r24, r22
    1b9c:	9c 8b       	std	Y+20, r25	; 0x14
    1b9e:	8b 8b       	std	Y+19, r24	; 0x13
    1ba0:	8b 89       	ldd	r24, Y+19	; 0x13
    1ba2:	9c 89       	ldd	r25, Y+20	; 0x14
    1ba4:	98 8b       	std	Y+16, r25	; 0x10
    1ba6:	8f 87       	std	Y+15, r24	; 0x0f
    1ba8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1baa:	98 89       	ldd	r25, Y+16	; 0x10
    1bac:	01 97       	sbiw	r24, 0x01	; 1
    1bae:	f1 f7       	brne	.-4      	; 0x1bac <LCD_Void8BitInit+0x400>
    1bb0:	98 8b       	std	Y+16, r25	; 0x10
    1bb2:	8f 87       	std	Y+15, r24	; 0x0f
	/*wait for more than 1.53ms*/
	_delay_ms(2);
	/*Entry Mode*/
	LCD_VoidSendCommand(LCD_EntryMode2);
    1bb4:	86 e0       	ldi	r24, 0x06	; 6
    1bb6:	0e 94 92 0b 	call	0x1724	; 0x1724 <LCD_VoidSendCommand>
    1bba:	80 e0       	ldi	r24, 0x00	; 0
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	a0 e8       	ldi	r26, 0x80	; 128
    1bc0:	bf e3       	ldi	r27, 0x3F	; 63
    1bc2:	8b 87       	std	Y+11, r24	; 0x0b
    1bc4:	9c 87       	std	Y+12, r25	; 0x0c
    1bc6:	ad 87       	std	Y+13, r26	; 0x0d
    1bc8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bca:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bcc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bce:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bd0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bd2:	20 e0       	ldi	r18, 0x00	; 0
    1bd4:	30 e0       	ldi	r19, 0x00	; 0
    1bd6:	4a ef       	ldi	r20, 0xFA	; 250
    1bd8:	54 e4       	ldi	r21, 0x44	; 68
    1bda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bde:	dc 01       	movw	r26, r24
    1be0:	cb 01       	movw	r24, r22
    1be2:	8f 83       	std	Y+7, r24	; 0x07
    1be4:	98 87       	std	Y+8, r25	; 0x08
    1be6:	a9 87       	std	Y+9, r26	; 0x09
    1be8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1bea:	6f 81       	ldd	r22, Y+7	; 0x07
    1bec:	78 85       	ldd	r23, Y+8	; 0x08
    1bee:	89 85       	ldd	r24, Y+9	; 0x09
    1bf0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bf2:	20 e0       	ldi	r18, 0x00	; 0
    1bf4:	30 e0       	ldi	r19, 0x00	; 0
    1bf6:	40 e8       	ldi	r20, 0x80	; 128
    1bf8:	5f e3       	ldi	r21, 0x3F	; 63
    1bfa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bfe:	88 23       	and	r24, r24
    1c00:	2c f4       	brge	.+10     	; 0x1c0c <LCD_Void8BitInit+0x460>
		__ticks = 1;
    1c02:	81 e0       	ldi	r24, 0x01	; 1
    1c04:	90 e0       	ldi	r25, 0x00	; 0
    1c06:	9e 83       	std	Y+6, r25	; 0x06
    1c08:	8d 83       	std	Y+5, r24	; 0x05
    1c0a:	3f c0       	rjmp	.+126    	; 0x1c8a <LCD_Void8BitInit+0x4de>
	else if (__tmp > 65535)
    1c0c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c0e:	78 85       	ldd	r23, Y+8	; 0x08
    1c10:	89 85       	ldd	r24, Y+9	; 0x09
    1c12:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c14:	20 e0       	ldi	r18, 0x00	; 0
    1c16:	3f ef       	ldi	r19, 0xFF	; 255
    1c18:	4f e7       	ldi	r20, 0x7F	; 127
    1c1a:	57 e4       	ldi	r21, 0x47	; 71
    1c1c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c20:	18 16       	cp	r1, r24
    1c22:	4c f5       	brge	.+82     	; 0x1c76 <LCD_Void8BitInit+0x4ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c24:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c26:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c28:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c2a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c2c:	20 e0       	ldi	r18, 0x00	; 0
    1c2e:	30 e0       	ldi	r19, 0x00	; 0
    1c30:	40 e2       	ldi	r20, 0x20	; 32
    1c32:	51 e4       	ldi	r21, 0x41	; 65
    1c34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c38:	dc 01       	movw	r26, r24
    1c3a:	cb 01       	movw	r24, r22
    1c3c:	bc 01       	movw	r22, r24
    1c3e:	cd 01       	movw	r24, r26
    1c40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c44:	dc 01       	movw	r26, r24
    1c46:	cb 01       	movw	r24, r22
    1c48:	9e 83       	std	Y+6, r25	; 0x06
    1c4a:	8d 83       	std	Y+5, r24	; 0x05
    1c4c:	0f c0       	rjmp	.+30     	; 0x1c6c <LCD_Void8BitInit+0x4c0>
    1c4e:	88 ec       	ldi	r24, 0xC8	; 200
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	9c 83       	std	Y+4, r25	; 0x04
    1c54:	8b 83       	std	Y+3, r24	; 0x03
    1c56:	8b 81       	ldd	r24, Y+3	; 0x03
    1c58:	9c 81       	ldd	r25, Y+4	; 0x04
    1c5a:	01 97       	sbiw	r24, 0x01	; 1
    1c5c:	f1 f7       	brne	.-4      	; 0x1c5a <LCD_Void8BitInit+0x4ae>
    1c5e:	9c 83       	std	Y+4, r25	; 0x04
    1c60:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c62:	8d 81       	ldd	r24, Y+5	; 0x05
    1c64:	9e 81       	ldd	r25, Y+6	; 0x06
    1c66:	01 97       	sbiw	r24, 0x01	; 1
    1c68:	9e 83       	std	Y+6, r25	; 0x06
    1c6a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c6c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c6e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c70:	00 97       	sbiw	r24, 0x00	; 0
    1c72:	69 f7       	brne	.-38     	; 0x1c4e <LCD_Void8BitInit+0x4a2>
    1c74:	14 c0       	rjmp	.+40     	; 0x1c9e <LCD_Void8BitInit+0x4f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c76:	6f 81       	ldd	r22, Y+7	; 0x07
    1c78:	78 85       	ldd	r23, Y+8	; 0x08
    1c7a:	89 85       	ldd	r24, Y+9	; 0x09
    1c7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c82:	dc 01       	movw	r26, r24
    1c84:	cb 01       	movw	r24, r22
    1c86:	9e 83       	std	Y+6, r25	; 0x06
    1c88:	8d 83       	std	Y+5, r24	; 0x05
    1c8a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c8c:	9e 81       	ldd	r25, Y+6	; 0x06
    1c8e:	9a 83       	std	Y+2, r25	; 0x02
    1c90:	89 83       	std	Y+1, r24	; 0x01
    1c92:	89 81       	ldd	r24, Y+1	; 0x01
    1c94:	9a 81       	ldd	r25, Y+2	; 0x02
    1c96:	01 97       	sbiw	r24, 0x01	; 1
    1c98:	f1 f7       	brne	.-4      	; 0x1c96 <LCD_Void8BitInit+0x4ea>
    1c9a:	9a 83       	std	Y+2, r25	; 0x02
    1c9c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1c9e:	ca 5b       	subi	r28, 0xBA	; 186
    1ca0:	df 4f       	sbci	r29, 0xFF	; 255
    1ca2:	0f b6       	in	r0, 0x3f	; 63
    1ca4:	f8 94       	cli
    1ca6:	de bf       	out	0x3e, r29	; 62
    1ca8:	0f be       	out	0x3f, r0	; 63
    1caa:	cd bf       	out	0x3d, r28	; 61
    1cac:	cf 91       	pop	r28
    1cae:	df 91       	pop	r29
    1cb0:	1f 91       	pop	r17
    1cb2:	0f 91       	pop	r16
    1cb4:	08 95       	ret

00001cb6 <LCD_VoidSendString>:
void LCD_VoidSendString (char *Ref_string)
{
    1cb6:	df 93       	push	r29
    1cb8:	cf 93       	push	r28
    1cba:	00 d0       	rcall	.+0      	; 0x1cbc <LCD_VoidSendString+0x6>
    1cbc:	cd b7       	in	r28, 0x3d	; 61
    1cbe:	de b7       	in	r29, 0x3e	; 62
    1cc0:	9a 83       	std	Y+2, r25	; 0x02
    1cc2:	89 83       	std	Y+1, r24	; 0x01
    1cc4:	0a c0       	rjmp	.+20     	; 0x1cda <LCD_VoidSendString+0x24>
	while (*Ref_string != '\0')
	{
		LCD_VoidSendChar(*Ref_string);
    1cc6:	e9 81       	ldd	r30, Y+1	; 0x01
    1cc8:	fa 81       	ldd	r31, Y+2	; 0x02
    1cca:	80 81       	ld	r24, Z
    1ccc:	0e 94 b4 0b 	call	0x1768	; 0x1768 <LCD_VoidSendChar>
		Ref_string++;
    1cd0:	89 81       	ldd	r24, Y+1	; 0x01
    1cd2:	9a 81       	ldd	r25, Y+2	; 0x02
    1cd4:	01 96       	adiw	r24, 0x01	; 1
    1cd6:	9a 83       	std	Y+2, r25	; 0x02
    1cd8:	89 83       	std	Y+1, r24	; 0x01
	LCD_VoidSendCommand(LCD_EntryMode2);
	_delay_ms(1);
}
void LCD_VoidSendString (char *Ref_string)
{
	while (*Ref_string != '\0')
    1cda:	e9 81       	ldd	r30, Y+1	; 0x01
    1cdc:	fa 81       	ldd	r31, Y+2	; 0x02
    1cde:	80 81       	ld	r24, Z
    1ce0:	88 23       	and	r24, r24
    1ce2:	89 f7       	brne	.-30     	; 0x1cc6 <LCD_VoidSendString+0x10>
	{
		LCD_VoidSendChar(*Ref_string);
		Ref_string++;
	}
}
    1ce4:	0f 90       	pop	r0
    1ce6:	0f 90       	pop	r0
    1ce8:	cf 91       	pop	r28
    1cea:	df 91       	pop	r29
    1cec:	08 95       	ret

00001cee <LCD_VoidSendNumber>:
void LCD_VoidSendNumber(u32 Local_Number)
{
    1cee:	ef 92       	push	r14
    1cf0:	ff 92       	push	r15
    1cf2:	0f 93       	push	r16
    1cf4:	1f 93       	push	r17
    1cf6:	df 93       	push	r29
    1cf8:	cf 93       	push	r28
    1cfa:	cd b7       	in	r28, 0x3d	; 61
    1cfc:	de b7       	in	r29, 0x3e	; 62
    1cfe:	28 97       	sbiw	r28, 0x08	; 8
    1d00:	0f b6       	in	r0, 0x3f	; 63
    1d02:	f8 94       	cli
    1d04:	de bf       	out	0x3e, r29	; 62
    1d06:	0f be       	out	0x3f, r0	; 63
    1d08:	cd bf       	out	0x3d, r28	; 61
    1d0a:	6d 83       	std	Y+5, r22	; 0x05
    1d0c:	7e 83       	std	Y+6, r23	; 0x06
    1d0e:	8f 83       	std	Y+7, r24	; 0x07
    1d10:	98 87       	std	Y+8, r25	; 0x08
	u32 Local_ReversedNum = 2;
    1d12:	82 e0       	ldi	r24, 0x02	; 2
    1d14:	90 e0       	ldi	r25, 0x00	; 0
    1d16:	a0 e0       	ldi	r26, 0x00	; 0
    1d18:	b0 e0       	ldi	r27, 0x00	; 0
    1d1a:	89 83       	std	Y+1, r24	; 0x01
    1d1c:	9a 83       	std	Y+2, r25	; 0x02
    1d1e:	ab 83       	std	Y+3, r26	; 0x03
    1d20:	bc 83       	std	Y+4, r27	; 0x04
    1d22:	36 c0       	rjmp	.+108    	; 0x1d90 <LCD_VoidSendNumber+0xa2>
	while (Local_Number != 0)
	{
		Local_ReversedNum = (Local_ReversedNum*10) + (Local_Number % 10);
    1d24:	89 81       	ldd	r24, Y+1	; 0x01
    1d26:	9a 81       	ldd	r25, Y+2	; 0x02
    1d28:	ab 81       	ldd	r26, Y+3	; 0x03
    1d2a:	bc 81       	ldd	r27, Y+4	; 0x04
    1d2c:	2a e0       	ldi	r18, 0x0A	; 10
    1d2e:	30 e0       	ldi	r19, 0x00	; 0
    1d30:	40 e0       	ldi	r20, 0x00	; 0
    1d32:	50 e0       	ldi	r21, 0x00	; 0
    1d34:	bc 01       	movw	r22, r24
    1d36:	cd 01       	movw	r24, r26
    1d38:	0e 94 d5 2d 	call	0x5baa	; 0x5baa <__mulsi3>
    1d3c:	7b 01       	movw	r14, r22
    1d3e:	8c 01       	movw	r16, r24
    1d40:	8d 81       	ldd	r24, Y+5	; 0x05
    1d42:	9e 81       	ldd	r25, Y+6	; 0x06
    1d44:	af 81       	ldd	r26, Y+7	; 0x07
    1d46:	b8 85       	ldd	r27, Y+8	; 0x08
    1d48:	2a e0       	ldi	r18, 0x0A	; 10
    1d4a:	30 e0       	ldi	r19, 0x00	; 0
    1d4c:	40 e0       	ldi	r20, 0x00	; 0
    1d4e:	50 e0       	ldi	r21, 0x00	; 0
    1d50:	bc 01       	movw	r22, r24
    1d52:	cd 01       	movw	r24, r26
    1d54:	0e 94 f4 2d 	call	0x5be8	; 0x5be8 <__udivmodsi4>
    1d58:	dc 01       	movw	r26, r24
    1d5a:	cb 01       	movw	r24, r22
    1d5c:	8e 0d       	add	r24, r14
    1d5e:	9f 1d       	adc	r25, r15
    1d60:	a0 1f       	adc	r26, r16
    1d62:	b1 1f       	adc	r27, r17
    1d64:	89 83       	std	Y+1, r24	; 0x01
    1d66:	9a 83       	std	Y+2, r25	; 0x02
    1d68:	ab 83       	std	Y+3, r26	; 0x03
    1d6a:	bc 83       	std	Y+4, r27	; 0x04
		Local_Number = Local_Number / 10;
    1d6c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d6e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d70:	af 81       	ldd	r26, Y+7	; 0x07
    1d72:	b8 85       	ldd	r27, Y+8	; 0x08
    1d74:	2a e0       	ldi	r18, 0x0A	; 10
    1d76:	30 e0       	ldi	r19, 0x00	; 0
    1d78:	40 e0       	ldi	r20, 0x00	; 0
    1d7a:	50 e0       	ldi	r21, 0x00	; 0
    1d7c:	bc 01       	movw	r22, r24
    1d7e:	cd 01       	movw	r24, r26
    1d80:	0e 94 f4 2d 	call	0x5be8	; 0x5be8 <__udivmodsi4>
    1d84:	da 01       	movw	r26, r20
    1d86:	c9 01       	movw	r24, r18
    1d88:	8d 83       	std	Y+5, r24	; 0x05
    1d8a:	9e 83       	std	Y+6, r25	; 0x06
    1d8c:	af 83       	std	Y+7, r26	; 0x07
    1d8e:	b8 87       	std	Y+8, r27	; 0x08
	}
}
void LCD_VoidSendNumber(u32 Local_Number)
{
	u32 Local_ReversedNum = 2;
	while (Local_Number != 0)
    1d90:	8d 81       	ldd	r24, Y+5	; 0x05
    1d92:	9e 81       	ldd	r25, Y+6	; 0x06
    1d94:	af 81       	ldd	r26, Y+7	; 0x07
    1d96:	b8 85       	ldd	r27, Y+8	; 0x08
    1d98:	00 97       	sbiw	r24, 0x00	; 0
    1d9a:	a1 05       	cpc	r26, r1
    1d9c:	b1 05       	cpc	r27, r1
    1d9e:	11 f6       	brne	.-124    	; 0x1d24 <LCD_VoidSendNumber+0x36>
		Local_ReversedNum = (Local_ReversedNum*10) + (Local_Number % 10);
		Local_Number = Local_Number / 10;
	}
	do
	{
		LCD_VoidSendChar((Local_ReversedNum%10)+ '0');
    1da0:	89 81       	ldd	r24, Y+1	; 0x01
    1da2:	9a 81       	ldd	r25, Y+2	; 0x02
    1da4:	ab 81       	ldd	r26, Y+3	; 0x03
    1da6:	bc 81       	ldd	r27, Y+4	; 0x04
    1da8:	2a e0       	ldi	r18, 0x0A	; 10
    1daa:	30 e0       	ldi	r19, 0x00	; 0
    1dac:	40 e0       	ldi	r20, 0x00	; 0
    1dae:	50 e0       	ldi	r21, 0x00	; 0
    1db0:	bc 01       	movw	r22, r24
    1db2:	cd 01       	movw	r24, r26
    1db4:	0e 94 f4 2d 	call	0x5be8	; 0x5be8 <__udivmodsi4>
    1db8:	dc 01       	movw	r26, r24
    1dba:	cb 01       	movw	r24, r22
    1dbc:	80 5d       	subi	r24, 0xD0	; 208
    1dbe:	0e 94 b4 0b 	call	0x1768	; 0x1768 <LCD_VoidSendChar>
		Local_ReversedNum /= 10;
    1dc2:	89 81       	ldd	r24, Y+1	; 0x01
    1dc4:	9a 81       	ldd	r25, Y+2	; 0x02
    1dc6:	ab 81       	ldd	r26, Y+3	; 0x03
    1dc8:	bc 81       	ldd	r27, Y+4	; 0x04
    1dca:	2a e0       	ldi	r18, 0x0A	; 10
    1dcc:	30 e0       	ldi	r19, 0x00	; 0
    1dce:	40 e0       	ldi	r20, 0x00	; 0
    1dd0:	50 e0       	ldi	r21, 0x00	; 0
    1dd2:	bc 01       	movw	r22, r24
    1dd4:	cd 01       	movw	r24, r26
    1dd6:	0e 94 f4 2d 	call	0x5be8	; 0x5be8 <__udivmodsi4>
    1dda:	da 01       	movw	r26, r20
    1ddc:	c9 01       	movw	r24, r18
    1dde:	89 83       	std	Y+1, r24	; 0x01
    1de0:	9a 83       	std	Y+2, r25	; 0x02
    1de2:	ab 83       	std	Y+3, r26	; 0x03
    1de4:	bc 83       	std	Y+4, r27	; 0x04
	}while(Local_ReversedNum != 2);
    1de6:	89 81       	ldd	r24, Y+1	; 0x01
    1de8:	9a 81       	ldd	r25, Y+2	; 0x02
    1dea:	ab 81       	ldd	r26, Y+3	; 0x03
    1dec:	bc 81       	ldd	r27, Y+4	; 0x04
    1dee:	82 30       	cpi	r24, 0x02	; 2
    1df0:	91 05       	cpc	r25, r1
    1df2:	a1 05       	cpc	r26, r1
    1df4:	b1 05       	cpc	r27, r1
    1df6:	a1 f6       	brne	.-88     	; 0x1da0 <LCD_VoidSendNumber+0xb2>
	}
	for (int count = i-1; count >= 0; count--)
	{
		LCD_VoidSendChar(arr[count] + '0');
	}*/
}
    1df8:	28 96       	adiw	r28, 0x08	; 8
    1dfa:	0f b6       	in	r0, 0x3f	; 63
    1dfc:	f8 94       	cli
    1dfe:	de bf       	out	0x3e, r29	; 62
    1e00:	0f be       	out	0x3f, r0	; 63
    1e02:	cd bf       	out	0x3d, r28	; 61
    1e04:	cf 91       	pop	r28
    1e06:	df 91       	pop	r29
    1e08:	1f 91       	pop	r17
    1e0a:	0f 91       	pop	r16
    1e0c:	ff 90       	pop	r15
    1e0e:	ef 90       	pop	r14
    1e10:	08 95       	ret

00001e12 <LCD_VoidStartFrom>:
void LCD_VoidStartFrom(u8 Local_RowPosition, u8 Local_ColPosition)
{
    1e12:	df 93       	push	r29
    1e14:	cf 93       	push	r28
    1e16:	00 d0       	rcall	.+0      	; 0x1e18 <LCD_VoidStartFrom+0x6>
    1e18:	0f 92       	push	r0
    1e1a:	cd b7       	in	r28, 0x3d	; 61
    1e1c:	de b7       	in	r29, 0x3e	; 62
    1e1e:	8a 83       	std	Y+2, r24	; 0x02
    1e20:	6b 83       	std	Y+3, r22	; 0x03
	if((Local_ColPosition < Cols_Number) && (Local_RowPosition < Rows_Number))
    1e22:	8b 81       	ldd	r24, Y+3	; 0x03
    1e24:	80 31       	cpi	r24, 0x10	; 16
    1e26:	b8 f4       	brcc	.+46     	; 0x1e56 <LCD_VoidStartFrom+0x44>
    1e28:	8a 81       	ldd	r24, Y+2	; 0x02
    1e2a:	82 30       	cpi	r24, 0x02	; 2
    1e2c:	a0 f4       	brcc	.+40     	; 0x1e56 <LCD_VoidStartFrom+0x44>
	{
		u8 Local_DDRAMAddress = LCD_SetAddressDDRAM + (Local_RowPosition * Line1_Address) + Local_ColPosition;
    1e2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e30:	88 2f       	mov	r24, r24
    1e32:	90 e0       	ldi	r25, 0x00	; 0
    1e34:	02 96       	adiw	r24, 0x02	; 2
    1e36:	00 24       	eor	r0, r0
    1e38:	96 95       	lsr	r25
    1e3a:	87 95       	ror	r24
    1e3c:	07 94       	ror	r0
    1e3e:	96 95       	lsr	r25
    1e40:	87 95       	ror	r24
    1e42:	07 94       	ror	r0
    1e44:	98 2f       	mov	r25, r24
    1e46:	80 2d       	mov	r24, r0
    1e48:	98 2f       	mov	r25, r24
    1e4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e4c:	89 0f       	add	r24, r25
    1e4e:	89 83       	std	Y+1, r24	; 0x01
		LCD_VoidSendCommand(Local_DDRAMAddress);
    1e50:	89 81       	ldd	r24, Y+1	; 0x01
    1e52:	0e 94 92 0b 	call	0x1724	; 0x1724 <LCD_VoidSendCommand>
	}
}
    1e56:	0f 90       	pop	r0
    1e58:	0f 90       	pop	r0
    1e5a:	0f 90       	pop	r0
    1e5c:	cf 91       	pop	r28
    1e5e:	df 91       	pop	r29
    1e60:	08 95       	ret

00001e62 <LCD_VoidSendStringFromPos>:
void LCD_VoidSendStringFromPos (char *Ref_string, u8 Local_RowPosition, u8 Local_ColPosition)
{
    1e62:	df 93       	push	r29
    1e64:	cf 93       	push	r28
    1e66:	00 d0       	rcall	.+0      	; 0x1e68 <LCD_VoidSendStringFromPos+0x6>
    1e68:	00 d0       	rcall	.+0      	; 0x1e6a <LCD_VoidSendStringFromPos+0x8>
    1e6a:	00 d0       	rcall	.+0      	; 0x1e6c <LCD_VoidSendStringFromPos+0xa>
    1e6c:	cd b7       	in	r28, 0x3d	; 61
    1e6e:	de b7       	in	r29, 0x3e	; 62
    1e70:	9c 83       	std	Y+4, r25	; 0x04
    1e72:	8b 83       	std	Y+3, r24	; 0x03
    1e74:	6d 83       	std	Y+5, r22	; 0x05
    1e76:	4e 83       	std	Y+6, r20	; 0x06
	u8 Local_Index = 0;
    1e78:	1a 82       	std	Y+2, r1	; 0x02
	u8 line;
	if (Local_RowPosition == 0)
    1e7a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e7c:	88 23       	and	r24, r24
    1e7e:	11 f4       	brne	.+4      	; 0x1e84 <LCD_VoidSendStringFromPos+0x22>
	{
		line = Line_1;
    1e80:	19 82       	std	Y+1, r1	; 0x01
    1e82:	05 c0       	rjmp	.+10     	; 0x1e8e <LCD_VoidSendStringFromPos+0x2c>
	}
	else if (Local_RowPosition == 1)
    1e84:	8d 81       	ldd	r24, Y+5	; 0x05
    1e86:	81 30       	cpi	r24, 0x01	; 1
    1e88:	11 f4       	brne	.+4      	; 0x1e8e <LCD_VoidSendStringFromPos+0x2c>
	{
		line = Line_2;
    1e8a:	81 e0       	ldi	r24, 0x01	; 1
    1e8c:	89 83       	std	Y+1, r24	; 0x01
	}
	LCD_VoidStartFrom(Local_RowPosition,Local_ColPosition);
    1e8e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e90:	6e 81       	ldd	r22, Y+6	; 0x06
    1e92:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <LCD_VoidStartFrom>
    1e96:	90 c0       	rjmp	.+288    	; 0x1fb8 <LCD_VoidSendStringFromPos+0x156>
	while ((Ref_string[Local_Index] != '\0') && (((Local_RowPosition * Cols_Number) + (Local_ColPosition + Local_Index)) < Total_blocks_Num))
	{
		if((Local_RowPosition*16) + (Local_ColPosition + Local_Index) < Cols_Number)
    1e98:	8d 81       	ldd	r24, Y+5	; 0x05
    1e9a:	88 2f       	mov	r24, r24
    1e9c:	90 e0       	ldi	r25, 0x00	; 0
    1e9e:	ac 01       	movw	r20, r24
    1ea0:	42 95       	swap	r20
    1ea2:	52 95       	swap	r21
    1ea4:	50 7f       	andi	r21, 0xF0	; 240
    1ea6:	54 27       	eor	r21, r20
    1ea8:	40 7f       	andi	r20, 0xF0	; 240
    1eaa:	54 27       	eor	r21, r20
    1eac:	8e 81       	ldd	r24, Y+6	; 0x06
    1eae:	28 2f       	mov	r18, r24
    1eb0:	30 e0       	ldi	r19, 0x00	; 0
    1eb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb4:	88 2f       	mov	r24, r24
    1eb6:	90 e0       	ldi	r25, 0x00	; 0
    1eb8:	82 0f       	add	r24, r18
    1eba:	93 1f       	adc	r25, r19
    1ebc:	84 0f       	add	r24, r20
    1ebe:	95 1f       	adc	r25, r21
    1ec0:	80 31       	cpi	r24, 0x10	; 16
    1ec2:	91 05       	cpc	r25, r1
    1ec4:	7c f4       	brge	.+30     	; 0x1ee4 <LCD_VoidSendStringFromPos+0x82>
		{
			LCD_VoidSendChar(Ref_string[Local_Index]);
    1ec6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec8:	28 2f       	mov	r18, r24
    1eca:	30 e0       	ldi	r19, 0x00	; 0
    1ecc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ece:	9c 81       	ldd	r25, Y+4	; 0x04
    1ed0:	fc 01       	movw	r30, r24
    1ed2:	e2 0f       	add	r30, r18
    1ed4:	f3 1f       	adc	r31, r19
    1ed6:	80 81       	ld	r24, Z
    1ed8:	0e 94 b4 0b 	call	0x1768	; 0x1768 <LCD_VoidSendChar>
			Local_Index++;
    1edc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ede:	8f 5f       	subi	r24, 0xFF	; 255
    1ee0:	8a 83       	std	Y+2, r24	; 0x02
    1ee2:	6a c0       	rjmp	.+212    	; 0x1fb8 <LCD_VoidSendStringFromPos+0x156>
		}
		else if(((Local_RowPosition*16) + (Local_ColPosition + Local_Index) == Cols_Number) && (line == Line_1))
    1ee4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ee6:	88 2f       	mov	r24, r24
    1ee8:	90 e0       	ldi	r25, 0x00	; 0
    1eea:	ac 01       	movw	r20, r24
    1eec:	42 95       	swap	r20
    1eee:	52 95       	swap	r21
    1ef0:	50 7f       	andi	r21, 0xF0	; 240
    1ef2:	54 27       	eor	r21, r20
    1ef4:	40 7f       	andi	r20, 0xF0	; 240
    1ef6:	54 27       	eor	r21, r20
    1ef8:	8e 81       	ldd	r24, Y+6	; 0x06
    1efa:	28 2f       	mov	r18, r24
    1efc:	30 e0       	ldi	r19, 0x00	; 0
    1efe:	8a 81       	ldd	r24, Y+2	; 0x02
    1f00:	88 2f       	mov	r24, r24
    1f02:	90 e0       	ldi	r25, 0x00	; 0
    1f04:	82 0f       	add	r24, r18
    1f06:	93 1f       	adc	r25, r19
    1f08:	84 0f       	add	r24, r20
    1f0a:	95 1f       	adc	r25, r21
    1f0c:	80 31       	cpi	r24, 0x10	; 16
    1f0e:	91 05       	cpc	r25, r1
    1f10:	69 f4       	brne	.+26     	; 0x1f2c <LCD_VoidSendStringFromPos+0xca>
    1f12:	89 81       	ldd	r24, Y+1	; 0x01
    1f14:	88 23       	and	r24, r24
    1f16:	51 f4       	brne	.+20     	; 0x1f2c <LCD_VoidSendStringFromPos+0xca>
		{
			LCD_VoidStartFrom(1,0);
    1f18:	81 e0       	ldi	r24, 0x01	; 1
    1f1a:	60 e0       	ldi	r22, 0x00	; 0
    1f1c:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <LCD_VoidStartFrom>
			line = Line_2;
    1f20:	81 e0       	ldi	r24, 0x01	; 1
    1f22:	89 83       	std	Y+1, r24	; 0x01
			Local_RowPosition = 1;
    1f24:	81 e0       	ldi	r24, 0x01	; 1
    1f26:	8d 83       	std	Y+5, r24	; 0x05
			Local_ColPosition = 0;
    1f28:	1e 82       	std	Y+6, r1	; 0x06
    1f2a:	46 c0       	rjmp	.+140    	; 0x1fb8 <LCD_VoidSendStringFromPos+0x156>
		}
		else if(((Local_RowPosition*16) + (Local_ColPosition + Local_Index) < Total_blocks_Num) && (line == Line_2))
    1f2c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f2e:	88 2f       	mov	r24, r24
    1f30:	90 e0       	ldi	r25, 0x00	; 0
    1f32:	ac 01       	movw	r20, r24
    1f34:	42 95       	swap	r20
    1f36:	52 95       	swap	r21
    1f38:	50 7f       	andi	r21, 0xF0	; 240
    1f3a:	54 27       	eor	r21, r20
    1f3c:	40 7f       	andi	r20, 0xF0	; 240
    1f3e:	54 27       	eor	r21, r20
    1f40:	8e 81       	ldd	r24, Y+6	; 0x06
    1f42:	28 2f       	mov	r18, r24
    1f44:	30 e0       	ldi	r19, 0x00	; 0
    1f46:	8a 81       	ldd	r24, Y+2	; 0x02
    1f48:	88 2f       	mov	r24, r24
    1f4a:	90 e0       	ldi	r25, 0x00	; 0
    1f4c:	82 0f       	add	r24, r18
    1f4e:	93 1f       	adc	r25, r19
    1f50:	84 0f       	add	r24, r20
    1f52:	95 1f       	adc	r25, r21
    1f54:	80 32       	cpi	r24, 0x20	; 32
    1f56:	91 05       	cpc	r25, r1
    1f58:	7c f5       	brge	.+94     	; 0x1fb8 <LCD_VoidSendStringFromPos+0x156>
    1f5a:	89 81       	ldd	r24, Y+1	; 0x01
    1f5c:	81 30       	cpi	r24, 0x01	; 1
    1f5e:	61 f5       	brne	.+88     	; 0x1fb8 <LCD_VoidSendStringFromPos+0x156>
		{
			LCD_VoidSendChar(Ref_string[Local_Index]);
    1f60:	8a 81       	ldd	r24, Y+2	; 0x02
    1f62:	28 2f       	mov	r18, r24
    1f64:	30 e0       	ldi	r19, 0x00	; 0
    1f66:	8b 81       	ldd	r24, Y+3	; 0x03
    1f68:	9c 81       	ldd	r25, Y+4	; 0x04
    1f6a:	fc 01       	movw	r30, r24
    1f6c:	e2 0f       	add	r30, r18
    1f6e:	f3 1f       	adc	r31, r19
    1f70:	80 81       	ld	r24, Z
    1f72:	0e 94 b4 0b 	call	0x1768	; 0x1768 <LCD_VoidSendChar>
			Local_Index++;
    1f76:	8a 81       	ldd	r24, Y+2	; 0x02
    1f78:	8f 5f       	subi	r24, 0xFF	; 255
    1f7a:	8a 83       	std	Y+2, r24	; 0x02
			if(((Local_RowPosition*16) + (Local_ColPosition + Local_Index)) == Total_blocks_Num)
    1f7c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f7e:	88 2f       	mov	r24, r24
    1f80:	90 e0       	ldi	r25, 0x00	; 0
    1f82:	ac 01       	movw	r20, r24
    1f84:	42 95       	swap	r20
    1f86:	52 95       	swap	r21
    1f88:	50 7f       	andi	r21, 0xF0	; 240
    1f8a:	54 27       	eor	r21, r20
    1f8c:	40 7f       	andi	r20, 0xF0	; 240
    1f8e:	54 27       	eor	r21, r20
    1f90:	8e 81       	ldd	r24, Y+6	; 0x06
    1f92:	28 2f       	mov	r18, r24
    1f94:	30 e0       	ldi	r19, 0x00	; 0
    1f96:	8a 81       	ldd	r24, Y+2	; 0x02
    1f98:	88 2f       	mov	r24, r24
    1f9a:	90 e0       	ldi	r25, 0x00	; 0
    1f9c:	82 0f       	add	r24, r18
    1f9e:	93 1f       	adc	r25, r19
    1fa0:	84 0f       	add	r24, r20
    1fa2:	95 1f       	adc	r25, r21
    1fa4:	80 32       	cpi	r24, 0x20	; 32
    1fa6:	91 05       	cpc	r25, r1
    1fa8:	39 f4       	brne	.+14     	; 0x1fb8 <LCD_VoidSendStringFromPos+0x156>
			{
				LCD_VoidStartFrom(0,0);
    1faa:	80 e0       	ldi	r24, 0x00	; 0
    1fac:	60 e0       	ldi	r22, 0x00	; 0
    1fae:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <LCD_VoidStartFrom>
				Local_RowPosition = 0;
    1fb2:	1d 82       	std	Y+5, r1	; 0x05
				Local_ColPosition = 0;
    1fb4:	1e 82       	std	Y+6, r1	; 0x06
				line = Line_1;
    1fb6:	19 82       	std	Y+1, r1	; 0x01
	else if (Local_RowPosition == 1)
	{
		line = Line_2;
	}
	LCD_VoidStartFrom(Local_RowPosition,Local_ColPosition);
	while ((Ref_string[Local_Index] != '\0') && (((Local_RowPosition * Cols_Number) + (Local_ColPosition + Local_Index)) < Total_blocks_Num))
    1fb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fba:	28 2f       	mov	r18, r24
    1fbc:	30 e0       	ldi	r19, 0x00	; 0
    1fbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc0:	9c 81       	ldd	r25, Y+4	; 0x04
    1fc2:	fc 01       	movw	r30, r24
    1fc4:	e2 0f       	add	r30, r18
    1fc6:	f3 1f       	adc	r31, r19
    1fc8:	80 81       	ld	r24, Z
    1fca:	88 23       	and	r24, r24
    1fcc:	c1 f0       	breq	.+48     	; 0x1ffe <LCD_VoidSendStringFromPos+0x19c>
    1fce:	8d 81       	ldd	r24, Y+5	; 0x05
    1fd0:	88 2f       	mov	r24, r24
    1fd2:	90 e0       	ldi	r25, 0x00	; 0
    1fd4:	ac 01       	movw	r20, r24
    1fd6:	42 95       	swap	r20
    1fd8:	52 95       	swap	r21
    1fda:	50 7f       	andi	r21, 0xF0	; 240
    1fdc:	54 27       	eor	r21, r20
    1fde:	40 7f       	andi	r20, 0xF0	; 240
    1fe0:	54 27       	eor	r21, r20
    1fe2:	8e 81       	ldd	r24, Y+6	; 0x06
    1fe4:	28 2f       	mov	r18, r24
    1fe6:	30 e0       	ldi	r19, 0x00	; 0
    1fe8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fea:	88 2f       	mov	r24, r24
    1fec:	90 e0       	ldi	r25, 0x00	; 0
    1fee:	82 0f       	add	r24, r18
    1ff0:	93 1f       	adc	r25, r19
    1ff2:	84 0f       	add	r24, r20
    1ff4:	95 1f       	adc	r25, r21
    1ff6:	80 32       	cpi	r24, 0x20	; 32
    1ff8:	91 05       	cpc	r25, r1
    1ffa:	0c f4       	brge	.+2      	; 0x1ffe <LCD_VoidSendStringFromPos+0x19c>
    1ffc:	4d cf       	rjmp	.-358    	; 0x1e98 <LCD_VoidSendStringFromPos+0x36>
				Local_ColPosition = 0;
				line = Line_1;
			}
		}
	}
}
    1ffe:	26 96       	adiw	r28, 0x06	; 6
    2000:	0f b6       	in	r0, 0x3f	; 63
    2002:	f8 94       	cli
    2004:	de bf       	out	0x3e, r29	; 62
    2006:	0f be       	out	0x3f, r0	; 63
    2008:	cd bf       	out	0x3d, r28	; 61
    200a:	cf 91       	pop	r28
    200c:	df 91       	pop	r29
    200e:	08 95       	ret

00002010 <LCD_VoidAddCustomPattern>:
void LCD_VoidAddCustomPattern(u8 * Local_Pattern, u8 Local_IndexCGRAM)
{
    2010:	df 93       	push	r29
    2012:	cf 93       	push	r28
    2014:	cd b7       	in	r28, 0x3d	; 61
    2016:	de b7       	in	r29, 0x3e	; 62
    2018:	64 97       	sbiw	r28, 0x14	; 20
    201a:	0f b6       	in	r0, 0x3f	; 63
    201c:	f8 94       	cli
    201e:	de bf       	out	0x3e, r29	; 62
    2020:	0f be       	out	0x3f, r0	; 63
    2022:	cd bf       	out	0x3d, r28	; 61
    2024:	9b 8b       	std	Y+19, r25	; 0x13
    2026:	8a 8b       	std	Y+18, r24	; 0x12
    2028:	6c 8b       	std	Y+20, r22	; 0x14
	if(Local_IndexCGRAM < CGRAM_MaxSize)
    202a:	8c 89       	ldd	r24, Y+20	; 0x14
    202c:	88 30       	cpi	r24, 0x08	; 8
    202e:	08 f0       	brcs	.+2      	; 0x2032 <LCD_VoidAddCustomPattern+0x22>
    2030:	9a c0       	rjmp	.+308    	; 0x2166 <LCD_VoidAddCustomPattern+0x156>
	{
		u8 Local_CGRAMAddress = LCD_SetAddressCGRAM + Local_IndexCGRAM * CGRAM_MaxSize;
    2032:	8c 89       	ldd	r24, Y+20	; 0x14
    2034:	88 2f       	mov	r24, r24
    2036:	90 e0       	ldi	r25, 0x00	; 0
    2038:	08 96       	adiw	r24, 0x08	; 8
    203a:	88 0f       	add	r24, r24
    203c:	99 1f       	adc	r25, r25
    203e:	88 0f       	add	r24, r24
    2040:	99 1f       	adc	r25, r25
    2042:	88 0f       	add	r24, r24
    2044:	99 1f       	adc	r25, r25
    2046:	89 8b       	std	Y+17, r24	; 0x11
		LCD_VoidSendCommand(Local_CGRAMAddress);
    2048:	89 89       	ldd	r24, Y+17	; 0x11
    204a:	0e 94 92 0b 	call	0x1724	; 0x1724 <LCD_VoidSendCommand>
		for(int index = 0; index < CGRAM_MaxSize; index++)
    204e:	18 8a       	std	Y+16, r1	; 0x10
    2050:	1f 86       	std	Y+15, r1	; 0x0f
    2052:	0f c0       	rjmp	.+30     	; 0x2072 <LCD_VoidAddCustomPattern+0x62>
		{
			LCD_VoidSendChar(Local_Pattern[index]);
    2054:	2f 85       	ldd	r18, Y+15	; 0x0f
    2056:	38 89       	ldd	r19, Y+16	; 0x10
    2058:	8a 89       	ldd	r24, Y+18	; 0x12
    205a:	9b 89       	ldd	r25, Y+19	; 0x13
    205c:	fc 01       	movw	r30, r24
    205e:	e2 0f       	add	r30, r18
    2060:	f3 1f       	adc	r31, r19
    2062:	80 81       	ld	r24, Z
    2064:	0e 94 b4 0b 	call	0x1768	; 0x1768 <LCD_VoidSendChar>
{
	if(Local_IndexCGRAM < CGRAM_MaxSize)
	{
		u8 Local_CGRAMAddress = LCD_SetAddressCGRAM + Local_IndexCGRAM * CGRAM_MaxSize;
		LCD_VoidSendCommand(Local_CGRAMAddress);
		for(int index = 0; index < CGRAM_MaxSize; index++)
    2068:	8f 85       	ldd	r24, Y+15	; 0x0f
    206a:	98 89       	ldd	r25, Y+16	; 0x10
    206c:	01 96       	adiw	r24, 0x01	; 1
    206e:	98 8b       	std	Y+16, r25	; 0x10
    2070:	8f 87       	std	Y+15, r24	; 0x0f
    2072:	8f 85       	ldd	r24, Y+15	; 0x0f
    2074:	98 89       	ldd	r25, Y+16	; 0x10
    2076:	88 30       	cpi	r24, 0x08	; 8
    2078:	91 05       	cpc	r25, r1
    207a:	64 f3       	brlt	.-40     	; 0x2054 <LCD_VoidAddCustomPattern+0x44>
		{
			LCD_VoidSendChar(Local_Pattern[index]);
		}
		LCD_VoidSendCommand(LCD_ReturnHome);
    207c:	82 e0       	ldi	r24, 0x02	; 2
    207e:	0e 94 92 0b 	call	0x1724	; 0x1724 <LCD_VoidSendCommand>
    2082:	80 e0       	ldi	r24, 0x00	; 0
    2084:	90 e0       	ldi	r25, 0x00	; 0
    2086:	a0 e0       	ldi	r26, 0x00	; 0
    2088:	b0 e4       	ldi	r27, 0x40	; 64
    208a:	8b 87       	std	Y+11, r24	; 0x0b
    208c:	9c 87       	std	Y+12, r25	; 0x0c
    208e:	ad 87       	std	Y+13, r26	; 0x0d
    2090:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2092:	6b 85       	ldd	r22, Y+11	; 0x0b
    2094:	7c 85       	ldd	r23, Y+12	; 0x0c
    2096:	8d 85       	ldd	r24, Y+13	; 0x0d
    2098:	9e 85       	ldd	r25, Y+14	; 0x0e
    209a:	20 e0       	ldi	r18, 0x00	; 0
    209c:	30 e0       	ldi	r19, 0x00	; 0
    209e:	4a ef       	ldi	r20, 0xFA	; 250
    20a0:	54 e4       	ldi	r21, 0x44	; 68
    20a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20a6:	dc 01       	movw	r26, r24
    20a8:	cb 01       	movw	r24, r22
    20aa:	8f 83       	std	Y+7, r24	; 0x07
    20ac:	98 87       	std	Y+8, r25	; 0x08
    20ae:	a9 87       	std	Y+9, r26	; 0x09
    20b0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20b2:	6f 81       	ldd	r22, Y+7	; 0x07
    20b4:	78 85       	ldd	r23, Y+8	; 0x08
    20b6:	89 85       	ldd	r24, Y+9	; 0x09
    20b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    20ba:	20 e0       	ldi	r18, 0x00	; 0
    20bc:	30 e0       	ldi	r19, 0x00	; 0
    20be:	40 e8       	ldi	r20, 0x80	; 128
    20c0:	5f e3       	ldi	r21, 0x3F	; 63
    20c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20c6:	88 23       	and	r24, r24
    20c8:	2c f4       	brge	.+10     	; 0x20d4 <LCD_VoidAddCustomPattern+0xc4>
		__ticks = 1;
    20ca:	81 e0       	ldi	r24, 0x01	; 1
    20cc:	90 e0       	ldi	r25, 0x00	; 0
    20ce:	9e 83       	std	Y+6, r25	; 0x06
    20d0:	8d 83       	std	Y+5, r24	; 0x05
    20d2:	3f c0       	rjmp	.+126    	; 0x2152 <LCD_VoidAddCustomPattern+0x142>
	else if (__tmp > 65535)
    20d4:	6f 81       	ldd	r22, Y+7	; 0x07
    20d6:	78 85       	ldd	r23, Y+8	; 0x08
    20d8:	89 85       	ldd	r24, Y+9	; 0x09
    20da:	9a 85       	ldd	r25, Y+10	; 0x0a
    20dc:	20 e0       	ldi	r18, 0x00	; 0
    20de:	3f ef       	ldi	r19, 0xFF	; 255
    20e0:	4f e7       	ldi	r20, 0x7F	; 127
    20e2:	57 e4       	ldi	r21, 0x47	; 71
    20e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20e8:	18 16       	cp	r1, r24
    20ea:	4c f5       	brge	.+82     	; 0x213e <LCD_VoidAddCustomPattern+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    20ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    20f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    20f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    20f4:	20 e0       	ldi	r18, 0x00	; 0
    20f6:	30 e0       	ldi	r19, 0x00	; 0
    20f8:	40 e2       	ldi	r20, 0x20	; 32
    20fa:	51 e4       	ldi	r21, 0x41	; 65
    20fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2100:	dc 01       	movw	r26, r24
    2102:	cb 01       	movw	r24, r22
    2104:	bc 01       	movw	r22, r24
    2106:	cd 01       	movw	r24, r26
    2108:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    210c:	dc 01       	movw	r26, r24
    210e:	cb 01       	movw	r24, r22
    2110:	9e 83       	std	Y+6, r25	; 0x06
    2112:	8d 83       	std	Y+5, r24	; 0x05
    2114:	0f c0       	rjmp	.+30     	; 0x2134 <LCD_VoidAddCustomPattern+0x124>
    2116:	88 ec       	ldi	r24, 0xC8	; 200
    2118:	90 e0       	ldi	r25, 0x00	; 0
    211a:	9c 83       	std	Y+4, r25	; 0x04
    211c:	8b 83       	std	Y+3, r24	; 0x03
    211e:	8b 81       	ldd	r24, Y+3	; 0x03
    2120:	9c 81       	ldd	r25, Y+4	; 0x04
    2122:	01 97       	sbiw	r24, 0x01	; 1
    2124:	f1 f7       	brne	.-4      	; 0x2122 <LCD_VoidAddCustomPattern+0x112>
    2126:	9c 83       	std	Y+4, r25	; 0x04
    2128:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    212a:	8d 81       	ldd	r24, Y+5	; 0x05
    212c:	9e 81       	ldd	r25, Y+6	; 0x06
    212e:	01 97       	sbiw	r24, 0x01	; 1
    2130:	9e 83       	std	Y+6, r25	; 0x06
    2132:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2134:	8d 81       	ldd	r24, Y+5	; 0x05
    2136:	9e 81       	ldd	r25, Y+6	; 0x06
    2138:	00 97       	sbiw	r24, 0x00	; 0
    213a:	69 f7       	brne	.-38     	; 0x2116 <LCD_VoidAddCustomPattern+0x106>
    213c:	14 c0       	rjmp	.+40     	; 0x2166 <LCD_VoidAddCustomPattern+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    213e:	6f 81       	ldd	r22, Y+7	; 0x07
    2140:	78 85       	ldd	r23, Y+8	; 0x08
    2142:	89 85       	ldd	r24, Y+9	; 0x09
    2144:	9a 85       	ldd	r25, Y+10	; 0x0a
    2146:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    214a:	dc 01       	movw	r26, r24
    214c:	cb 01       	movw	r24, r22
    214e:	9e 83       	std	Y+6, r25	; 0x06
    2150:	8d 83       	std	Y+5, r24	; 0x05
    2152:	8d 81       	ldd	r24, Y+5	; 0x05
    2154:	9e 81       	ldd	r25, Y+6	; 0x06
    2156:	9a 83       	std	Y+2, r25	; 0x02
    2158:	89 83       	std	Y+1, r24	; 0x01
    215a:	89 81       	ldd	r24, Y+1	; 0x01
    215c:	9a 81       	ldd	r25, Y+2	; 0x02
    215e:	01 97       	sbiw	r24, 0x01	; 1
    2160:	f1 f7       	brne	.-4      	; 0x215e <LCD_VoidAddCustomPattern+0x14e>
    2162:	9a 83       	std	Y+2, r25	; 0x02
    2164:	89 83       	std	Y+1, r24	; 0x01
		/*Wait more than 1.53ms after ReturnHome Command*/
		_delay_ms(2);
	}
}
    2166:	64 96       	adiw	r28, 0x14	; 20
    2168:	0f b6       	in	r0, 0x3f	; 63
    216a:	f8 94       	cli
    216c:	de bf       	out	0x3e, r29	; 62
    216e:	0f be       	out	0x3f, r0	; 63
    2170:	cd bf       	out	0x3d, r28	; 61
    2172:	cf 91       	pop	r28
    2174:	df 91       	pop	r29
    2176:	08 95       	ret

00002178 <LCD_VoidCustomDisplay>:
void LCD_VoidCustomDisplay(u8 Local_CGRAMIndex, u8 Local_RowPosition, u8 Local_ColPosition)
{
    2178:	df 93       	push	r29
    217a:	cf 93       	push	r28
    217c:	00 d0       	rcall	.+0      	; 0x217e <LCD_VoidCustomDisplay+0x6>
    217e:	0f 92       	push	r0
    2180:	cd b7       	in	r28, 0x3d	; 61
    2182:	de b7       	in	r29, 0x3e	; 62
    2184:	89 83       	std	Y+1, r24	; 0x01
    2186:	6a 83       	std	Y+2, r22	; 0x02
    2188:	4b 83       	std	Y+3, r20	; 0x03
	LCD_VoidStartFrom(Local_RowPosition, Local_ColPosition);
    218a:	8a 81       	ldd	r24, Y+2	; 0x02
    218c:	6b 81       	ldd	r22, Y+3	; 0x03
    218e:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <LCD_VoidStartFrom>
	LCD_VoidSendChar(Local_CGRAMIndex);
    2192:	89 81       	ldd	r24, Y+1	; 0x01
    2194:	0e 94 b4 0b 	call	0x1768	; 0x1768 <LCD_VoidSendChar>
}
    2198:	0f 90       	pop	r0
    219a:	0f 90       	pop	r0
    219c:	0f 90       	pop	r0
    219e:	cf 91       	pop	r28
    21a0:	df 91       	pop	r29
    21a2:	08 95       	ret

000021a4 <LCD_VoidRightShift>:
void LCD_VoidRightShift (char *Ref_string)
{
    21a4:	df 93       	push	r29
    21a6:	cf 93       	push	r28
    21a8:	cd b7       	in	r28, 0x3d	; 61
    21aa:	de b7       	in	r29, 0x3e	; 62
    21ac:	ae 97       	sbiw	r28, 0x2e	; 46
    21ae:	0f b6       	in	r0, 0x3f	; 63
    21b0:	f8 94       	cli
    21b2:	de bf       	out	0x3e, r29	; 62
    21b4:	0f be       	out	0x3f, r0	; 63
    21b6:	cd bf       	out	0x3d, r28	; 61
    21b8:	9e a7       	std	Y+46, r25	; 0x2e
    21ba:	8d a7       	std	Y+45, r24	; 0x2d
	u8 Local_RowPosition = 0;
    21bc:	1c a6       	std	Y+44, r1	; 0x2c
	u8 Local_ColPosition = 0;
    21be:	1b a6       	std	Y+43, r1	; 0x2b
    21c0:	84 c0       	rjmp	.+264    	; 0x22ca <LCD_VoidRightShift+0x126>
	while(1){
		while(Local_RowPosition == Line_1)
		{
			LCD_VoidSendStringFromPos(Ref_string,0,0);
    21c2:	8d a5       	ldd	r24, Y+45	; 0x2d
    21c4:	9e a5       	ldd	r25, Y+46	; 0x2e
    21c6:	60 e0       	ldi	r22, 0x00	; 0
    21c8:	40 e0       	ldi	r20, 0x00	; 0
    21ca:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <LCD_VoidSendStringFromPos>
			LCD_VoidSendCommand(LCD_DisplayShift);
    21ce:	8c e1       	ldi	r24, 0x1C	; 28
    21d0:	0e 94 92 0b 	call	0x1724	; 0x1724 <LCD_VoidSendCommand>
    21d4:	80 e0       	ldi	r24, 0x00	; 0
    21d6:	90 e0       	ldi	r25, 0x00	; 0
    21d8:	aa e7       	ldi	r26, 0x7A	; 122
    21da:	b3 e4       	ldi	r27, 0x43	; 67
    21dc:	8f a3       	std	Y+39, r24	; 0x27
    21de:	98 a7       	std	Y+40, r25	; 0x28
    21e0:	a9 a7       	std	Y+41, r26	; 0x29
    21e2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21e4:	6f a1       	ldd	r22, Y+39	; 0x27
    21e6:	78 a5       	ldd	r23, Y+40	; 0x28
    21e8:	89 a5       	ldd	r24, Y+41	; 0x29
    21ea:	9a a5       	ldd	r25, Y+42	; 0x2a
    21ec:	20 e0       	ldi	r18, 0x00	; 0
    21ee:	30 e0       	ldi	r19, 0x00	; 0
    21f0:	4a ef       	ldi	r20, 0xFA	; 250
    21f2:	54 e4       	ldi	r21, 0x44	; 68
    21f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21f8:	dc 01       	movw	r26, r24
    21fa:	cb 01       	movw	r24, r22
    21fc:	8b a3       	std	Y+35, r24	; 0x23
    21fe:	9c a3       	std	Y+36, r25	; 0x24
    2200:	ad a3       	std	Y+37, r26	; 0x25
    2202:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2204:	6b a1       	ldd	r22, Y+35	; 0x23
    2206:	7c a1       	ldd	r23, Y+36	; 0x24
    2208:	8d a1       	ldd	r24, Y+37	; 0x25
    220a:	9e a1       	ldd	r25, Y+38	; 0x26
    220c:	20 e0       	ldi	r18, 0x00	; 0
    220e:	30 e0       	ldi	r19, 0x00	; 0
    2210:	40 e8       	ldi	r20, 0x80	; 128
    2212:	5f e3       	ldi	r21, 0x3F	; 63
    2214:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2218:	88 23       	and	r24, r24
    221a:	2c f4       	brge	.+10     	; 0x2226 <LCD_VoidRightShift+0x82>
		__ticks = 1;
    221c:	81 e0       	ldi	r24, 0x01	; 1
    221e:	90 e0       	ldi	r25, 0x00	; 0
    2220:	9a a3       	std	Y+34, r25	; 0x22
    2222:	89 a3       	std	Y+33, r24	; 0x21
    2224:	3f c0       	rjmp	.+126    	; 0x22a4 <LCD_VoidRightShift+0x100>
	else if (__tmp > 65535)
    2226:	6b a1       	ldd	r22, Y+35	; 0x23
    2228:	7c a1       	ldd	r23, Y+36	; 0x24
    222a:	8d a1       	ldd	r24, Y+37	; 0x25
    222c:	9e a1       	ldd	r25, Y+38	; 0x26
    222e:	20 e0       	ldi	r18, 0x00	; 0
    2230:	3f ef       	ldi	r19, 0xFF	; 255
    2232:	4f e7       	ldi	r20, 0x7F	; 127
    2234:	57 e4       	ldi	r21, 0x47	; 71
    2236:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    223a:	18 16       	cp	r1, r24
    223c:	4c f5       	brge	.+82     	; 0x2290 <LCD_VoidRightShift+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    223e:	6f a1       	ldd	r22, Y+39	; 0x27
    2240:	78 a5       	ldd	r23, Y+40	; 0x28
    2242:	89 a5       	ldd	r24, Y+41	; 0x29
    2244:	9a a5       	ldd	r25, Y+42	; 0x2a
    2246:	20 e0       	ldi	r18, 0x00	; 0
    2248:	30 e0       	ldi	r19, 0x00	; 0
    224a:	40 e2       	ldi	r20, 0x20	; 32
    224c:	51 e4       	ldi	r21, 0x41	; 65
    224e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2252:	dc 01       	movw	r26, r24
    2254:	cb 01       	movw	r24, r22
    2256:	bc 01       	movw	r22, r24
    2258:	cd 01       	movw	r24, r26
    225a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    225e:	dc 01       	movw	r26, r24
    2260:	cb 01       	movw	r24, r22
    2262:	9a a3       	std	Y+34, r25	; 0x22
    2264:	89 a3       	std	Y+33, r24	; 0x21
    2266:	0f c0       	rjmp	.+30     	; 0x2286 <LCD_VoidRightShift+0xe2>
    2268:	88 ec       	ldi	r24, 0xC8	; 200
    226a:	90 e0       	ldi	r25, 0x00	; 0
    226c:	98 a3       	std	Y+32, r25	; 0x20
    226e:	8f 8f       	std	Y+31, r24	; 0x1f
    2270:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2272:	98 a1       	ldd	r25, Y+32	; 0x20
    2274:	01 97       	sbiw	r24, 0x01	; 1
    2276:	f1 f7       	brne	.-4      	; 0x2274 <LCD_VoidRightShift+0xd0>
    2278:	98 a3       	std	Y+32, r25	; 0x20
    227a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    227c:	89 a1       	ldd	r24, Y+33	; 0x21
    227e:	9a a1       	ldd	r25, Y+34	; 0x22
    2280:	01 97       	sbiw	r24, 0x01	; 1
    2282:	9a a3       	std	Y+34, r25	; 0x22
    2284:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2286:	89 a1       	ldd	r24, Y+33	; 0x21
    2288:	9a a1       	ldd	r25, Y+34	; 0x22
    228a:	00 97       	sbiw	r24, 0x00	; 0
    228c:	69 f7       	brne	.-38     	; 0x2268 <LCD_VoidRightShift+0xc4>
    228e:	14 c0       	rjmp	.+40     	; 0x22b8 <LCD_VoidRightShift+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2290:	6b a1       	ldd	r22, Y+35	; 0x23
    2292:	7c a1       	ldd	r23, Y+36	; 0x24
    2294:	8d a1       	ldd	r24, Y+37	; 0x25
    2296:	9e a1       	ldd	r25, Y+38	; 0x26
    2298:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    229c:	dc 01       	movw	r26, r24
    229e:	cb 01       	movw	r24, r22
    22a0:	9a a3       	std	Y+34, r25	; 0x22
    22a2:	89 a3       	std	Y+33, r24	; 0x21
    22a4:	89 a1       	ldd	r24, Y+33	; 0x21
    22a6:	9a a1       	ldd	r25, Y+34	; 0x22
    22a8:	9e 8f       	std	Y+30, r25	; 0x1e
    22aa:	8d 8f       	std	Y+29, r24	; 0x1d
    22ac:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22ae:	9e 8d       	ldd	r25, Y+30	; 0x1e
    22b0:	01 97       	sbiw	r24, 0x01	; 1
    22b2:	f1 f7       	brne	.-4      	; 0x22b0 <LCD_VoidRightShift+0x10c>
    22b4:	9e 8f       	std	Y+30, r25	; 0x1e
    22b6:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(DisplayShiftDelay);
			Local_ColPosition++;
    22b8:	8b a5       	ldd	r24, Y+43	; 0x2b
    22ba:	8f 5f       	subi	r24, 0xFF	; 255
    22bc:	8b a7       	std	Y+43, r24	; 0x2b
			if (Local_ColPosition == Cols_Number)
    22be:	8b a5       	ldd	r24, Y+43	; 0x2b
    22c0:	80 31       	cpi	r24, 0x10	; 16
    22c2:	19 f4       	brne	.+6      	; 0x22ca <LCD_VoidRightShift+0x126>
			{
				Local_ColPosition = 0;
    22c4:	1b a6       	std	Y+43, r1	; 0x2b
				Local_RowPosition = Line_2;
    22c6:	81 e0       	ldi	r24, 0x01	; 1
    22c8:	8c a7       	std	Y+44, r24	; 0x2c
void LCD_VoidRightShift (char *Ref_string)
{
	u8 Local_RowPosition = 0;
	u8 Local_ColPosition = 0;
	while(1){
		while(Local_RowPosition == Line_1)
    22ca:	8c a5       	ldd	r24, Y+44	; 0x2c
    22cc:	88 23       	and	r24, r24
    22ce:	09 f4       	brne	.+2      	; 0x22d2 <LCD_VoidRightShift+0x12e>
    22d0:	78 cf       	rjmp	.-272    	; 0x21c2 <LCD_VoidRightShift+0x1e>
			{
				Local_ColPosition = 0;
				Local_RowPosition = Line_2;
			}
		}
		LCD_VoidSendCommand(LCD_ClearDisplay);
    22d2:	81 e0       	ldi	r24, 0x01	; 1
    22d4:	0e 94 92 0b 	call	0x1724	; 0x1724 <LCD_VoidSendCommand>
    22d8:	80 e0       	ldi	r24, 0x00	; 0
    22da:	90 e0       	ldi	r25, 0x00	; 0
    22dc:	a0 e0       	ldi	r26, 0x00	; 0
    22de:	b0 e4       	ldi	r27, 0x40	; 64
    22e0:	89 8f       	std	Y+25, r24	; 0x19
    22e2:	9a 8f       	std	Y+26, r25	; 0x1a
    22e4:	ab 8f       	std	Y+27, r26	; 0x1b
    22e6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22e8:	69 8d       	ldd	r22, Y+25	; 0x19
    22ea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22ee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22f0:	20 e0       	ldi	r18, 0x00	; 0
    22f2:	30 e0       	ldi	r19, 0x00	; 0
    22f4:	4a ef       	ldi	r20, 0xFA	; 250
    22f6:	54 e4       	ldi	r21, 0x44	; 68
    22f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22fc:	dc 01       	movw	r26, r24
    22fe:	cb 01       	movw	r24, r22
    2300:	8d 8b       	std	Y+21, r24	; 0x15
    2302:	9e 8b       	std	Y+22, r25	; 0x16
    2304:	af 8b       	std	Y+23, r26	; 0x17
    2306:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2308:	6d 89       	ldd	r22, Y+21	; 0x15
    230a:	7e 89       	ldd	r23, Y+22	; 0x16
    230c:	8f 89       	ldd	r24, Y+23	; 0x17
    230e:	98 8d       	ldd	r25, Y+24	; 0x18
    2310:	20 e0       	ldi	r18, 0x00	; 0
    2312:	30 e0       	ldi	r19, 0x00	; 0
    2314:	40 e8       	ldi	r20, 0x80	; 128
    2316:	5f e3       	ldi	r21, 0x3F	; 63
    2318:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    231c:	88 23       	and	r24, r24
    231e:	2c f4       	brge	.+10     	; 0x232a <LCD_VoidRightShift+0x186>
		__ticks = 1;
    2320:	81 e0       	ldi	r24, 0x01	; 1
    2322:	90 e0       	ldi	r25, 0x00	; 0
    2324:	9c 8b       	std	Y+20, r25	; 0x14
    2326:	8b 8b       	std	Y+19, r24	; 0x13
    2328:	3f c0       	rjmp	.+126    	; 0x23a8 <LCD_VoidRightShift+0x204>
	else if (__tmp > 65535)
    232a:	6d 89       	ldd	r22, Y+21	; 0x15
    232c:	7e 89       	ldd	r23, Y+22	; 0x16
    232e:	8f 89       	ldd	r24, Y+23	; 0x17
    2330:	98 8d       	ldd	r25, Y+24	; 0x18
    2332:	20 e0       	ldi	r18, 0x00	; 0
    2334:	3f ef       	ldi	r19, 0xFF	; 255
    2336:	4f e7       	ldi	r20, 0x7F	; 127
    2338:	57 e4       	ldi	r21, 0x47	; 71
    233a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    233e:	18 16       	cp	r1, r24
    2340:	4c f5       	brge	.+82     	; 0x2394 <LCD_VoidRightShift+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2342:	69 8d       	ldd	r22, Y+25	; 0x19
    2344:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2346:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2348:	9c 8d       	ldd	r25, Y+28	; 0x1c
    234a:	20 e0       	ldi	r18, 0x00	; 0
    234c:	30 e0       	ldi	r19, 0x00	; 0
    234e:	40 e2       	ldi	r20, 0x20	; 32
    2350:	51 e4       	ldi	r21, 0x41	; 65
    2352:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2356:	dc 01       	movw	r26, r24
    2358:	cb 01       	movw	r24, r22
    235a:	bc 01       	movw	r22, r24
    235c:	cd 01       	movw	r24, r26
    235e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2362:	dc 01       	movw	r26, r24
    2364:	cb 01       	movw	r24, r22
    2366:	9c 8b       	std	Y+20, r25	; 0x14
    2368:	8b 8b       	std	Y+19, r24	; 0x13
    236a:	0f c0       	rjmp	.+30     	; 0x238a <LCD_VoidRightShift+0x1e6>
    236c:	88 ec       	ldi	r24, 0xC8	; 200
    236e:	90 e0       	ldi	r25, 0x00	; 0
    2370:	9a 8b       	std	Y+18, r25	; 0x12
    2372:	89 8b       	std	Y+17, r24	; 0x11
    2374:	89 89       	ldd	r24, Y+17	; 0x11
    2376:	9a 89       	ldd	r25, Y+18	; 0x12
    2378:	01 97       	sbiw	r24, 0x01	; 1
    237a:	f1 f7       	brne	.-4      	; 0x2378 <LCD_VoidRightShift+0x1d4>
    237c:	9a 8b       	std	Y+18, r25	; 0x12
    237e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2380:	8b 89       	ldd	r24, Y+19	; 0x13
    2382:	9c 89       	ldd	r25, Y+20	; 0x14
    2384:	01 97       	sbiw	r24, 0x01	; 1
    2386:	9c 8b       	std	Y+20, r25	; 0x14
    2388:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    238a:	8b 89       	ldd	r24, Y+19	; 0x13
    238c:	9c 89       	ldd	r25, Y+20	; 0x14
    238e:	00 97       	sbiw	r24, 0x00	; 0
    2390:	69 f7       	brne	.-38     	; 0x236c <LCD_VoidRightShift+0x1c8>
    2392:	98 c0       	rjmp	.+304    	; 0x24c4 <LCD_VoidRightShift+0x320>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2394:	6d 89       	ldd	r22, Y+21	; 0x15
    2396:	7e 89       	ldd	r23, Y+22	; 0x16
    2398:	8f 89       	ldd	r24, Y+23	; 0x17
    239a:	98 8d       	ldd	r25, Y+24	; 0x18
    239c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23a0:	dc 01       	movw	r26, r24
    23a2:	cb 01       	movw	r24, r22
    23a4:	9c 8b       	std	Y+20, r25	; 0x14
    23a6:	8b 8b       	std	Y+19, r24	; 0x13
    23a8:	8b 89       	ldd	r24, Y+19	; 0x13
    23aa:	9c 89       	ldd	r25, Y+20	; 0x14
    23ac:	98 8b       	std	Y+16, r25	; 0x10
    23ae:	8f 87       	std	Y+15, r24	; 0x0f
    23b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    23b2:	98 89       	ldd	r25, Y+16	; 0x10
    23b4:	01 97       	sbiw	r24, 0x01	; 1
    23b6:	f1 f7       	brne	.-4      	; 0x23b4 <LCD_VoidRightShift+0x210>
    23b8:	98 8b       	std	Y+16, r25	; 0x10
    23ba:	8f 87       	std	Y+15, r24	; 0x0f
    23bc:	83 c0       	rjmp	.+262    	; 0x24c4 <LCD_VoidRightShift+0x320>
		_delay_ms(2);
		while(Local_RowPosition == Line_2)
		{
			LCD_VoidSendStringFromPos(Ref_string,1,0);
    23be:	8d a5       	ldd	r24, Y+45	; 0x2d
    23c0:	9e a5       	ldd	r25, Y+46	; 0x2e
    23c2:	61 e0       	ldi	r22, 0x01	; 1
    23c4:	40 e0       	ldi	r20, 0x00	; 0
    23c6:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <LCD_VoidSendStringFromPos>
			LCD_VoidSendCommand(LCD_DisplayShift);
    23ca:	8c e1       	ldi	r24, 0x1C	; 28
    23cc:	0e 94 92 0b 	call	0x1724	; 0x1724 <LCD_VoidSendCommand>
    23d0:	80 e0       	ldi	r24, 0x00	; 0
    23d2:	90 e0       	ldi	r25, 0x00	; 0
    23d4:	aa e7       	ldi	r26, 0x7A	; 122
    23d6:	b3 e4       	ldi	r27, 0x43	; 67
    23d8:	8b 87       	std	Y+11, r24	; 0x0b
    23da:	9c 87       	std	Y+12, r25	; 0x0c
    23dc:	ad 87       	std	Y+13, r26	; 0x0d
    23de:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    23e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    23e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    23e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    23e8:	20 e0       	ldi	r18, 0x00	; 0
    23ea:	30 e0       	ldi	r19, 0x00	; 0
    23ec:	4a ef       	ldi	r20, 0xFA	; 250
    23ee:	54 e4       	ldi	r21, 0x44	; 68
    23f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23f4:	dc 01       	movw	r26, r24
    23f6:	cb 01       	movw	r24, r22
    23f8:	8f 83       	std	Y+7, r24	; 0x07
    23fa:	98 87       	std	Y+8, r25	; 0x08
    23fc:	a9 87       	std	Y+9, r26	; 0x09
    23fe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2400:	6f 81       	ldd	r22, Y+7	; 0x07
    2402:	78 85       	ldd	r23, Y+8	; 0x08
    2404:	89 85       	ldd	r24, Y+9	; 0x09
    2406:	9a 85       	ldd	r25, Y+10	; 0x0a
    2408:	20 e0       	ldi	r18, 0x00	; 0
    240a:	30 e0       	ldi	r19, 0x00	; 0
    240c:	40 e8       	ldi	r20, 0x80	; 128
    240e:	5f e3       	ldi	r21, 0x3F	; 63
    2410:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2414:	88 23       	and	r24, r24
    2416:	2c f4       	brge	.+10     	; 0x2422 <LCD_VoidRightShift+0x27e>
		__ticks = 1;
    2418:	81 e0       	ldi	r24, 0x01	; 1
    241a:	90 e0       	ldi	r25, 0x00	; 0
    241c:	9e 83       	std	Y+6, r25	; 0x06
    241e:	8d 83       	std	Y+5, r24	; 0x05
    2420:	3f c0       	rjmp	.+126    	; 0x24a0 <LCD_VoidRightShift+0x2fc>
	else if (__tmp > 65535)
    2422:	6f 81       	ldd	r22, Y+7	; 0x07
    2424:	78 85       	ldd	r23, Y+8	; 0x08
    2426:	89 85       	ldd	r24, Y+9	; 0x09
    2428:	9a 85       	ldd	r25, Y+10	; 0x0a
    242a:	20 e0       	ldi	r18, 0x00	; 0
    242c:	3f ef       	ldi	r19, 0xFF	; 255
    242e:	4f e7       	ldi	r20, 0x7F	; 127
    2430:	57 e4       	ldi	r21, 0x47	; 71
    2432:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2436:	18 16       	cp	r1, r24
    2438:	4c f5       	brge	.+82     	; 0x248c <LCD_VoidRightShift+0x2e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    243a:	6b 85       	ldd	r22, Y+11	; 0x0b
    243c:	7c 85       	ldd	r23, Y+12	; 0x0c
    243e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2440:	9e 85       	ldd	r25, Y+14	; 0x0e
    2442:	20 e0       	ldi	r18, 0x00	; 0
    2444:	30 e0       	ldi	r19, 0x00	; 0
    2446:	40 e2       	ldi	r20, 0x20	; 32
    2448:	51 e4       	ldi	r21, 0x41	; 65
    244a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    244e:	dc 01       	movw	r26, r24
    2450:	cb 01       	movw	r24, r22
    2452:	bc 01       	movw	r22, r24
    2454:	cd 01       	movw	r24, r26
    2456:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    245a:	dc 01       	movw	r26, r24
    245c:	cb 01       	movw	r24, r22
    245e:	9e 83       	std	Y+6, r25	; 0x06
    2460:	8d 83       	std	Y+5, r24	; 0x05
    2462:	0f c0       	rjmp	.+30     	; 0x2482 <LCD_VoidRightShift+0x2de>
    2464:	88 ec       	ldi	r24, 0xC8	; 200
    2466:	90 e0       	ldi	r25, 0x00	; 0
    2468:	9c 83       	std	Y+4, r25	; 0x04
    246a:	8b 83       	std	Y+3, r24	; 0x03
    246c:	8b 81       	ldd	r24, Y+3	; 0x03
    246e:	9c 81       	ldd	r25, Y+4	; 0x04
    2470:	01 97       	sbiw	r24, 0x01	; 1
    2472:	f1 f7       	brne	.-4      	; 0x2470 <LCD_VoidRightShift+0x2cc>
    2474:	9c 83       	std	Y+4, r25	; 0x04
    2476:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2478:	8d 81       	ldd	r24, Y+5	; 0x05
    247a:	9e 81       	ldd	r25, Y+6	; 0x06
    247c:	01 97       	sbiw	r24, 0x01	; 1
    247e:	9e 83       	std	Y+6, r25	; 0x06
    2480:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2482:	8d 81       	ldd	r24, Y+5	; 0x05
    2484:	9e 81       	ldd	r25, Y+6	; 0x06
    2486:	00 97       	sbiw	r24, 0x00	; 0
    2488:	69 f7       	brne	.-38     	; 0x2464 <LCD_VoidRightShift+0x2c0>
    248a:	14 c0       	rjmp	.+40     	; 0x24b4 <LCD_VoidRightShift+0x310>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    248c:	6f 81       	ldd	r22, Y+7	; 0x07
    248e:	78 85       	ldd	r23, Y+8	; 0x08
    2490:	89 85       	ldd	r24, Y+9	; 0x09
    2492:	9a 85       	ldd	r25, Y+10	; 0x0a
    2494:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2498:	dc 01       	movw	r26, r24
    249a:	cb 01       	movw	r24, r22
    249c:	9e 83       	std	Y+6, r25	; 0x06
    249e:	8d 83       	std	Y+5, r24	; 0x05
    24a0:	8d 81       	ldd	r24, Y+5	; 0x05
    24a2:	9e 81       	ldd	r25, Y+6	; 0x06
    24a4:	9a 83       	std	Y+2, r25	; 0x02
    24a6:	89 83       	std	Y+1, r24	; 0x01
    24a8:	89 81       	ldd	r24, Y+1	; 0x01
    24aa:	9a 81       	ldd	r25, Y+2	; 0x02
    24ac:	01 97       	sbiw	r24, 0x01	; 1
    24ae:	f1 f7       	brne	.-4      	; 0x24ac <LCD_VoidRightShift+0x308>
    24b0:	9a 83       	std	Y+2, r25	; 0x02
    24b2:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(DisplayShiftDelay);
			Local_ColPosition++;
    24b4:	8b a5       	ldd	r24, Y+43	; 0x2b
    24b6:	8f 5f       	subi	r24, 0xFF	; 255
    24b8:	8b a7       	std	Y+43, r24	; 0x2b
			if (Local_ColPosition == Cols_Number)
    24ba:	8b a5       	ldd	r24, Y+43	; 0x2b
    24bc:	80 31       	cpi	r24, 0x10	; 16
    24be:	11 f4       	brne	.+4      	; 0x24c4 <LCD_VoidRightShift+0x320>
			{
				Local_ColPosition = 0;
    24c0:	1b a6       	std	Y+43, r1	; 0x2b
				Local_RowPosition = Line_1;
    24c2:	1c a6       	std	Y+44, r1	; 0x2c
				Local_RowPosition = Line_2;
			}
		}
		LCD_VoidSendCommand(LCD_ClearDisplay);
		_delay_ms(2);
		while(Local_RowPosition == Line_2)
    24c4:	8c a5       	ldd	r24, Y+44	; 0x2c
    24c6:	81 30       	cpi	r24, 0x01	; 1
    24c8:	09 f4       	brne	.+2      	; 0x24cc <LCD_VoidRightShift+0x328>
    24ca:	79 cf       	rjmp	.-270    	; 0x23be <LCD_VoidRightShift+0x21a>
    24cc:	fe ce       	rjmp	.-516    	; 0x22ca <LCD_VoidRightShift+0x126>

000024ce <Keypad_GetPressedKey>:

/**************************************************************************************************/
/****************************************Function Definition***************************************/

u8 Keypad_GetPressedKey(void)
{
    24ce:	df 93       	push	r29
    24d0:	cf 93       	push	r28
    24d2:	00 d0       	rcall	.+0      	; 0x24d4 <Keypad_GetPressedKey+0x6>
    24d4:	cd b7       	in	r28, 0x3d	; 61
    24d6:	de b7       	in	r29, 0x3e	; 62
	u8 Local_Row, Local_Col;
	while(1)
	{
		for (Local_Col = 0; Local_Col < N_COL; Local_Col++)
    24d8:	19 82       	std	Y+1, r1	; 0x01
    24da:	4c c0       	rjmp	.+152    	; 0x2574 <Keypad_GetPressedKey+0xa6>
		{
			//DIO_VoidSetPortDir(KEYPAD_PORT,(0b00010000 << Local_Col));
			KEYPAD_PORT_DIR = (0b00010000 << Local_Col);
    24dc:	ea e3       	ldi	r30, 0x3A	; 58
    24de:	f0 e0       	ldi	r31, 0x00	; 0
    24e0:	89 81       	ldd	r24, Y+1	; 0x01
    24e2:	28 2f       	mov	r18, r24
    24e4:	30 e0       	ldi	r19, 0x00	; 0
    24e6:	80 e1       	ldi	r24, 0x10	; 16
    24e8:	90 e0       	ldi	r25, 0x00	; 0
    24ea:	02 c0       	rjmp	.+4      	; 0x24f0 <Keypad_GetPressedKey+0x22>
    24ec:	88 0f       	add	r24, r24
    24ee:	99 1f       	adc	r25, r25
    24f0:	2a 95       	dec	r18
    24f2:	e2 f7       	brpl	.-8      	; 0x24ec <Keypad_GetPressedKey+0x1e>
    24f4:	80 83       	st	Z, r24
			//DIO_VoidSetPortValue(KEYPAD_PORT,(~(0b00010000<< Local_Col)));
			KEYPAD_PORT_OUT = (~(0b00010000<< Local_Col));
    24f6:	eb e3       	ldi	r30, 0x3B	; 59
    24f8:	f0 e0       	ldi	r31, 0x00	; 0
    24fa:	89 81       	ldd	r24, Y+1	; 0x01
    24fc:	28 2f       	mov	r18, r24
    24fe:	30 e0       	ldi	r19, 0x00	; 0
    2500:	80 e1       	ldi	r24, 0x10	; 16
    2502:	90 e0       	ldi	r25, 0x00	; 0
    2504:	02 2e       	mov	r0, r18
    2506:	02 c0       	rjmp	.+4      	; 0x250c <Keypad_GetPressedKey+0x3e>
    2508:	88 0f       	add	r24, r24
    250a:	99 1f       	adc	r25, r25
    250c:	0a 94       	dec	r0
    250e:	e2 f7       	brpl	.-8      	; 0x2508 <Keypad_GetPressedKey+0x3a>
    2510:	80 95       	com	r24
    2512:	80 83       	st	Z, r24

			for (Local_Row = 0; Local_Row < N_ROW; Local_Row++)
    2514:	1a 82       	std	Y+2, r1	; 0x02
    2516:	28 c0       	rjmp	.+80     	; 0x2568 <Keypad_GetPressedKey+0x9a>
			{
				if (BIT_IS_CLEAR(KEYPAD_PORT_IN,Local_Row))
    2518:	e9 e3       	ldi	r30, 0x39	; 57
    251a:	f0 e0       	ldi	r31, 0x00	; 0
    251c:	80 81       	ld	r24, Z
    251e:	28 2f       	mov	r18, r24
    2520:	30 e0       	ldi	r19, 0x00	; 0
    2522:	8a 81       	ldd	r24, Y+2	; 0x02
    2524:	88 2f       	mov	r24, r24
    2526:	90 e0       	ldi	r25, 0x00	; 0
    2528:	a9 01       	movw	r20, r18
    252a:	02 c0       	rjmp	.+4      	; 0x2530 <Keypad_GetPressedKey+0x62>
    252c:	55 95       	asr	r21
    252e:	47 95       	ror	r20
    2530:	8a 95       	dec	r24
    2532:	e2 f7       	brpl	.-8      	; 0x252c <Keypad_GetPressedKey+0x5e>
    2534:	ca 01       	movw	r24, r20
    2536:	81 70       	andi	r24, 0x01	; 1
    2538:	90 70       	andi	r25, 0x00	; 0
    253a:	00 97       	sbiw	r24, 0x00	; 0
    253c:	91 f4       	brne	.+36     	; 0x2562 <Keypad_GetPressedKey+0x94>
					#if (N_COL == 3)

					return Keypad_4x3_adjustKeyNumber (((row*N_COL)+col+1));
					#elif (N_COL == 4)

					return Keypad_4x4_adjustKeyNumber (((Local_Row*N_COL)+Local_Col+1));
    253e:	8a 81       	ldd	r24, Y+2	; 0x02
    2540:	88 2f       	mov	r24, r24
    2542:	90 e0       	ldi	r25, 0x00	; 0
    2544:	88 0f       	add	r24, r24
    2546:	99 1f       	adc	r25, r25
    2548:	88 0f       	add	r24, r24
    254a:	99 1f       	adc	r25, r25
    254c:	98 2f       	mov	r25, r24
    254e:	89 81       	ldd	r24, Y+1	; 0x01
    2550:	89 0f       	add	r24, r25
    2552:	8f 5f       	subi	r24, 0xFF	; 255
    2554:	0e 94 bf 12 	call	0x257e	; 0x257e <Keypad_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}
}
    2558:	0f 90       	pop	r0
    255a:	0f 90       	pop	r0
    255c:	cf 91       	pop	r28
    255e:	df 91       	pop	r29
    2560:	08 95       	ret
			//DIO_VoidSetPortDir(KEYPAD_PORT,(0b00010000 << Local_Col));
			KEYPAD_PORT_DIR = (0b00010000 << Local_Col);
			//DIO_VoidSetPortValue(KEYPAD_PORT,(~(0b00010000<< Local_Col)));
			KEYPAD_PORT_OUT = (~(0b00010000<< Local_Col));

			for (Local_Row = 0; Local_Row < N_ROW; Local_Row++)
    2562:	8a 81       	ldd	r24, Y+2	; 0x02
    2564:	8f 5f       	subi	r24, 0xFF	; 255
    2566:	8a 83       	std	Y+2, r24	; 0x02
    2568:	8a 81       	ldd	r24, Y+2	; 0x02
    256a:	84 30       	cpi	r24, 0x04	; 4
    256c:	a8 f2       	brcs	.-86     	; 0x2518 <Keypad_GetPressedKey+0x4a>
u8 Keypad_GetPressedKey(void)
{
	u8 Local_Row, Local_Col;
	while(1)
	{
		for (Local_Col = 0; Local_Col < N_COL; Local_Col++)
    256e:	89 81       	ldd	r24, Y+1	; 0x01
    2570:	8f 5f       	subi	r24, 0xFF	; 255
    2572:	89 83       	std	Y+1, r24	; 0x01
    2574:	89 81       	ldd	r24, Y+1	; 0x01
    2576:	84 30       	cpi	r24, 0x04	; 4
    2578:	08 f4       	brcc	.+2      	; 0x257c <Keypad_GetPressedKey+0xae>
    257a:	b0 cf       	rjmp	.-160    	; 0x24dc <Keypad_GetPressedKey+0xe>
    257c:	ad cf       	rjmp	.-166    	; 0x24d8 <Keypad_GetPressedKey+0xa>

0000257e <Keypad_4x4_adjustKeyNumber>:


#elif (N_COL == 4)

u8 Keypad_4x4_adjustKeyNumber (u8 button_number)
{
    257e:	df 93       	push	r29
    2580:	cf 93       	push	r28
    2582:	00 d0       	rcall	.+0      	; 0x2584 <Keypad_4x4_adjustKeyNumber+0x6>
    2584:	00 d0       	rcall	.+0      	; 0x2586 <Keypad_4x4_adjustKeyNumber+0x8>
    2586:	0f 92       	push	r0
    2588:	cd b7       	in	r28, 0x3d	; 61
    258a:	de b7       	in	r29, 0x3e	; 62
    258c:	89 83       	std	Y+1, r24	; 0x01
	switch (button_number)
    258e:	89 81       	ldd	r24, Y+1	; 0x01
    2590:	28 2f       	mov	r18, r24
    2592:	30 e0       	ldi	r19, 0x00	; 0
    2594:	3c 83       	std	Y+4, r19	; 0x04
    2596:	2b 83       	std	Y+3, r18	; 0x03
    2598:	8b 81       	ldd	r24, Y+3	; 0x03
    259a:	9c 81       	ldd	r25, Y+4	; 0x04
    259c:	88 30       	cpi	r24, 0x08	; 8
    259e:	91 05       	cpc	r25, r1
    25a0:	09 f4       	brne	.+2      	; 0x25a4 <Keypad_4x4_adjustKeyNumber+0x26>
    25a2:	70 c0       	rjmp	.+224    	; 0x2684 <Keypad_4x4_adjustKeyNumber+0x106>
    25a4:	2b 81       	ldd	r18, Y+3	; 0x03
    25a6:	3c 81       	ldd	r19, Y+4	; 0x04
    25a8:	29 30       	cpi	r18, 0x09	; 9
    25aa:	31 05       	cpc	r19, r1
    25ac:	5c f5       	brge	.+86     	; 0x2604 <Keypad_4x4_adjustKeyNumber+0x86>
    25ae:	8b 81       	ldd	r24, Y+3	; 0x03
    25b0:	9c 81       	ldd	r25, Y+4	; 0x04
    25b2:	84 30       	cpi	r24, 0x04	; 4
    25b4:	91 05       	cpc	r25, r1
    25b6:	09 f4       	brne	.+2      	; 0x25ba <Keypad_4x4_adjustKeyNumber+0x3c>
    25b8:	59 c0       	rjmp	.+178    	; 0x266c <Keypad_4x4_adjustKeyNumber+0xee>
    25ba:	2b 81       	ldd	r18, Y+3	; 0x03
    25bc:	3c 81       	ldd	r19, Y+4	; 0x04
    25be:	25 30       	cpi	r18, 0x05	; 5
    25c0:	31 05       	cpc	r19, r1
    25c2:	9c f4       	brge	.+38     	; 0x25ea <Keypad_4x4_adjustKeyNumber+0x6c>
    25c4:	8b 81       	ldd	r24, Y+3	; 0x03
    25c6:	9c 81       	ldd	r25, Y+4	; 0x04
    25c8:	82 30       	cpi	r24, 0x02	; 2
    25ca:	91 05       	cpc	r25, r1
    25cc:	09 f4       	brne	.+2      	; 0x25d0 <Keypad_4x4_adjustKeyNumber+0x52>
    25ce:	48 c0       	rjmp	.+144    	; 0x2660 <Keypad_4x4_adjustKeyNumber+0xe2>
    25d0:	2b 81       	ldd	r18, Y+3	; 0x03
    25d2:	3c 81       	ldd	r19, Y+4	; 0x04
    25d4:	23 30       	cpi	r18, 0x03	; 3
    25d6:	31 05       	cpc	r19, r1
    25d8:	0c f0       	brlt	.+2      	; 0x25dc <Keypad_4x4_adjustKeyNumber+0x5e>
    25da:	45 c0       	rjmp	.+138    	; 0x2666 <Keypad_4x4_adjustKeyNumber+0xe8>
    25dc:	8b 81       	ldd	r24, Y+3	; 0x03
    25de:	9c 81       	ldd	r25, Y+4	; 0x04
    25e0:	81 30       	cpi	r24, 0x01	; 1
    25e2:	91 05       	cpc	r25, r1
    25e4:	09 f4       	brne	.+2      	; 0x25e8 <Keypad_4x4_adjustKeyNumber+0x6a>
    25e6:	39 c0       	rjmp	.+114    	; 0x265a <Keypad_4x4_adjustKeyNumber+0xdc>
    25e8:	67 c0       	rjmp	.+206    	; 0x26b8 <Keypad_4x4_adjustKeyNumber+0x13a>
    25ea:	2b 81       	ldd	r18, Y+3	; 0x03
    25ec:	3c 81       	ldd	r19, Y+4	; 0x04
    25ee:	26 30       	cpi	r18, 0x06	; 6
    25f0:	31 05       	cpc	r19, r1
    25f2:	09 f4       	brne	.+2      	; 0x25f6 <Keypad_4x4_adjustKeyNumber+0x78>
    25f4:	41 c0       	rjmp	.+130    	; 0x2678 <Keypad_4x4_adjustKeyNumber+0xfa>
    25f6:	8b 81       	ldd	r24, Y+3	; 0x03
    25f8:	9c 81       	ldd	r25, Y+4	; 0x04
    25fa:	87 30       	cpi	r24, 0x07	; 7
    25fc:	91 05       	cpc	r25, r1
    25fe:	0c f0       	brlt	.+2      	; 0x2602 <Keypad_4x4_adjustKeyNumber+0x84>
    2600:	3e c0       	rjmp	.+124    	; 0x267e <Keypad_4x4_adjustKeyNumber+0x100>
    2602:	37 c0       	rjmp	.+110    	; 0x2672 <Keypad_4x4_adjustKeyNumber+0xf4>
    2604:	2b 81       	ldd	r18, Y+3	; 0x03
    2606:	3c 81       	ldd	r19, Y+4	; 0x04
    2608:	2c 30       	cpi	r18, 0x0C	; 12
    260a:	31 05       	cpc	r19, r1
    260c:	09 f4       	brne	.+2      	; 0x2610 <Keypad_4x4_adjustKeyNumber+0x92>
    260e:	46 c0       	rjmp	.+140    	; 0x269c <Keypad_4x4_adjustKeyNumber+0x11e>
    2610:	8b 81       	ldd	r24, Y+3	; 0x03
    2612:	9c 81       	ldd	r25, Y+4	; 0x04
    2614:	8d 30       	cpi	r24, 0x0D	; 13
    2616:	91 05       	cpc	r25, r1
    2618:	5c f4       	brge	.+22     	; 0x2630 <Keypad_4x4_adjustKeyNumber+0xb2>
    261a:	2b 81       	ldd	r18, Y+3	; 0x03
    261c:	3c 81       	ldd	r19, Y+4	; 0x04
    261e:	2a 30       	cpi	r18, 0x0A	; 10
    2620:	31 05       	cpc	r19, r1
    2622:	b1 f1       	breq	.+108    	; 0x2690 <Keypad_4x4_adjustKeyNumber+0x112>
    2624:	8b 81       	ldd	r24, Y+3	; 0x03
    2626:	9c 81       	ldd	r25, Y+4	; 0x04
    2628:	8b 30       	cpi	r24, 0x0B	; 11
    262a:	91 05       	cpc	r25, r1
    262c:	a4 f5       	brge	.+104    	; 0x2696 <Keypad_4x4_adjustKeyNumber+0x118>
    262e:	2d c0       	rjmp	.+90     	; 0x268a <Keypad_4x4_adjustKeyNumber+0x10c>
    2630:	2b 81       	ldd	r18, Y+3	; 0x03
    2632:	3c 81       	ldd	r19, Y+4	; 0x04
    2634:	2e 30       	cpi	r18, 0x0E	; 14
    2636:	31 05       	cpc	r19, r1
    2638:	b9 f1       	breq	.+110    	; 0x26a8 <Keypad_4x4_adjustKeyNumber+0x12a>
    263a:	8b 81       	ldd	r24, Y+3	; 0x03
    263c:	9c 81       	ldd	r25, Y+4	; 0x04
    263e:	8e 30       	cpi	r24, 0x0E	; 14
    2640:	91 05       	cpc	r25, r1
    2642:	7c f1       	brlt	.+94     	; 0x26a2 <Keypad_4x4_adjustKeyNumber+0x124>
    2644:	2b 81       	ldd	r18, Y+3	; 0x03
    2646:	3c 81       	ldd	r19, Y+4	; 0x04
    2648:	2f 30       	cpi	r18, 0x0F	; 15
    264a:	31 05       	cpc	r19, r1
    264c:	79 f1       	breq	.+94     	; 0x26ac <Keypad_4x4_adjustKeyNumber+0x12e>
    264e:	8b 81       	ldd	r24, Y+3	; 0x03
    2650:	9c 81       	ldd	r25, Y+4	; 0x04
    2652:	80 31       	cpi	r24, 0x10	; 16
    2654:	91 05       	cpc	r25, r1
    2656:	69 f1       	breq	.+90     	; 0x26b2 <Keypad_4x4_adjustKeyNumber+0x134>
    2658:	2f c0       	rjmp	.+94     	; 0x26b8 <Keypad_4x4_adjustKeyNumber+0x13a>
	{
	case 1:		return 7;
    265a:	97 e0       	ldi	r25, 0x07	; 7
    265c:	9a 83       	std	Y+2, r25	; 0x02
    265e:	2d c0       	rjmp	.+90     	; 0x26ba <Keypad_4x4_adjustKeyNumber+0x13c>
				break;
	case 2:		return 8;
    2660:	28 e0       	ldi	r18, 0x08	; 8
    2662:	2a 83       	std	Y+2, r18	; 0x02
    2664:	2a c0       	rjmp	.+84     	; 0x26ba <Keypad_4x4_adjustKeyNumber+0x13c>
				break;
	case 3:		return 9;
    2666:	39 e0       	ldi	r19, 0x09	; 9
    2668:	3a 83       	std	Y+2, r19	; 0x02
    266a:	27 c0       	rjmp	.+78     	; 0x26ba <Keypad_4x4_adjustKeyNumber+0x13c>
				break;
	case 4:		return '/';
    266c:	8f e2       	ldi	r24, 0x2F	; 47
    266e:	8a 83       	std	Y+2, r24	; 0x02
    2670:	24 c0       	rjmp	.+72     	; 0x26ba <Keypad_4x4_adjustKeyNumber+0x13c>
				break;
	case 5:		return 4;
    2672:	94 e0       	ldi	r25, 0x04	; 4
    2674:	9a 83       	std	Y+2, r25	; 0x02
    2676:	21 c0       	rjmp	.+66     	; 0x26ba <Keypad_4x4_adjustKeyNumber+0x13c>
				break;
	case 6:		return 5;
    2678:	25 e0       	ldi	r18, 0x05	; 5
    267a:	2a 83       	std	Y+2, r18	; 0x02
    267c:	1e c0       	rjmp	.+60     	; 0x26ba <Keypad_4x4_adjustKeyNumber+0x13c>
				break;
	case 7:		return 6;
    267e:	36 e0       	ldi	r19, 0x06	; 6
    2680:	3a 83       	std	Y+2, r19	; 0x02
    2682:	1b c0       	rjmp	.+54     	; 0x26ba <Keypad_4x4_adjustKeyNumber+0x13c>
				break;
	case 8:		return '*';
    2684:	8a e2       	ldi	r24, 0x2A	; 42
    2686:	8a 83       	std	Y+2, r24	; 0x02
    2688:	18 c0       	rjmp	.+48     	; 0x26ba <Keypad_4x4_adjustKeyNumber+0x13c>
				break;
	case 9:		return 1;
    268a:	91 e0       	ldi	r25, 0x01	; 1
    268c:	9a 83       	std	Y+2, r25	; 0x02
    268e:	15 c0       	rjmp	.+42     	; 0x26ba <Keypad_4x4_adjustKeyNumber+0x13c>
				break;
	case 10:	return 2;
    2690:	22 e0       	ldi	r18, 0x02	; 2
    2692:	2a 83       	std	Y+2, r18	; 0x02
    2694:	12 c0       	rjmp	.+36     	; 0x26ba <Keypad_4x4_adjustKeyNumber+0x13c>
				break;
	case 11:	return 3;
    2696:	33 e0       	ldi	r19, 0x03	; 3
    2698:	3a 83       	std	Y+2, r19	; 0x02
    269a:	0f c0       	rjmp	.+30     	; 0x26ba <Keypad_4x4_adjustKeyNumber+0x13c>
				break;
	case 12:	return '-';
    269c:	8d e2       	ldi	r24, 0x2D	; 45
    269e:	8a 83       	std	Y+2, r24	; 0x02
    26a0:	0c c0       	rjmp	.+24     	; 0x26ba <Keypad_4x4_adjustKeyNumber+0x13c>
				break;
	case 13:	return 'c';
    26a2:	93 e6       	ldi	r25, 0x63	; 99
    26a4:	9a 83       	std	Y+2, r25	; 0x02
    26a6:	09 c0       	rjmp	.+18     	; 0x26ba <Keypad_4x4_adjustKeyNumber+0x13c>
				break;
	case 14:	return 0;
    26a8:	1a 82       	std	Y+2, r1	; 0x02
    26aa:	07 c0       	rjmp	.+14     	; 0x26ba <Keypad_4x4_adjustKeyNumber+0x13c>
				break;
	case 15:	return '=';
    26ac:	2d e3       	ldi	r18, 0x3D	; 61
    26ae:	2a 83       	std	Y+2, r18	; 0x02
    26b0:	04 c0       	rjmp	.+8      	; 0x26ba <Keypad_4x4_adjustKeyNumber+0x13c>
				break;
	case 16:	return '+';
    26b2:	3b e2       	ldi	r19, 0x2B	; 43
    26b4:	3a 83       	std	Y+2, r19	; 0x02
    26b6:	01 c0       	rjmp	.+2      	; 0x26ba <Keypad_4x4_adjustKeyNumber+0x13c>
    26b8:	02 c0       	rjmp	.+4      	; 0x26be <Keypad_4x4_adjustKeyNumber+0x140>
				break;
	}
}
    26ba:	8a 81       	ldd	r24, Y+2	; 0x02
    26bc:	8d 83       	std	Y+5, r24	; 0x05
    26be:	8d 81       	ldd	r24, Y+5	; 0x05
    26c0:	0f 90       	pop	r0
    26c2:	0f 90       	pop	r0
    26c4:	0f 90       	pop	r0
    26c6:	0f 90       	pop	r0
    26c8:	0f 90       	pop	r0
    26ca:	cf 91       	pop	r28
    26cc:	df 91       	pop	r29
    26ce:	08 95       	ret

000026d0 <main>:

//void UART_Interrupt_Fun (void);

#include <util/delay.h>
void main (void)
{
    26d0:	0f 93       	push	r16
    26d2:	1f 93       	push	r17
    26d4:	df 93       	push	r29
    26d6:	cf 93       	push	r28
    26d8:	cd b7       	in	r28, 0x3d	; 61
    26da:	de b7       	in	r29, 0x3e	; 62
    26dc:	ce 5f       	subi	r28, 0xFE	; 254
    26de:	d1 40       	sbci	r29, 0x01	; 1
    26e0:	0f b6       	in	r0, 0x3f	; 63
    26e2:	f8 94       	cli
    26e4:	de bf       	out	0x3e, r29	; 62
    26e6:	0f be       	out	0x3f, r0	; 63
    26e8:	cd bf       	out	0x3d, r28	; 61
	//UART_CallBackFunctionRX(UART_Interrupt_Fun);

	UART_tstrConfiguration object ;
	object.UART_u8Mode = UART_u8_Recieve;
    26ea:	fe 01       	movw	r30, r28
    26ec:	e9 50       	subi	r30, 0x09	; 9
    26ee:	fe 4f       	sbci	r31, 0xFE	; 254
    26f0:	80 e1       	ldi	r24, 0x10	; 16
    26f2:	83 83       	std	Z+3, r24	; 0x03
	object.UART_u16BaudRate = UART_u16_BAUD_RATE_9600;
    26f4:	fe 01       	movw	r30, r28
    26f6:	e9 50       	subi	r30, 0x09	; 9
    26f8:	fe 4f       	sbci	r31, 0xFE	; 254
    26fa:	87 e6       	ldi	r24, 0x67	; 103
    26fc:	90 e0       	ldi	r25, 0x00	; 0
    26fe:	95 83       	std	Z+5, r25	; 0x05
    2700:	84 83       	std	Z+4, r24	; 0x04
	object.UART_u8DataBits = UART_u8_EIGHT_DATA_BITS;
    2702:	fe 01       	movw	r30, r28
    2704:	e9 50       	subi	r30, 0x09	; 9
    2706:	fe 4f       	sbci	r31, 0xFE	; 254
    2708:	86 e0       	ldi	r24, 0x06	; 6
    270a:	82 83       	std	Z+2, r24	; 0x02
	object.UART_u8PStopBit = UART_u8_ONE_STOP_BIT;
    270c:	fe 01       	movw	r30, r28
    270e:	e9 50       	subi	r30, 0x09	; 9
    2710:	fe 4f       	sbci	r31, 0xFE	; 254
    2712:	11 82       	std	Z+1, r1	; 0x01
	object.UART_u8ParityBits = UART_u8_DISABLED_PARITY;
    2714:	fe 01       	movw	r30, r28
    2716:	e9 50       	subi	r30, 0x09	; 9
    2718:	fe 4f       	sbci	r31, 0xFE	; 254
    271a:	10 82       	st	Z, r1

	GIE_VoidEnable();
    271c:	0e 94 3f 07 	call	0xe7e	; 0xe7e <GIE_VoidEnable>
	UART_enuInit(&object);
    2720:	ce 01       	movw	r24, r28
    2722:	89 50       	subi	r24, 0x09	; 9
    2724:	9e 4f       	sbci	r25, 0xFE	; 254
    2726:	0e 94 a3 05 	call	0xb46	; 0xb46 <UART_enuInit>
	u8 UART_RecValue = 0;
    272a:	fe 01       	movw	r30, r28
    272c:	ea 50       	subi	r30, 0x0A	; 10
    272e:	fe 4f       	sbci	r31, 0xFE	; 254
    2730:	10 82       	st	Z, r1

	u8 Key_Value;
	u8 Chosen_Mode;
	u32 Saved_Pass = 1234;
    2732:	fe 01       	movw	r30, r28
    2734:	e0 51       	subi	r30, 0x10	; 16
    2736:	fe 4f       	sbci	r31, 0xFE	; 254
    2738:	82 ed       	ldi	r24, 0xD2	; 210
    273a:	94 e0       	ldi	r25, 0x04	; 4
    273c:	a0 e0       	ldi	r26, 0x00	; 0
    273e:	b0 e0       	ldi	r27, 0x00	; 0
    2740:	80 83       	st	Z, r24
    2742:	91 83       	std	Z+1, r25	; 0x01
    2744:	a2 83       	std	Z+2, r26	; 0x02
    2746:	b3 83       	std	Z+3, r27	; 0x03
	u32 Reversed_Pass = 4321;
    2748:	fe 01       	movw	r30, r28
    274a:	e4 51       	subi	r30, 0x14	; 20
    274c:	fe 4f       	sbci	r31, 0xFE	; 254
    274e:	81 ee       	ldi	r24, 0xE1	; 225
    2750:	90 e1       	ldi	r25, 0x10	; 16
    2752:	a0 e0       	ldi	r26, 0x00	; 0
    2754:	b0 e0       	ldi	r27, 0x00	; 0
    2756:	80 83       	st	Z, r24
    2758:	91 83       	std	Z+1, r25	; 0x01
    275a:	a2 83       	std	Z+2, r26	; 0x02
    275c:	b3 83       	std	Z+3, r27	; 0x03
	u32 Get_Reversed_Pass = 0;
    275e:	fe 01       	movw	r30, r28
    2760:	e8 51       	subi	r30, 0x18	; 24
    2762:	fe 4f       	sbci	r31, 0xFE	; 254
    2764:	10 82       	st	Z, r1
    2766:	11 82       	std	Z+1, r1	; 0x01
    2768:	12 82       	std	Z+2, r1	; 0x02
    276a:	13 82       	std	Z+3, r1	; 0x03
	u32 Temp_Pass = 0;
    276c:	fe 01       	movw	r30, r28
    276e:	ec 51       	subi	r30, 0x1C	; 28
    2770:	fe 4f       	sbci	r31, 0xFE	; 254
    2772:	10 82       	st	Z, r1
    2774:	11 82       	std	Z+1, r1	; 0x01
    2776:	12 82       	std	Z+2, r1	; 0x02
    2778:	13 82       	std	Z+3, r1	; 0x03
	u32 Comp_Pass = 0;
    277a:	fe 01       	movw	r30, r28
    277c:	e0 52       	subi	r30, 0x20	; 32
    277e:	fe 4f       	sbci	r31, 0xFE	; 254
    2780:	10 82       	st	Z, r1
    2782:	11 82       	std	Z+1, r1	; 0x01
    2784:	12 82       	std	Z+2, r1	; 0x02
    2786:	13 82       	std	Z+3, r1	; 0x03
	u8 motor_steps[2] = {6,3};
    2788:	fe 01       	movw	r30, r28
    278a:	e3 50       	subi	r30, 0x03	; 3
    278c:	fe 4f       	sbci	r31, 0xFE	; 254
    278e:	86 e0       	ldi	r24, 0x06	; 6
    2790:	80 83       	st	Z, r24
    2792:	fe 01       	movw	r30, r28
    2794:	e3 50       	subi	r30, 0x03	; 3
    2796:	fe 4f       	sbci	r31, 0xFE	; 254
    2798:	83 e0       	ldi	r24, 0x03	; 3
    279a:	81 83       	std	Z+1, r24	; 0x01
	DIO_VoidSetPortDir(Group_C,0x0f);
    279c:	83 e0       	ldi	r24, 0x03	; 3
    279e:	6f e0       	ldi	r22, 0x0F	; 15
    27a0:	0e 94 f7 09 	call	0x13ee	; 0x13ee <DIO_VoidSetPortDir>
	DIO_VoidSetPortValue(Group_C,0xf0);
    27a4:	83 e0       	ldi	r24, 0x03	; 3
    27a6:	60 ef       	ldi	r22, 0xF0	; 240
    27a8:	0e 94 39 0a 	call	0x1472	; 0x1472 <DIO_VoidSetPortValue>

	LCD_Void8BitInit();
    27ac:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <LCD_Void8BitInit>
	LCD_VoidSendStringFromPos("Welcome Home",0,2);
    27b0:	80 e6       	ldi	r24, 0x60	; 96
    27b2:	90 e0       	ldi	r25, 0x00	; 0
    27b4:	60 e0       	ldi	r22, 0x00	; 0
    27b6:	42 e0       	ldi	r20, 0x02	; 2
    27b8:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <LCD_VoidSendStringFromPos>
    27bc:	fe 01       	movw	r30, r28
    27be:	e7 52       	subi	r30, 0x27	; 39
    27c0:	fe 4f       	sbci	r31, 0xFE	; 254
    27c2:	80 e0       	ldi	r24, 0x00	; 0
    27c4:	90 e0       	ldi	r25, 0x00	; 0
    27c6:	aa ef       	ldi	r26, 0xFA	; 250
    27c8:	b3 e4       	ldi	r27, 0x43	; 67
    27ca:	80 83       	st	Z, r24
    27cc:	91 83       	std	Z+1, r25	; 0x01
    27ce:	a2 83       	std	Z+2, r26	; 0x02
    27d0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27d2:	8e 01       	movw	r16, r28
    27d4:	0b 52       	subi	r16, 0x2B	; 43
    27d6:	1e 4f       	sbci	r17, 0xFE	; 254
    27d8:	fe 01       	movw	r30, r28
    27da:	e7 52       	subi	r30, 0x27	; 39
    27dc:	fe 4f       	sbci	r31, 0xFE	; 254
    27de:	60 81       	ld	r22, Z
    27e0:	71 81       	ldd	r23, Z+1	; 0x01
    27e2:	82 81       	ldd	r24, Z+2	; 0x02
    27e4:	93 81       	ldd	r25, Z+3	; 0x03
    27e6:	20 e0       	ldi	r18, 0x00	; 0
    27e8:	30 e0       	ldi	r19, 0x00	; 0
    27ea:	4a ef       	ldi	r20, 0xFA	; 250
    27ec:	54 e4       	ldi	r21, 0x44	; 68
    27ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27f2:	dc 01       	movw	r26, r24
    27f4:	cb 01       	movw	r24, r22
    27f6:	f8 01       	movw	r30, r16
    27f8:	80 83       	st	Z, r24
    27fa:	91 83       	std	Z+1, r25	; 0x01
    27fc:	a2 83       	std	Z+2, r26	; 0x02
    27fe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2800:	fe 01       	movw	r30, r28
    2802:	eb 52       	subi	r30, 0x2B	; 43
    2804:	fe 4f       	sbci	r31, 0xFE	; 254
    2806:	60 81       	ld	r22, Z
    2808:	71 81       	ldd	r23, Z+1	; 0x01
    280a:	82 81       	ldd	r24, Z+2	; 0x02
    280c:	93 81       	ldd	r25, Z+3	; 0x03
    280e:	20 e0       	ldi	r18, 0x00	; 0
    2810:	30 e0       	ldi	r19, 0x00	; 0
    2812:	40 e8       	ldi	r20, 0x80	; 128
    2814:	5f e3       	ldi	r21, 0x3F	; 63
    2816:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    281a:	88 23       	and	r24, r24
    281c:	44 f4       	brge	.+16     	; 0x282e <main+0x15e>
		__ticks = 1;
    281e:	fe 01       	movw	r30, r28
    2820:	ed 52       	subi	r30, 0x2D	; 45
    2822:	fe 4f       	sbci	r31, 0xFE	; 254
    2824:	81 e0       	ldi	r24, 0x01	; 1
    2826:	90 e0       	ldi	r25, 0x00	; 0
    2828:	91 83       	std	Z+1, r25	; 0x01
    282a:	80 83       	st	Z, r24
    282c:	64 c0       	rjmp	.+200    	; 0x28f6 <main+0x226>
	else if (__tmp > 65535)
    282e:	fe 01       	movw	r30, r28
    2830:	eb 52       	subi	r30, 0x2B	; 43
    2832:	fe 4f       	sbci	r31, 0xFE	; 254
    2834:	60 81       	ld	r22, Z
    2836:	71 81       	ldd	r23, Z+1	; 0x01
    2838:	82 81       	ldd	r24, Z+2	; 0x02
    283a:	93 81       	ldd	r25, Z+3	; 0x03
    283c:	20 e0       	ldi	r18, 0x00	; 0
    283e:	3f ef       	ldi	r19, 0xFF	; 255
    2840:	4f e7       	ldi	r20, 0x7F	; 127
    2842:	57 e4       	ldi	r21, 0x47	; 71
    2844:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2848:	18 16       	cp	r1, r24
    284a:	0c f0       	brlt	.+2      	; 0x284e <main+0x17e>
    284c:	43 c0       	rjmp	.+134    	; 0x28d4 <main+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    284e:	fe 01       	movw	r30, r28
    2850:	e7 52       	subi	r30, 0x27	; 39
    2852:	fe 4f       	sbci	r31, 0xFE	; 254
    2854:	60 81       	ld	r22, Z
    2856:	71 81       	ldd	r23, Z+1	; 0x01
    2858:	82 81       	ldd	r24, Z+2	; 0x02
    285a:	93 81       	ldd	r25, Z+3	; 0x03
    285c:	20 e0       	ldi	r18, 0x00	; 0
    285e:	30 e0       	ldi	r19, 0x00	; 0
    2860:	40 e2       	ldi	r20, 0x20	; 32
    2862:	51 e4       	ldi	r21, 0x41	; 65
    2864:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2868:	dc 01       	movw	r26, r24
    286a:	cb 01       	movw	r24, r22
    286c:	8e 01       	movw	r16, r28
    286e:	0d 52       	subi	r16, 0x2D	; 45
    2870:	1e 4f       	sbci	r17, 0xFE	; 254
    2872:	bc 01       	movw	r22, r24
    2874:	cd 01       	movw	r24, r26
    2876:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    287a:	dc 01       	movw	r26, r24
    287c:	cb 01       	movw	r24, r22
    287e:	f8 01       	movw	r30, r16
    2880:	91 83       	std	Z+1, r25	; 0x01
    2882:	80 83       	st	Z, r24
    2884:	1f c0       	rjmp	.+62     	; 0x28c4 <main+0x1f4>
    2886:	fe 01       	movw	r30, r28
    2888:	ef 52       	subi	r30, 0x2F	; 47
    288a:	fe 4f       	sbci	r31, 0xFE	; 254
    288c:	88 ec       	ldi	r24, 0xC8	; 200
    288e:	90 e0       	ldi	r25, 0x00	; 0
    2890:	91 83       	std	Z+1, r25	; 0x01
    2892:	80 83       	st	Z, r24
    2894:	fe 01       	movw	r30, r28
    2896:	ef 52       	subi	r30, 0x2F	; 47
    2898:	fe 4f       	sbci	r31, 0xFE	; 254
    289a:	80 81       	ld	r24, Z
    289c:	91 81       	ldd	r25, Z+1	; 0x01
    289e:	01 97       	sbiw	r24, 0x01	; 1
    28a0:	f1 f7       	brne	.-4      	; 0x289e <main+0x1ce>
    28a2:	fe 01       	movw	r30, r28
    28a4:	ef 52       	subi	r30, 0x2F	; 47
    28a6:	fe 4f       	sbci	r31, 0xFE	; 254
    28a8:	91 83       	std	Z+1, r25	; 0x01
    28aa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28ac:	de 01       	movw	r26, r28
    28ae:	ad 52       	subi	r26, 0x2D	; 45
    28b0:	be 4f       	sbci	r27, 0xFE	; 254
    28b2:	fe 01       	movw	r30, r28
    28b4:	ed 52       	subi	r30, 0x2D	; 45
    28b6:	fe 4f       	sbci	r31, 0xFE	; 254
    28b8:	80 81       	ld	r24, Z
    28ba:	91 81       	ldd	r25, Z+1	; 0x01
    28bc:	01 97       	sbiw	r24, 0x01	; 1
    28be:	11 96       	adiw	r26, 0x01	; 1
    28c0:	9c 93       	st	X, r25
    28c2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28c4:	fe 01       	movw	r30, r28
    28c6:	ed 52       	subi	r30, 0x2D	; 45
    28c8:	fe 4f       	sbci	r31, 0xFE	; 254
    28ca:	80 81       	ld	r24, Z
    28cc:	91 81       	ldd	r25, Z+1	; 0x01
    28ce:	00 97       	sbiw	r24, 0x00	; 0
    28d0:	d1 f6       	brne	.-76     	; 0x2886 <main+0x1b6>
    28d2:	27 c0       	rjmp	.+78     	; 0x2922 <main+0x252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28d4:	8e 01       	movw	r16, r28
    28d6:	0d 52       	subi	r16, 0x2D	; 45
    28d8:	1e 4f       	sbci	r17, 0xFE	; 254
    28da:	fe 01       	movw	r30, r28
    28dc:	eb 52       	subi	r30, 0x2B	; 43
    28de:	fe 4f       	sbci	r31, 0xFE	; 254
    28e0:	60 81       	ld	r22, Z
    28e2:	71 81       	ldd	r23, Z+1	; 0x01
    28e4:	82 81       	ldd	r24, Z+2	; 0x02
    28e6:	93 81       	ldd	r25, Z+3	; 0x03
    28e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28ec:	dc 01       	movw	r26, r24
    28ee:	cb 01       	movw	r24, r22
    28f0:	f8 01       	movw	r30, r16
    28f2:	91 83       	std	Z+1, r25	; 0x01
    28f4:	80 83       	st	Z, r24
    28f6:	de 01       	movw	r26, r28
    28f8:	a1 53       	subi	r26, 0x31	; 49
    28fa:	be 4f       	sbci	r27, 0xFE	; 254
    28fc:	fe 01       	movw	r30, r28
    28fe:	ed 52       	subi	r30, 0x2D	; 45
    2900:	fe 4f       	sbci	r31, 0xFE	; 254
    2902:	80 81       	ld	r24, Z
    2904:	91 81       	ldd	r25, Z+1	; 0x01
    2906:	8d 93       	st	X+, r24
    2908:	9c 93       	st	X, r25
    290a:	fe 01       	movw	r30, r28
    290c:	e1 53       	subi	r30, 0x31	; 49
    290e:	fe 4f       	sbci	r31, 0xFE	; 254
    2910:	80 81       	ld	r24, Z
    2912:	91 81       	ldd	r25, Z+1	; 0x01
    2914:	01 97       	sbiw	r24, 0x01	; 1
    2916:	f1 f7       	brne	.-4      	; 0x2914 <main+0x244>
    2918:	fe 01       	movw	r30, r28
    291a:	e1 53       	subi	r30, 0x31	; 49
    291c:	fe 4f       	sbci	r31, 0xFE	; 254
    291e:	91 83       	std	Z+1, r25	; 0x01
    2920:	80 83       	st	Z, r24

	_delay_ms(500);
	while(1)
	{
		DIO_VoidSetPinDir(Group_D, Pin_D4, Output);
    2922:	84 e0       	ldi	r24, 0x04	; 4
    2924:	64 e0       	ldi	r22, 0x04	; 4
    2926:	41 e0       	ldi	r20, 0x01	; 1
    2928:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <DIO_VoidSetPinDir>

		/*UART_Rec -> User Control*/
		//UART_enuReceive(&UART_RecValue);
		//DIO_VoidSetPinValue(Group_D,Pin_D4, High);

		LCD_VoidSendCommand(LCD_ClearDisplay);
    292c:	81 e0       	ldi	r24, 0x01	; 1
    292e:	0e 94 92 0b 	call	0x1724	; 0x1724 <LCD_VoidSendCommand>
    2932:	fe 01       	movw	r30, r28
    2934:	e5 53       	subi	r30, 0x35	; 53
    2936:	fe 4f       	sbci	r31, 0xFE	; 254
    2938:	80 e0       	ldi	r24, 0x00	; 0
    293a:	90 e0       	ldi	r25, 0x00	; 0
    293c:	a0 e0       	ldi	r26, 0x00	; 0
    293e:	b0 e4       	ldi	r27, 0x40	; 64
    2940:	80 83       	st	Z, r24
    2942:	91 83       	std	Z+1, r25	; 0x01
    2944:	a2 83       	std	Z+2, r26	; 0x02
    2946:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2948:	8e 01       	movw	r16, r28
    294a:	09 53       	subi	r16, 0x39	; 57
    294c:	1e 4f       	sbci	r17, 0xFE	; 254
    294e:	fe 01       	movw	r30, r28
    2950:	e5 53       	subi	r30, 0x35	; 53
    2952:	fe 4f       	sbci	r31, 0xFE	; 254
    2954:	60 81       	ld	r22, Z
    2956:	71 81       	ldd	r23, Z+1	; 0x01
    2958:	82 81       	ldd	r24, Z+2	; 0x02
    295a:	93 81       	ldd	r25, Z+3	; 0x03
    295c:	20 e0       	ldi	r18, 0x00	; 0
    295e:	30 e0       	ldi	r19, 0x00	; 0
    2960:	4a ef       	ldi	r20, 0xFA	; 250
    2962:	54 e4       	ldi	r21, 0x44	; 68
    2964:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2968:	dc 01       	movw	r26, r24
    296a:	cb 01       	movw	r24, r22
    296c:	f8 01       	movw	r30, r16
    296e:	80 83       	st	Z, r24
    2970:	91 83       	std	Z+1, r25	; 0x01
    2972:	a2 83       	std	Z+2, r26	; 0x02
    2974:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2976:	fe 01       	movw	r30, r28
    2978:	e9 53       	subi	r30, 0x39	; 57
    297a:	fe 4f       	sbci	r31, 0xFE	; 254
    297c:	60 81       	ld	r22, Z
    297e:	71 81       	ldd	r23, Z+1	; 0x01
    2980:	82 81       	ldd	r24, Z+2	; 0x02
    2982:	93 81       	ldd	r25, Z+3	; 0x03
    2984:	20 e0       	ldi	r18, 0x00	; 0
    2986:	30 e0       	ldi	r19, 0x00	; 0
    2988:	40 e8       	ldi	r20, 0x80	; 128
    298a:	5f e3       	ldi	r21, 0x3F	; 63
    298c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2990:	88 23       	and	r24, r24
    2992:	44 f4       	brge	.+16     	; 0x29a4 <main+0x2d4>
		__ticks = 1;
    2994:	fe 01       	movw	r30, r28
    2996:	eb 53       	subi	r30, 0x3B	; 59
    2998:	fe 4f       	sbci	r31, 0xFE	; 254
    299a:	81 e0       	ldi	r24, 0x01	; 1
    299c:	90 e0       	ldi	r25, 0x00	; 0
    299e:	91 83       	std	Z+1, r25	; 0x01
    29a0:	80 83       	st	Z, r24
    29a2:	64 c0       	rjmp	.+200    	; 0x2a6c <main+0x39c>
	else if (__tmp > 65535)
    29a4:	fe 01       	movw	r30, r28
    29a6:	e9 53       	subi	r30, 0x39	; 57
    29a8:	fe 4f       	sbci	r31, 0xFE	; 254
    29aa:	60 81       	ld	r22, Z
    29ac:	71 81       	ldd	r23, Z+1	; 0x01
    29ae:	82 81       	ldd	r24, Z+2	; 0x02
    29b0:	93 81       	ldd	r25, Z+3	; 0x03
    29b2:	20 e0       	ldi	r18, 0x00	; 0
    29b4:	3f ef       	ldi	r19, 0xFF	; 255
    29b6:	4f e7       	ldi	r20, 0x7F	; 127
    29b8:	57 e4       	ldi	r21, 0x47	; 71
    29ba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29be:	18 16       	cp	r1, r24
    29c0:	0c f0       	brlt	.+2      	; 0x29c4 <main+0x2f4>
    29c2:	43 c0       	rjmp	.+134    	; 0x2a4a <main+0x37a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29c4:	fe 01       	movw	r30, r28
    29c6:	e5 53       	subi	r30, 0x35	; 53
    29c8:	fe 4f       	sbci	r31, 0xFE	; 254
    29ca:	60 81       	ld	r22, Z
    29cc:	71 81       	ldd	r23, Z+1	; 0x01
    29ce:	82 81       	ldd	r24, Z+2	; 0x02
    29d0:	93 81       	ldd	r25, Z+3	; 0x03
    29d2:	20 e0       	ldi	r18, 0x00	; 0
    29d4:	30 e0       	ldi	r19, 0x00	; 0
    29d6:	40 e2       	ldi	r20, 0x20	; 32
    29d8:	51 e4       	ldi	r21, 0x41	; 65
    29da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29de:	dc 01       	movw	r26, r24
    29e0:	cb 01       	movw	r24, r22
    29e2:	8e 01       	movw	r16, r28
    29e4:	0b 53       	subi	r16, 0x3B	; 59
    29e6:	1e 4f       	sbci	r17, 0xFE	; 254
    29e8:	bc 01       	movw	r22, r24
    29ea:	cd 01       	movw	r24, r26
    29ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29f0:	dc 01       	movw	r26, r24
    29f2:	cb 01       	movw	r24, r22
    29f4:	f8 01       	movw	r30, r16
    29f6:	91 83       	std	Z+1, r25	; 0x01
    29f8:	80 83       	st	Z, r24
    29fa:	1f c0       	rjmp	.+62     	; 0x2a3a <main+0x36a>
    29fc:	fe 01       	movw	r30, r28
    29fe:	ed 53       	subi	r30, 0x3D	; 61
    2a00:	fe 4f       	sbci	r31, 0xFE	; 254
    2a02:	88 ec       	ldi	r24, 0xC8	; 200
    2a04:	90 e0       	ldi	r25, 0x00	; 0
    2a06:	91 83       	std	Z+1, r25	; 0x01
    2a08:	80 83       	st	Z, r24
    2a0a:	fe 01       	movw	r30, r28
    2a0c:	ed 53       	subi	r30, 0x3D	; 61
    2a0e:	fe 4f       	sbci	r31, 0xFE	; 254
    2a10:	80 81       	ld	r24, Z
    2a12:	91 81       	ldd	r25, Z+1	; 0x01
    2a14:	01 97       	sbiw	r24, 0x01	; 1
    2a16:	f1 f7       	brne	.-4      	; 0x2a14 <main+0x344>
    2a18:	fe 01       	movw	r30, r28
    2a1a:	ed 53       	subi	r30, 0x3D	; 61
    2a1c:	fe 4f       	sbci	r31, 0xFE	; 254
    2a1e:	91 83       	std	Z+1, r25	; 0x01
    2a20:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a22:	de 01       	movw	r26, r28
    2a24:	ab 53       	subi	r26, 0x3B	; 59
    2a26:	be 4f       	sbci	r27, 0xFE	; 254
    2a28:	fe 01       	movw	r30, r28
    2a2a:	eb 53       	subi	r30, 0x3B	; 59
    2a2c:	fe 4f       	sbci	r31, 0xFE	; 254
    2a2e:	80 81       	ld	r24, Z
    2a30:	91 81       	ldd	r25, Z+1	; 0x01
    2a32:	01 97       	sbiw	r24, 0x01	; 1
    2a34:	11 96       	adiw	r26, 0x01	; 1
    2a36:	9c 93       	st	X, r25
    2a38:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a3a:	fe 01       	movw	r30, r28
    2a3c:	eb 53       	subi	r30, 0x3B	; 59
    2a3e:	fe 4f       	sbci	r31, 0xFE	; 254
    2a40:	80 81       	ld	r24, Z
    2a42:	91 81       	ldd	r25, Z+1	; 0x01
    2a44:	00 97       	sbiw	r24, 0x00	; 0
    2a46:	d1 f6       	brne	.-76     	; 0x29fc <main+0x32c>
    2a48:	27 c0       	rjmp	.+78     	; 0x2a98 <main+0x3c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a4a:	8e 01       	movw	r16, r28
    2a4c:	0b 53       	subi	r16, 0x3B	; 59
    2a4e:	1e 4f       	sbci	r17, 0xFE	; 254
    2a50:	fe 01       	movw	r30, r28
    2a52:	e9 53       	subi	r30, 0x39	; 57
    2a54:	fe 4f       	sbci	r31, 0xFE	; 254
    2a56:	60 81       	ld	r22, Z
    2a58:	71 81       	ldd	r23, Z+1	; 0x01
    2a5a:	82 81       	ldd	r24, Z+2	; 0x02
    2a5c:	93 81       	ldd	r25, Z+3	; 0x03
    2a5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a62:	dc 01       	movw	r26, r24
    2a64:	cb 01       	movw	r24, r22
    2a66:	f8 01       	movw	r30, r16
    2a68:	91 83       	std	Z+1, r25	; 0x01
    2a6a:	80 83       	st	Z, r24
    2a6c:	de 01       	movw	r26, r28
    2a6e:	af 53       	subi	r26, 0x3F	; 63
    2a70:	be 4f       	sbci	r27, 0xFE	; 254
    2a72:	fe 01       	movw	r30, r28
    2a74:	eb 53       	subi	r30, 0x3B	; 59
    2a76:	fe 4f       	sbci	r31, 0xFE	; 254
    2a78:	80 81       	ld	r24, Z
    2a7a:	91 81       	ldd	r25, Z+1	; 0x01
    2a7c:	8d 93       	st	X+, r24
    2a7e:	9c 93       	st	X, r25
    2a80:	fe 01       	movw	r30, r28
    2a82:	ef 53       	subi	r30, 0x3F	; 63
    2a84:	fe 4f       	sbci	r31, 0xFE	; 254
    2a86:	80 81       	ld	r24, Z
    2a88:	91 81       	ldd	r25, Z+1	; 0x01
    2a8a:	01 97       	sbiw	r24, 0x01	; 1
    2a8c:	f1 f7       	brne	.-4      	; 0x2a8a <main+0x3ba>
    2a8e:	fe 01       	movw	r30, r28
    2a90:	ef 53       	subi	r30, 0x3F	; 63
    2a92:	fe 4f       	sbci	r31, 0xFE	; 254
    2a94:	91 83       	std	Z+1, r25	; 0x01
    2a96:	80 83       	st	Z, r24
		_delay_ms(2);
		LCD_VoidSendStringFromPos("Choose a Mode",0,2);
    2a98:	8d e6       	ldi	r24, 0x6D	; 109
    2a9a:	90 e0       	ldi	r25, 0x00	; 0
    2a9c:	60 e0       	ldi	r22, 0x00	; 0
    2a9e:	42 e0       	ldi	r20, 0x02	; 2
    2aa0:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <LCD_VoidSendStringFromPos>
    2aa4:	fe 01       	movw	r30, r28
    2aa6:	e3 54       	subi	r30, 0x43	; 67
    2aa8:	fe 4f       	sbci	r31, 0xFE	; 254
    2aaa:	80 e0       	ldi	r24, 0x00	; 0
    2aac:	90 e0       	ldi	r25, 0x00	; 0
    2aae:	aa ef       	ldi	r26, 0xFA	; 250
    2ab0:	b3 e4       	ldi	r27, 0x43	; 67
    2ab2:	80 83       	st	Z, r24
    2ab4:	91 83       	std	Z+1, r25	; 0x01
    2ab6:	a2 83       	std	Z+2, r26	; 0x02
    2ab8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2aba:	8e 01       	movw	r16, r28
    2abc:	07 54       	subi	r16, 0x47	; 71
    2abe:	1e 4f       	sbci	r17, 0xFE	; 254
    2ac0:	fe 01       	movw	r30, r28
    2ac2:	e3 54       	subi	r30, 0x43	; 67
    2ac4:	fe 4f       	sbci	r31, 0xFE	; 254
    2ac6:	60 81       	ld	r22, Z
    2ac8:	71 81       	ldd	r23, Z+1	; 0x01
    2aca:	82 81       	ldd	r24, Z+2	; 0x02
    2acc:	93 81       	ldd	r25, Z+3	; 0x03
    2ace:	20 e0       	ldi	r18, 0x00	; 0
    2ad0:	30 e0       	ldi	r19, 0x00	; 0
    2ad2:	4a ef       	ldi	r20, 0xFA	; 250
    2ad4:	54 e4       	ldi	r21, 0x44	; 68
    2ad6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ada:	dc 01       	movw	r26, r24
    2adc:	cb 01       	movw	r24, r22
    2ade:	f8 01       	movw	r30, r16
    2ae0:	80 83       	st	Z, r24
    2ae2:	91 83       	std	Z+1, r25	; 0x01
    2ae4:	a2 83       	std	Z+2, r26	; 0x02
    2ae6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2ae8:	fe 01       	movw	r30, r28
    2aea:	e7 54       	subi	r30, 0x47	; 71
    2aec:	fe 4f       	sbci	r31, 0xFE	; 254
    2aee:	60 81       	ld	r22, Z
    2af0:	71 81       	ldd	r23, Z+1	; 0x01
    2af2:	82 81       	ldd	r24, Z+2	; 0x02
    2af4:	93 81       	ldd	r25, Z+3	; 0x03
    2af6:	20 e0       	ldi	r18, 0x00	; 0
    2af8:	30 e0       	ldi	r19, 0x00	; 0
    2afa:	40 e8       	ldi	r20, 0x80	; 128
    2afc:	5f e3       	ldi	r21, 0x3F	; 63
    2afe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b02:	88 23       	and	r24, r24
    2b04:	44 f4       	brge	.+16     	; 0x2b16 <main+0x446>
		__ticks = 1;
    2b06:	fe 01       	movw	r30, r28
    2b08:	e9 54       	subi	r30, 0x49	; 73
    2b0a:	fe 4f       	sbci	r31, 0xFE	; 254
    2b0c:	81 e0       	ldi	r24, 0x01	; 1
    2b0e:	90 e0       	ldi	r25, 0x00	; 0
    2b10:	91 83       	std	Z+1, r25	; 0x01
    2b12:	80 83       	st	Z, r24
    2b14:	64 c0       	rjmp	.+200    	; 0x2bde <main+0x50e>
	else if (__tmp > 65535)
    2b16:	fe 01       	movw	r30, r28
    2b18:	e7 54       	subi	r30, 0x47	; 71
    2b1a:	fe 4f       	sbci	r31, 0xFE	; 254
    2b1c:	60 81       	ld	r22, Z
    2b1e:	71 81       	ldd	r23, Z+1	; 0x01
    2b20:	82 81       	ldd	r24, Z+2	; 0x02
    2b22:	93 81       	ldd	r25, Z+3	; 0x03
    2b24:	20 e0       	ldi	r18, 0x00	; 0
    2b26:	3f ef       	ldi	r19, 0xFF	; 255
    2b28:	4f e7       	ldi	r20, 0x7F	; 127
    2b2a:	57 e4       	ldi	r21, 0x47	; 71
    2b2c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b30:	18 16       	cp	r1, r24
    2b32:	0c f0       	brlt	.+2      	; 0x2b36 <main+0x466>
    2b34:	43 c0       	rjmp	.+134    	; 0x2bbc <main+0x4ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b36:	fe 01       	movw	r30, r28
    2b38:	e3 54       	subi	r30, 0x43	; 67
    2b3a:	fe 4f       	sbci	r31, 0xFE	; 254
    2b3c:	60 81       	ld	r22, Z
    2b3e:	71 81       	ldd	r23, Z+1	; 0x01
    2b40:	82 81       	ldd	r24, Z+2	; 0x02
    2b42:	93 81       	ldd	r25, Z+3	; 0x03
    2b44:	20 e0       	ldi	r18, 0x00	; 0
    2b46:	30 e0       	ldi	r19, 0x00	; 0
    2b48:	40 e2       	ldi	r20, 0x20	; 32
    2b4a:	51 e4       	ldi	r21, 0x41	; 65
    2b4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b50:	dc 01       	movw	r26, r24
    2b52:	cb 01       	movw	r24, r22
    2b54:	8e 01       	movw	r16, r28
    2b56:	09 54       	subi	r16, 0x49	; 73
    2b58:	1e 4f       	sbci	r17, 0xFE	; 254
    2b5a:	bc 01       	movw	r22, r24
    2b5c:	cd 01       	movw	r24, r26
    2b5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b62:	dc 01       	movw	r26, r24
    2b64:	cb 01       	movw	r24, r22
    2b66:	f8 01       	movw	r30, r16
    2b68:	91 83       	std	Z+1, r25	; 0x01
    2b6a:	80 83       	st	Z, r24
    2b6c:	1f c0       	rjmp	.+62     	; 0x2bac <main+0x4dc>
    2b6e:	fe 01       	movw	r30, r28
    2b70:	eb 54       	subi	r30, 0x4B	; 75
    2b72:	fe 4f       	sbci	r31, 0xFE	; 254
    2b74:	88 ec       	ldi	r24, 0xC8	; 200
    2b76:	90 e0       	ldi	r25, 0x00	; 0
    2b78:	91 83       	std	Z+1, r25	; 0x01
    2b7a:	80 83       	st	Z, r24
    2b7c:	fe 01       	movw	r30, r28
    2b7e:	eb 54       	subi	r30, 0x4B	; 75
    2b80:	fe 4f       	sbci	r31, 0xFE	; 254
    2b82:	80 81       	ld	r24, Z
    2b84:	91 81       	ldd	r25, Z+1	; 0x01
    2b86:	01 97       	sbiw	r24, 0x01	; 1
    2b88:	f1 f7       	brne	.-4      	; 0x2b86 <main+0x4b6>
    2b8a:	fe 01       	movw	r30, r28
    2b8c:	eb 54       	subi	r30, 0x4B	; 75
    2b8e:	fe 4f       	sbci	r31, 0xFE	; 254
    2b90:	91 83       	std	Z+1, r25	; 0x01
    2b92:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b94:	de 01       	movw	r26, r28
    2b96:	a9 54       	subi	r26, 0x49	; 73
    2b98:	be 4f       	sbci	r27, 0xFE	; 254
    2b9a:	fe 01       	movw	r30, r28
    2b9c:	e9 54       	subi	r30, 0x49	; 73
    2b9e:	fe 4f       	sbci	r31, 0xFE	; 254
    2ba0:	80 81       	ld	r24, Z
    2ba2:	91 81       	ldd	r25, Z+1	; 0x01
    2ba4:	01 97       	sbiw	r24, 0x01	; 1
    2ba6:	11 96       	adiw	r26, 0x01	; 1
    2ba8:	9c 93       	st	X, r25
    2baa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bac:	fe 01       	movw	r30, r28
    2bae:	e9 54       	subi	r30, 0x49	; 73
    2bb0:	fe 4f       	sbci	r31, 0xFE	; 254
    2bb2:	80 81       	ld	r24, Z
    2bb4:	91 81       	ldd	r25, Z+1	; 0x01
    2bb6:	00 97       	sbiw	r24, 0x00	; 0
    2bb8:	d1 f6       	brne	.-76     	; 0x2b6e <main+0x49e>
    2bba:	27 c0       	rjmp	.+78     	; 0x2c0a <main+0x53a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bbc:	8e 01       	movw	r16, r28
    2bbe:	09 54       	subi	r16, 0x49	; 73
    2bc0:	1e 4f       	sbci	r17, 0xFE	; 254
    2bc2:	fe 01       	movw	r30, r28
    2bc4:	e7 54       	subi	r30, 0x47	; 71
    2bc6:	fe 4f       	sbci	r31, 0xFE	; 254
    2bc8:	60 81       	ld	r22, Z
    2bca:	71 81       	ldd	r23, Z+1	; 0x01
    2bcc:	82 81       	ldd	r24, Z+2	; 0x02
    2bce:	93 81       	ldd	r25, Z+3	; 0x03
    2bd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bd4:	dc 01       	movw	r26, r24
    2bd6:	cb 01       	movw	r24, r22
    2bd8:	f8 01       	movw	r30, r16
    2bda:	91 83       	std	Z+1, r25	; 0x01
    2bdc:	80 83       	st	Z, r24
    2bde:	de 01       	movw	r26, r28
    2be0:	ad 54       	subi	r26, 0x4D	; 77
    2be2:	be 4f       	sbci	r27, 0xFE	; 254
    2be4:	fe 01       	movw	r30, r28
    2be6:	e9 54       	subi	r30, 0x49	; 73
    2be8:	fe 4f       	sbci	r31, 0xFE	; 254
    2bea:	80 81       	ld	r24, Z
    2bec:	91 81       	ldd	r25, Z+1	; 0x01
    2bee:	8d 93       	st	X+, r24
    2bf0:	9c 93       	st	X, r25
    2bf2:	fe 01       	movw	r30, r28
    2bf4:	ed 54       	subi	r30, 0x4D	; 77
    2bf6:	fe 4f       	sbci	r31, 0xFE	; 254
    2bf8:	80 81       	ld	r24, Z
    2bfa:	91 81       	ldd	r25, Z+1	; 0x01
    2bfc:	01 97       	sbiw	r24, 0x01	; 1
    2bfe:	f1 f7       	brne	.-4      	; 0x2bfc <main+0x52c>
    2c00:	fe 01       	movw	r30, r28
    2c02:	ed 54       	subi	r30, 0x4D	; 77
    2c04:	fe 4f       	sbci	r31, 0xFE	; 254
    2c06:	91 83       	std	Z+1, r25	; 0x01
    2c08:	80 83       	st	Z, r24
		_delay_ms(500);
		LCD_VoidSendCommand(LCD_ClearDisplay);
    2c0a:	81 e0       	ldi	r24, 0x01	; 1
    2c0c:	0e 94 92 0b 	call	0x1724	; 0x1724 <LCD_VoidSendCommand>
    2c10:	fe 01       	movw	r30, r28
    2c12:	e1 55       	subi	r30, 0x51	; 81
    2c14:	fe 4f       	sbci	r31, 0xFE	; 254
    2c16:	80 e0       	ldi	r24, 0x00	; 0
    2c18:	90 e0       	ldi	r25, 0x00	; 0
    2c1a:	a0 e0       	ldi	r26, 0x00	; 0
    2c1c:	b0 e4       	ldi	r27, 0x40	; 64
    2c1e:	80 83       	st	Z, r24
    2c20:	91 83       	std	Z+1, r25	; 0x01
    2c22:	a2 83       	std	Z+2, r26	; 0x02
    2c24:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c26:	8e 01       	movw	r16, r28
    2c28:	05 55       	subi	r16, 0x55	; 85
    2c2a:	1e 4f       	sbci	r17, 0xFE	; 254
    2c2c:	fe 01       	movw	r30, r28
    2c2e:	e1 55       	subi	r30, 0x51	; 81
    2c30:	fe 4f       	sbci	r31, 0xFE	; 254
    2c32:	60 81       	ld	r22, Z
    2c34:	71 81       	ldd	r23, Z+1	; 0x01
    2c36:	82 81       	ldd	r24, Z+2	; 0x02
    2c38:	93 81       	ldd	r25, Z+3	; 0x03
    2c3a:	20 e0       	ldi	r18, 0x00	; 0
    2c3c:	30 e0       	ldi	r19, 0x00	; 0
    2c3e:	4a ef       	ldi	r20, 0xFA	; 250
    2c40:	54 e4       	ldi	r21, 0x44	; 68
    2c42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c46:	dc 01       	movw	r26, r24
    2c48:	cb 01       	movw	r24, r22
    2c4a:	f8 01       	movw	r30, r16
    2c4c:	80 83       	st	Z, r24
    2c4e:	91 83       	std	Z+1, r25	; 0x01
    2c50:	a2 83       	std	Z+2, r26	; 0x02
    2c52:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c54:	fe 01       	movw	r30, r28
    2c56:	e5 55       	subi	r30, 0x55	; 85
    2c58:	fe 4f       	sbci	r31, 0xFE	; 254
    2c5a:	60 81       	ld	r22, Z
    2c5c:	71 81       	ldd	r23, Z+1	; 0x01
    2c5e:	82 81       	ldd	r24, Z+2	; 0x02
    2c60:	93 81       	ldd	r25, Z+3	; 0x03
    2c62:	20 e0       	ldi	r18, 0x00	; 0
    2c64:	30 e0       	ldi	r19, 0x00	; 0
    2c66:	40 e8       	ldi	r20, 0x80	; 128
    2c68:	5f e3       	ldi	r21, 0x3F	; 63
    2c6a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c6e:	88 23       	and	r24, r24
    2c70:	44 f4       	brge	.+16     	; 0x2c82 <main+0x5b2>
		__ticks = 1;
    2c72:	fe 01       	movw	r30, r28
    2c74:	e7 55       	subi	r30, 0x57	; 87
    2c76:	fe 4f       	sbci	r31, 0xFE	; 254
    2c78:	81 e0       	ldi	r24, 0x01	; 1
    2c7a:	90 e0       	ldi	r25, 0x00	; 0
    2c7c:	91 83       	std	Z+1, r25	; 0x01
    2c7e:	80 83       	st	Z, r24
    2c80:	64 c0       	rjmp	.+200    	; 0x2d4a <main+0x67a>
	else if (__tmp > 65535)
    2c82:	fe 01       	movw	r30, r28
    2c84:	e5 55       	subi	r30, 0x55	; 85
    2c86:	fe 4f       	sbci	r31, 0xFE	; 254
    2c88:	60 81       	ld	r22, Z
    2c8a:	71 81       	ldd	r23, Z+1	; 0x01
    2c8c:	82 81       	ldd	r24, Z+2	; 0x02
    2c8e:	93 81       	ldd	r25, Z+3	; 0x03
    2c90:	20 e0       	ldi	r18, 0x00	; 0
    2c92:	3f ef       	ldi	r19, 0xFF	; 255
    2c94:	4f e7       	ldi	r20, 0x7F	; 127
    2c96:	57 e4       	ldi	r21, 0x47	; 71
    2c98:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c9c:	18 16       	cp	r1, r24
    2c9e:	0c f0       	brlt	.+2      	; 0x2ca2 <main+0x5d2>
    2ca0:	43 c0       	rjmp	.+134    	; 0x2d28 <main+0x658>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ca2:	fe 01       	movw	r30, r28
    2ca4:	e1 55       	subi	r30, 0x51	; 81
    2ca6:	fe 4f       	sbci	r31, 0xFE	; 254
    2ca8:	60 81       	ld	r22, Z
    2caa:	71 81       	ldd	r23, Z+1	; 0x01
    2cac:	82 81       	ldd	r24, Z+2	; 0x02
    2cae:	93 81       	ldd	r25, Z+3	; 0x03
    2cb0:	20 e0       	ldi	r18, 0x00	; 0
    2cb2:	30 e0       	ldi	r19, 0x00	; 0
    2cb4:	40 e2       	ldi	r20, 0x20	; 32
    2cb6:	51 e4       	ldi	r21, 0x41	; 65
    2cb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cbc:	dc 01       	movw	r26, r24
    2cbe:	cb 01       	movw	r24, r22
    2cc0:	8e 01       	movw	r16, r28
    2cc2:	07 55       	subi	r16, 0x57	; 87
    2cc4:	1e 4f       	sbci	r17, 0xFE	; 254
    2cc6:	bc 01       	movw	r22, r24
    2cc8:	cd 01       	movw	r24, r26
    2cca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cce:	dc 01       	movw	r26, r24
    2cd0:	cb 01       	movw	r24, r22
    2cd2:	f8 01       	movw	r30, r16
    2cd4:	91 83       	std	Z+1, r25	; 0x01
    2cd6:	80 83       	st	Z, r24
    2cd8:	1f c0       	rjmp	.+62     	; 0x2d18 <main+0x648>
    2cda:	fe 01       	movw	r30, r28
    2cdc:	e9 55       	subi	r30, 0x59	; 89
    2cde:	fe 4f       	sbci	r31, 0xFE	; 254
    2ce0:	88 ec       	ldi	r24, 0xC8	; 200
    2ce2:	90 e0       	ldi	r25, 0x00	; 0
    2ce4:	91 83       	std	Z+1, r25	; 0x01
    2ce6:	80 83       	st	Z, r24
    2ce8:	fe 01       	movw	r30, r28
    2cea:	e9 55       	subi	r30, 0x59	; 89
    2cec:	fe 4f       	sbci	r31, 0xFE	; 254
    2cee:	80 81       	ld	r24, Z
    2cf0:	91 81       	ldd	r25, Z+1	; 0x01
    2cf2:	01 97       	sbiw	r24, 0x01	; 1
    2cf4:	f1 f7       	brne	.-4      	; 0x2cf2 <main+0x622>
    2cf6:	fe 01       	movw	r30, r28
    2cf8:	e9 55       	subi	r30, 0x59	; 89
    2cfa:	fe 4f       	sbci	r31, 0xFE	; 254
    2cfc:	91 83       	std	Z+1, r25	; 0x01
    2cfe:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d00:	de 01       	movw	r26, r28
    2d02:	a7 55       	subi	r26, 0x57	; 87
    2d04:	be 4f       	sbci	r27, 0xFE	; 254
    2d06:	fe 01       	movw	r30, r28
    2d08:	e7 55       	subi	r30, 0x57	; 87
    2d0a:	fe 4f       	sbci	r31, 0xFE	; 254
    2d0c:	80 81       	ld	r24, Z
    2d0e:	91 81       	ldd	r25, Z+1	; 0x01
    2d10:	01 97       	sbiw	r24, 0x01	; 1
    2d12:	11 96       	adiw	r26, 0x01	; 1
    2d14:	9c 93       	st	X, r25
    2d16:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d18:	fe 01       	movw	r30, r28
    2d1a:	e7 55       	subi	r30, 0x57	; 87
    2d1c:	fe 4f       	sbci	r31, 0xFE	; 254
    2d1e:	80 81       	ld	r24, Z
    2d20:	91 81       	ldd	r25, Z+1	; 0x01
    2d22:	00 97       	sbiw	r24, 0x00	; 0
    2d24:	d1 f6       	brne	.-76     	; 0x2cda <main+0x60a>
    2d26:	27 c0       	rjmp	.+78     	; 0x2d76 <main+0x6a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d28:	8e 01       	movw	r16, r28
    2d2a:	07 55       	subi	r16, 0x57	; 87
    2d2c:	1e 4f       	sbci	r17, 0xFE	; 254
    2d2e:	fe 01       	movw	r30, r28
    2d30:	e5 55       	subi	r30, 0x55	; 85
    2d32:	fe 4f       	sbci	r31, 0xFE	; 254
    2d34:	60 81       	ld	r22, Z
    2d36:	71 81       	ldd	r23, Z+1	; 0x01
    2d38:	82 81       	ldd	r24, Z+2	; 0x02
    2d3a:	93 81       	ldd	r25, Z+3	; 0x03
    2d3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d40:	dc 01       	movw	r26, r24
    2d42:	cb 01       	movw	r24, r22
    2d44:	f8 01       	movw	r30, r16
    2d46:	91 83       	std	Z+1, r25	; 0x01
    2d48:	80 83       	st	Z, r24
    2d4a:	de 01       	movw	r26, r28
    2d4c:	ab 55       	subi	r26, 0x5B	; 91
    2d4e:	be 4f       	sbci	r27, 0xFE	; 254
    2d50:	fe 01       	movw	r30, r28
    2d52:	e7 55       	subi	r30, 0x57	; 87
    2d54:	fe 4f       	sbci	r31, 0xFE	; 254
    2d56:	80 81       	ld	r24, Z
    2d58:	91 81       	ldd	r25, Z+1	; 0x01
    2d5a:	8d 93       	st	X+, r24
    2d5c:	9c 93       	st	X, r25
    2d5e:	fe 01       	movw	r30, r28
    2d60:	eb 55       	subi	r30, 0x5B	; 91
    2d62:	fe 4f       	sbci	r31, 0xFE	; 254
    2d64:	80 81       	ld	r24, Z
    2d66:	91 81       	ldd	r25, Z+1	; 0x01
    2d68:	01 97       	sbiw	r24, 0x01	; 1
    2d6a:	f1 f7       	brne	.-4      	; 0x2d68 <main+0x698>
    2d6c:	fe 01       	movw	r30, r28
    2d6e:	eb 55       	subi	r30, 0x5B	; 91
    2d70:	fe 4f       	sbci	r31, 0xFE	; 254
    2d72:	91 83       	std	Z+1, r25	; 0x01
    2d74:	80 83       	st	Z, r24
		_delay_ms(2);
		LCD_VoidSendString("1- Enter Pass");
    2d76:	8b e7       	ldi	r24, 0x7B	; 123
    2d78:	90 e0       	ldi	r25, 0x00	; 0
    2d7a:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <LCD_VoidSendString>
		LCD_VoidSendStringFromPos("2- Change Pass",1,0);
    2d7e:	89 e8       	ldi	r24, 0x89	; 137
    2d80:	90 e0       	ldi	r25, 0x00	; 0
    2d82:	61 e0       	ldi	r22, 0x01	; 1
    2d84:	40 e0       	ldi	r20, 0x00	; 0
    2d86:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <LCD_VoidSendStringFromPos>
		Chosen_Mode = Keypad_GetPressedKey();
    2d8a:	0e 94 67 12 	call	0x24ce	; 0x24ce <Keypad_GetPressedKey>
    2d8e:	fe 01       	movw	r30, r28
    2d90:	ec 50       	subi	r30, 0x0C	; 12
    2d92:	fe 4f       	sbci	r31, 0xFE	; 254
    2d94:	80 83       	st	Z, r24

		// Code to get the Password From the User
		if (Chosen_Mode == 1)
    2d96:	fe 01       	movw	r30, r28
    2d98:	ec 50       	subi	r30, 0x0C	; 12
    2d9a:	fe 4f       	sbci	r31, 0xFE	; 254
    2d9c:	80 81       	ld	r24, Z
    2d9e:	81 30       	cpi	r24, 0x01	; 1
    2da0:	11 f0       	breq	.+4      	; 0x2da6 <main+0x6d6>
    2da2:	0c 94 0a 21 	jmp	0x4214	; 0x4214 <main+0x1b44>
		{
			LCD_VoidSendCommand(LCD_ClearDisplay);
    2da6:	81 e0       	ldi	r24, 0x01	; 1
    2da8:	0e 94 92 0b 	call	0x1724	; 0x1724 <LCD_VoidSendCommand>
    2dac:	fe 01       	movw	r30, r28
    2dae:	ef 55       	subi	r30, 0x5F	; 95
    2db0:	fe 4f       	sbci	r31, 0xFE	; 254
    2db2:	80 e0       	ldi	r24, 0x00	; 0
    2db4:	90 e0       	ldi	r25, 0x00	; 0
    2db6:	a0 e0       	ldi	r26, 0x00	; 0
    2db8:	b0 e4       	ldi	r27, 0x40	; 64
    2dba:	80 83       	st	Z, r24
    2dbc:	91 83       	std	Z+1, r25	; 0x01
    2dbe:	a2 83       	std	Z+2, r26	; 0x02
    2dc0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dc2:	8e 01       	movw	r16, r28
    2dc4:	03 56       	subi	r16, 0x63	; 99
    2dc6:	1e 4f       	sbci	r17, 0xFE	; 254
    2dc8:	fe 01       	movw	r30, r28
    2dca:	ef 55       	subi	r30, 0x5F	; 95
    2dcc:	fe 4f       	sbci	r31, 0xFE	; 254
    2dce:	60 81       	ld	r22, Z
    2dd0:	71 81       	ldd	r23, Z+1	; 0x01
    2dd2:	82 81       	ldd	r24, Z+2	; 0x02
    2dd4:	93 81       	ldd	r25, Z+3	; 0x03
    2dd6:	20 e0       	ldi	r18, 0x00	; 0
    2dd8:	30 e0       	ldi	r19, 0x00	; 0
    2dda:	4a ef       	ldi	r20, 0xFA	; 250
    2ddc:	54 e4       	ldi	r21, 0x44	; 68
    2dde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2de2:	dc 01       	movw	r26, r24
    2de4:	cb 01       	movw	r24, r22
    2de6:	f8 01       	movw	r30, r16
    2de8:	80 83       	st	Z, r24
    2dea:	91 83       	std	Z+1, r25	; 0x01
    2dec:	a2 83       	std	Z+2, r26	; 0x02
    2dee:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2df0:	fe 01       	movw	r30, r28
    2df2:	e3 56       	subi	r30, 0x63	; 99
    2df4:	fe 4f       	sbci	r31, 0xFE	; 254
    2df6:	60 81       	ld	r22, Z
    2df8:	71 81       	ldd	r23, Z+1	; 0x01
    2dfa:	82 81       	ldd	r24, Z+2	; 0x02
    2dfc:	93 81       	ldd	r25, Z+3	; 0x03
    2dfe:	20 e0       	ldi	r18, 0x00	; 0
    2e00:	30 e0       	ldi	r19, 0x00	; 0
    2e02:	40 e8       	ldi	r20, 0x80	; 128
    2e04:	5f e3       	ldi	r21, 0x3F	; 63
    2e06:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e0a:	88 23       	and	r24, r24
    2e0c:	44 f4       	brge	.+16     	; 0x2e1e <main+0x74e>
		__ticks = 1;
    2e0e:	fe 01       	movw	r30, r28
    2e10:	e5 56       	subi	r30, 0x65	; 101
    2e12:	fe 4f       	sbci	r31, 0xFE	; 254
    2e14:	81 e0       	ldi	r24, 0x01	; 1
    2e16:	90 e0       	ldi	r25, 0x00	; 0
    2e18:	91 83       	std	Z+1, r25	; 0x01
    2e1a:	80 83       	st	Z, r24
    2e1c:	64 c0       	rjmp	.+200    	; 0x2ee6 <main+0x816>
	else if (__tmp > 65535)
    2e1e:	fe 01       	movw	r30, r28
    2e20:	e3 56       	subi	r30, 0x63	; 99
    2e22:	fe 4f       	sbci	r31, 0xFE	; 254
    2e24:	60 81       	ld	r22, Z
    2e26:	71 81       	ldd	r23, Z+1	; 0x01
    2e28:	82 81       	ldd	r24, Z+2	; 0x02
    2e2a:	93 81       	ldd	r25, Z+3	; 0x03
    2e2c:	20 e0       	ldi	r18, 0x00	; 0
    2e2e:	3f ef       	ldi	r19, 0xFF	; 255
    2e30:	4f e7       	ldi	r20, 0x7F	; 127
    2e32:	57 e4       	ldi	r21, 0x47	; 71
    2e34:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e38:	18 16       	cp	r1, r24
    2e3a:	0c f0       	brlt	.+2      	; 0x2e3e <main+0x76e>
    2e3c:	43 c0       	rjmp	.+134    	; 0x2ec4 <main+0x7f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e3e:	fe 01       	movw	r30, r28
    2e40:	ef 55       	subi	r30, 0x5F	; 95
    2e42:	fe 4f       	sbci	r31, 0xFE	; 254
    2e44:	60 81       	ld	r22, Z
    2e46:	71 81       	ldd	r23, Z+1	; 0x01
    2e48:	82 81       	ldd	r24, Z+2	; 0x02
    2e4a:	93 81       	ldd	r25, Z+3	; 0x03
    2e4c:	20 e0       	ldi	r18, 0x00	; 0
    2e4e:	30 e0       	ldi	r19, 0x00	; 0
    2e50:	40 e2       	ldi	r20, 0x20	; 32
    2e52:	51 e4       	ldi	r21, 0x41	; 65
    2e54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e58:	dc 01       	movw	r26, r24
    2e5a:	cb 01       	movw	r24, r22
    2e5c:	8e 01       	movw	r16, r28
    2e5e:	05 56       	subi	r16, 0x65	; 101
    2e60:	1e 4f       	sbci	r17, 0xFE	; 254
    2e62:	bc 01       	movw	r22, r24
    2e64:	cd 01       	movw	r24, r26
    2e66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e6a:	dc 01       	movw	r26, r24
    2e6c:	cb 01       	movw	r24, r22
    2e6e:	f8 01       	movw	r30, r16
    2e70:	91 83       	std	Z+1, r25	; 0x01
    2e72:	80 83       	st	Z, r24
    2e74:	1f c0       	rjmp	.+62     	; 0x2eb4 <main+0x7e4>
    2e76:	fe 01       	movw	r30, r28
    2e78:	e7 56       	subi	r30, 0x67	; 103
    2e7a:	fe 4f       	sbci	r31, 0xFE	; 254
    2e7c:	88 ec       	ldi	r24, 0xC8	; 200
    2e7e:	90 e0       	ldi	r25, 0x00	; 0
    2e80:	91 83       	std	Z+1, r25	; 0x01
    2e82:	80 83       	st	Z, r24
    2e84:	fe 01       	movw	r30, r28
    2e86:	e7 56       	subi	r30, 0x67	; 103
    2e88:	fe 4f       	sbci	r31, 0xFE	; 254
    2e8a:	80 81       	ld	r24, Z
    2e8c:	91 81       	ldd	r25, Z+1	; 0x01
    2e8e:	01 97       	sbiw	r24, 0x01	; 1
    2e90:	f1 f7       	brne	.-4      	; 0x2e8e <main+0x7be>
    2e92:	fe 01       	movw	r30, r28
    2e94:	e7 56       	subi	r30, 0x67	; 103
    2e96:	fe 4f       	sbci	r31, 0xFE	; 254
    2e98:	91 83       	std	Z+1, r25	; 0x01
    2e9a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e9c:	de 01       	movw	r26, r28
    2e9e:	a5 56       	subi	r26, 0x65	; 101
    2ea0:	be 4f       	sbci	r27, 0xFE	; 254
    2ea2:	fe 01       	movw	r30, r28
    2ea4:	e5 56       	subi	r30, 0x65	; 101
    2ea6:	fe 4f       	sbci	r31, 0xFE	; 254
    2ea8:	80 81       	ld	r24, Z
    2eaa:	91 81       	ldd	r25, Z+1	; 0x01
    2eac:	01 97       	sbiw	r24, 0x01	; 1
    2eae:	11 96       	adiw	r26, 0x01	; 1
    2eb0:	9c 93       	st	X, r25
    2eb2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2eb4:	fe 01       	movw	r30, r28
    2eb6:	e5 56       	subi	r30, 0x65	; 101
    2eb8:	fe 4f       	sbci	r31, 0xFE	; 254
    2eba:	80 81       	ld	r24, Z
    2ebc:	91 81       	ldd	r25, Z+1	; 0x01
    2ebe:	00 97       	sbiw	r24, 0x00	; 0
    2ec0:	d1 f6       	brne	.-76     	; 0x2e76 <main+0x7a6>
    2ec2:	27 c0       	rjmp	.+78     	; 0x2f12 <main+0x842>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ec4:	8e 01       	movw	r16, r28
    2ec6:	05 56       	subi	r16, 0x65	; 101
    2ec8:	1e 4f       	sbci	r17, 0xFE	; 254
    2eca:	fe 01       	movw	r30, r28
    2ecc:	e3 56       	subi	r30, 0x63	; 99
    2ece:	fe 4f       	sbci	r31, 0xFE	; 254
    2ed0:	60 81       	ld	r22, Z
    2ed2:	71 81       	ldd	r23, Z+1	; 0x01
    2ed4:	82 81       	ldd	r24, Z+2	; 0x02
    2ed6:	93 81       	ldd	r25, Z+3	; 0x03
    2ed8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2edc:	dc 01       	movw	r26, r24
    2ede:	cb 01       	movw	r24, r22
    2ee0:	f8 01       	movw	r30, r16
    2ee2:	91 83       	std	Z+1, r25	; 0x01
    2ee4:	80 83       	st	Z, r24
    2ee6:	de 01       	movw	r26, r28
    2ee8:	a9 56       	subi	r26, 0x69	; 105
    2eea:	be 4f       	sbci	r27, 0xFE	; 254
    2eec:	fe 01       	movw	r30, r28
    2eee:	e5 56       	subi	r30, 0x65	; 101
    2ef0:	fe 4f       	sbci	r31, 0xFE	; 254
    2ef2:	80 81       	ld	r24, Z
    2ef4:	91 81       	ldd	r25, Z+1	; 0x01
    2ef6:	8d 93       	st	X+, r24
    2ef8:	9c 93       	st	X, r25
    2efa:	fe 01       	movw	r30, r28
    2efc:	e9 56       	subi	r30, 0x69	; 105
    2efe:	fe 4f       	sbci	r31, 0xFE	; 254
    2f00:	80 81       	ld	r24, Z
    2f02:	91 81       	ldd	r25, Z+1	; 0x01
    2f04:	01 97       	sbiw	r24, 0x01	; 1
    2f06:	f1 f7       	brne	.-4      	; 0x2f04 <main+0x834>
    2f08:	fe 01       	movw	r30, r28
    2f0a:	e9 56       	subi	r30, 0x69	; 105
    2f0c:	fe 4f       	sbci	r31, 0xFE	; 254
    2f0e:	91 83       	std	Z+1, r25	; 0x01
    2f10:	80 83       	st	Z, r24
			_delay_ms(2);
			LCD_VoidSendString("Password : ");
    2f12:	88 e9       	ldi	r24, 0x98	; 152
    2f14:	90 e0       	ldi	r25, 0x00	; 0
    2f16:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <LCD_VoidSendString>
			for (u8 i = 0; i < 4 ; i++)
    2f1a:	fe 01       	movw	r30, r28
    2f1c:	e1 52       	subi	r30, 0x21	; 33
    2f1e:	fe 4f       	sbci	r31, 0xFE	; 254
    2f20:	10 82       	st	Z, r1
    2f22:	40 c3       	rjmp	.+1664   	; 0x35a4 <main+0xed4>
			{
				LCD_VoidSendCommand(LCD_CursorON);
    2f24:	8e e0       	ldi	r24, 0x0E	; 14
    2f26:	0e 94 92 0b 	call	0x1724	; 0x1724 <LCD_VoidSendCommand>
    2f2a:	fe 01       	movw	r30, r28
    2f2c:	ed 56       	subi	r30, 0x6D	; 109
    2f2e:	fe 4f       	sbci	r31, 0xFE	; 254
    2f30:	80 e0       	ldi	r24, 0x00	; 0
    2f32:	90 e0       	ldi	r25, 0x00	; 0
    2f34:	a8 ec       	ldi	r26, 0xC8	; 200
    2f36:	b2 e4       	ldi	r27, 0x42	; 66
    2f38:	80 83       	st	Z, r24
    2f3a:	91 83       	std	Z+1, r25	; 0x01
    2f3c:	a2 83       	std	Z+2, r26	; 0x02
    2f3e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f40:	8e 01       	movw	r16, r28
    2f42:	01 57       	subi	r16, 0x71	; 113
    2f44:	1e 4f       	sbci	r17, 0xFE	; 254
    2f46:	fe 01       	movw	r30, r28
    2f48:	ed 56       	subi	r30, 0x6D	; 109
    2f4a:	fe 4f       	sbci	r31, 0xFE	; 254
    2f4c:	60 81       	ld	r22, Z
    2f4e:	71 81       	ldd	r23, Z+1	; 0x01
    2f50:	82 81       	ldd	r24, Z+2	; 0x02
    2f52:	93 81       	ldd	r25, Z+3	; 0x03
    2f54:	20 e0       	ldi	r18, 0x00	; 0
    2f56:	30 e0       	ldi	r19, 0x00	; 0
    2f58:	4a ef       	ldi	r20, 0xFA	; 250
    2f5a:	54 e4       	ldi	r21, 0x44	; 68
    2f5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f60:	dc 01       	movw	r26, r24
    2f62:	cb 01       	movw	r24, r22
    2f64:	f8 01       	movw	r30, r16
    2f66:	80 83       	st	Z, r24
    2f68:	91 83       	std	Z+1, r25	; 0x01
    2f6a:	a2 83       	std	Z+2, r26	; 0x02
    2f6c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f6e:	fe 01       	movw	r30, r28
    2f70:	e1 57       	subi	r30, 0x71	; 113
    2f72:	fe 4f       	sbci	r31, 0xFE	; 254
    2f74:	60 81       	ld	r22, Z
    2f76:	71 81       	ldd	r23, Z+1	; 0x01
    2f78:	82 81       	ldd	r24, Z+2	; 0x02
    2f7a:	93 81       	ldd	r25, Z+3	; 0x03
    2f7c:	20 e0       	ldi	r18, 0x00	; 0
    2f7e:	30 e0       	ldi	r19, 0x00	; 0
    2f80:	40 e8       	ldi	r20, 0x80	; 128
    2f82:	5f e3       	ldi	r21, 0x3F	; 63
    2f84:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f88:	88 23       	and	r24, r24
    2f8a:	44 f4       	brge	.+16     	; 0x2f9c <main+0x8cc>
		__ticks = 1;
    2f8c:	fe 01       	movw	r30, r28
    2f8e:	e3 57       	subi	r30, 0x73	; 115
    2f90:	fe 4f       	sbci	r31, 0xFE	; 254
    2f92:	81 e0       	ldi	r24, 0x01	; 1
    2f94:	90 e0       	ldi	r25, 0x00	; 0
    2f96:	91 83       	std	Z+1, r25	; 0x01
    2f98:	80 83       	st	Z, r24
    2f9a:	64 c0       	rjmp	.+200    	; 0x3064 <main+0x994>
	else if (__tmp > 65535)
    2f9c:	fe 01       	movw	r30, r28
    2f9e:	e1 57       	subi	r30, 0x71	; 113
    2fa0:	fe 4f       	sbci	r31, 0xFE	; 254
    2fa2:	60 81       	ld	r22, Z
    2fa4:	71 81       	ldd	r23, Z+1	; 0x01
    2fa6:	82 81       	ldd	r24, Z+2	; 0x02
    2fa8:	93 81       	ldd	r25, Z+3	; 0x03
    2faa:	20 e0       	ldi	r18, 0x00	; 0
    2fac:	3f ef       	ldi	r19, 0xFF	; 255
    2fae:	4f e7       	ldi	r20, 0x7F	; 127
    2fb0:	57 e4       	ldi	r21, 0x47	; 71
    2fb2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2fb6:	18 16       	cp	r1, r24
    2fb8:	0c f0       	brlt	.+2      	; 0x2fbc <main+0x8ec>
    2fba:	43 c0       	rjmp	.+134    	; 0x3042 <main+0x972>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fbc:	fe 01       	movw	r30, r28
    2fbe:	ed 56       	subi	r30, 0x6D	; 109
    2fc0:	fe 4f       	sbci	r31, 0xFE	; 254
    2fc2:	60 81       	ld	r22, Z
    2fc4:	71 81       	ldd	r23, Z+1	; 0x01
    2fc6:	82 81       	ldd	r24, Z+2	; 0x02
    2fc8:	93 81       	ldd	r25, Z+3	; 0x03
    2fca:	20 e0       	ldi	r18, 0x00	; 0
    2fcc:	30 e0       	ldi	r19, 0x00	; 0
    2fce:	40 e2       	ldi	r20, 0x20	; 32
    2fd0:	51 e4       	ldi	r21, 0x41	; 65
    2fd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fd6:	dc 01       	movw	r26, r24
    2fd8:	cb 01       	movw	r24, r22
    2fda:	8e 01       	movw	r16, r28
    2fdc:	03 57       	subi	r16, 0x73	; 115
    2fde:	1e 4f       	sbci	r17, 0xFE	; 254
    2fe0:	bc 01       	movw	r22, r24
    2fe2:	cd 01       	movw	r24, r26
    2fe4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fe8:	dc 01       	movw	r26, r24
    2fea:	cb 01       	movw	r24, r22
    2fec:	f8 01       	movw	r30, r16
    2fee:	91 83       	std	Z+1, r25	; 0x01
    2ff0:	80 83       	st	Z, r24
    2ff2:	1f c0       	rjmp	.+62     	; 0x3032 <main+0x962>
    2ff4:	fe 01       	movw	r30, r28
    2ff6:	e5 57       	subi	r30, 0x75	; 117
    2ff8:	fe 4f       	sbci	r31, 0xFE	; 254
    2ffa:	88 ec       	ldi	r24, 0xC8	; 200
    2ffc:	90 e0       	ldi	r25, 0x00	; 0
    2ffe:	91 83       	std	Z+1, r25	; 0x01
    3000:	80 83       	st	Z, r24
    3002:	fe 01       	movw	r30, r28
    3004:	e5 57       	subi	r30, 0x75	; 117
    3006:	fe 4f       	sbci	r31, 0xFE	; 254
    3008:	80 81       	ld	r24, Z
    300a:	91 81       	ldd	r25, Z+1	; 0x01
    300c:	01 97       	sbiw	r24, 0x01	; 1
    300e:	f1 f7       	brne	.-4      	; 0x300c <main+0x93c>
    3010:	fe 01       	movw	r30, r28
    3012:	e5 57       	subi	r30, 0x75	; 117
    3014:	fe 4f       	sbci	r31, 0xFE	; 254
    3016:	91 83       	std	Z+1, r25	; 0x01
    3018:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    301a:	de 01       	movw	r26, r28
    301c:	a3 57       	subi	r26, 0x73	; 115
    301e:	be 4f       	sbci	r27, 0xFE	; 254
    3020:	fe 01       	movw	r30, r28
    3022:	e3 57       	subi	r30, 0x73	; 115
    3024:	fe 4f       	sbci	r31, 0xFE	; 254
    3026:	80 81       	ld	r24, Z
    3028:	91 81       	ldd	r25, Z+1	; 0x01
    302a:	01 97       	sbiw	r24, 0x01	; 1
    302c:	11 96       	adiw	r26, 0x01	; 1
    302e:	9c 93       	st	X, r25
    3030:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3032:	fe 01       	movw	r30, r28
    3034:	e3 57       	subi	r30, 0x73	; 115
    3036:	fe 4f       	sbci	r31, 0xFE	; 254
    3038:	80 81       	ld	r24, Z
    303a:	91 81       	ldd	r25, Z+1	; 0x01
    303c:	00 97       	sbiw	r24, 0x00	; 0
    303e:	d1 f6       	brne	.-76     	; 0x2ff4 <main+0x924>
    3040:	27 c0       	rjmp	.+78     	; 0x3090 <main+0x9c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3042:	8e 01       	movw	r16, r28
    3044:	03 57       	subi	r16, 0x73	; 115
    3046:	1e 4f       	sbci	r17, 0xFE	; 254
    3048:	fe 01       	movw	r30, r28
    304a:	e1 57       	subi	r30, 0x71	; 113
    304c:	fe 4f       	sbci	r31, 0xFE	; 254
    304e:	60 81       	ld	r22, Z
    3050:	71 81       	ldd	r23, Z+1	; 0x01
    3052:	82 81       	ldd	r24, Z+2	; 0x02
    3054:	93 81       	ldd	r25, Z+3	; 0x03
    3056:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    305a:	dc 01       	movw	r26, r24
    305c:	cb 01       	movw	r24, r22
    305e:	f8 01       	movw	r30, r16
    3060:	91 83       	std	Z+1, r25	; 0x01
    3062:	80 83       	st	Z, r24
    3064:	de 01       	movw	r26, r28
    3066:	a7 57       	subi	r26, 0x77	; 119
    3068:	be 4f       	sbci	r27, 0xFE	; 254
    306a:	fe 01       	movw	r30, r28
    306c:	e3 57       	subi	r30, 0x73	; 115
    306e:	fe 4f       	sbci	r31, 0xFE	; 254
    3070:	80 81       	ld	r24, Z
    3072:	91 81       	ldd	r25, Z+1	; 0x01
    3074:	8d 93       	st	X+, r24
    3076:	9c 93       	st	X, r25
    3078:	fe 01       	movw	r30, r28
    307a:	e7 57       	subi	r30, 0x77	; 119
    307c:	fe 4f       	sbci	r31, 0xFE	; 254
    307e:	80 81       	ld	r24, Z
    3080:	91 81       	ldd	r25, Z+1	; 0x01
    3082:	01 97       	sbiw	r24, 0x01	; 1
    3084:	f1 f7       	brne	.-4      	; 0x3082 <main+0x9b2>
    3086:	fe 01       	movw	r30, r28
    3088:	e7 57       	subi	r30, 0x77	; 119
    308a:	fe 4f       	sbci	r31, 0xFE	; 254
    308c:	91 83       	std	Z+1, r25	; 0x01
    308e:	80 83       	st	Z, r24
				_delay_ms(100);
				LCD_VoidSendCommand(LCD_CURSOROFF);
    3090:	8c e0       	ldi	r24, 0x0C	; 12
    3092:	0e 94 92 0b 	call	0x1724	; 0x1724 <LCD_VoidSendCommand>

				Key_Value = Keypad_GetPressedKey();
    3096:	0e 94 67 12 	call	0x24ce	; 0x24ce <Keypad_GetPressedKey>
    309a:	fe 01       	movw	r30, r28
    309c:	eb 50       	subi	r30, 0x0B	; 11
    309e:	fe 4f       	sbci	r31, 0xFE	; 254
    30a0:	80 83       	st	Z, r24
				if ((Key_Value >= 0) && (Key_Value <= 9))
    30a2:	fe 01       	movw	r30, r28
    30a4:	eb 50       	subi	r30, 0x0B	; 11
    30a6:	fe 4f       	sbci	r31, 0xFE	; 254
    30a8:	80 81       	ld	r24, Z
    30aa:	8a 30       	cpi	r24, 0x0A	; 10
    30ac:	08 f0       	brcs	.+2      	; 0x30b0 <main+0x9e0>
    30ae:	09 c1       	rjmp	.+530    	; 0x32c2 <main+0xbf2>
				{
					LCD_VoidSendNumber(Key_Value);
    30b0:	fe 01       	movw	r30, r28
    30b2:	eb 50       	subi	r30, 0x0B	; 11
    30b4:	fe 4f       	sbci	r31, 0xFE	; 254
    30b6:	80 81       	ld	r24, Z
    30b8:	88 2f       	mov	r24, r24
    30ba:	90 e0       	ldi	r25, 0x00	; 0
    30bc:	a0 e0       	ldi	r26, 0x00	; 0
    30be:	b0 e0       	ldi	r27, 0x00	; 0
    30c0:	bc 01       	movw	r22, r24
    30c2:	cd 01       	movw	r24, r26
    30c4:	0e 94 77 0e 	call	0x1cee	; 0x1cee <LCD_VoidSendNumber>
    30c8:	fe 01       	movw	r30, r28
    30ca:	eb 57       	subi	r30, 0x7B	; 123
    30cc:	fe 4f       	sbci	r31, 0xFE	; 254
    30ce:	80 e0       	ldi	r24, 0x00	; 0
    30d0:	90 e0       	ldi	r25, 0x00	; 0
    30d2:	a8 e4       	ldi	r26, 0x48	; 72
    30d4:	b3 e4       	ldi	r27, 0x43	; 67
    30d6:	80 83       	st	Z, r24
    30d8:	91 83       	std	Z+1, r25	; 0x01
    30da:	a2 83       	std	Z+2, r26	; 0x02
    30dc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30de:	8e 01       	movw	r16, r28
    30e0:	0f 57       	subi	r16, 0x7F	; 127
    30e2:	1e 4f       	sbci	r17, 0xFE	; 254
    30e4:	fe 01       	movw	r30, r28
    30e6:	eb 57       	subi	r30, 0x7B	; 123
    30e8:	fe 4f       	sbci	r31, 0xFE	; 254
    30ea:	60 81       	ld	r22, Z
    30ec:	71 81       	ldd	r23, Z+1	; 0x01
    30ee:	82 81       	ldd	r24, Z+2	; 0x02
    30f0:	93 81       	ldd	r25, Z+3	; 0x03
    30f2:	20 e0       	ldi	r18, 0x00	; 0
    30f4:	30 e0       	ldi	r19, 0x00	; 0
    30f6:	4a ef       	ldi	r20, 0xFA	; 250
    30f8:	54 e4       	ldi	r21, 0x44	; 68
    30fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30fe:	dc 01       	movw	r26, r24
    3100:	cb 01       	movw	r24, r22
    3102:	f8 01       	movw	r30, r16
    3104:	80 83       	st	Z, r24
    3106:	91 83       	std	Z+1, r25	; 0x01
    3108:	a2 83       	std	Z+2, r26	; 0x02
    310a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    310c:	fe 01       	movw	r30, r28
    310e:	ef 57       	subi	r30, 0x7F	; 127
    3110:	fe 4f       	sbci	r31, 0xFE	; 254
    3112:	60 81       	ld	r22, Z
    3114:	71 81       	ldd	r23, Z+1	; 0x01
    3116:	82 81       	ldd	r24, Z+2	; 0x02
    3118:	93 81       	ldd	r25, Z+3	; 0x03
    311a:	20 e0       	ldi	r18, 0x00	; 0
    311c:	30 e0       	ldi	r19, 0x00	; 0
    311e:	40 e8       	ldi	r20, 0x80	; 128
    3120:	5f e3       	ldi	r21, 0x3F	; 63
    3122:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3126:	88 23       	and	r24, r24
    3128:	44 f4       	brge	.+16     	; 0x313a <main+0xa6a>
		__ticks = 1;
    312a:	fe 01       	movw	r30, r28
    312c:	e1 58       	subi	r30, 0x81	; 129
    312e:	fe 4f       	sbci	r31, 0xFE	; 254
    3130:	81 e0       	ldi	r24, 0x01	; 1
    3132:	90 e0       	ldi	r25, 0x00	; 0
    3134:	91 83       	std	Z+1, r25	; 0x01
    3136:	80 83       	st	Z, r24
    3138:	64 c0       	rjmp	.+200    	; 0x3202 <main+0xb32>
	else if (__tmp > 65535)
    313a:	fe 01       	movw	r30, r28
    313c:	ef 57       	subi	r30, 0x7F	; 127
    313e:	fe 4f       	sbci	r31, 0xFE	; 254
    3140:	60 81       	ld	r22, Z
    3142:	71 81       	ldd	r23, Z+1	; 0x01
    3144:	82 81       	ldd	r24, Z+2	; 0x02
    3146:	93 81       	ldd	r25, Z+3	; 0x03
    3148:	20 e0       	ldi	r18, 0x00	; 0
    314a:	3f ef       	ldi	r19, 0xFF	; 255
    314c:	4f e7       	ldi	r20, 0x7F	; 127
    314e:	57 e4       	ldi	r21, 0x47	; 71
    3150:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3154:	18 16       	cp	r1, r24
    3156:	0c f0       	brlt	.+2      	; 0x315a <main+0xa8a>
    3158:	43 c0       	rjmp	.+134    	; 0x31e0 <main+0xb10>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    315a:	fe 01       	movw	r30, r28
    315c:	eb 57       	subi	r30, 0x7B	; 123
    315e:	fe 4f       	sbci	r31, 0xFE	; 254
    3160:	60 81       	ld	r22, Z
    3162:	71 81       	ldd	r23, Z+1	; 0x01
    3164:	82 81       	ldd	r24, Z+2	; 0x02
    3166:	93 81       	ldd	r25, Z+3	; 0x03
    3168:	20 e0       	ldi	r18, 0x00	; 0
    316a:	30 e0       	ldi	r19, 0x00	; 0
    316c:	40 e2       	ldi	r20, 0x20	; 32
    316e:	51 e4       	ldi	r21, 0x41	; 65
    3170:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3174:	dc 01       	movw	r26, r24
    3176:	cb 01       	movw	r24, r22
    3178:	8e 01       	movw	r16, r28
    317a:	01 58       	subi	r16, 0x81	; 129
    317c:	1e 4f       	sbci	r17, 0xFE	; 254
    317e:	bc 01       	movw	r22, r24
    3180:	cd 01       	movw	r24, r26
    3182:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3186:	dc 01       	movw	r26, r24
    3188:	cb 01       	movw	r24, r22
    318a:	f8 01       	movw	r30, r16
    318c:	91 83       	std	Z+1, r25	; 0x01
    318e:	80 83       	st	Z, r24
    3190:	1f c0       	rjmp	.+62     	; 0x31d0 <main+0xb00>
    3192:	fe 01       	movw	r30, r28
    3194:	e3 58       	subi	r30, 0x83	; 131
    3196:	fe 4f       	sbci	r31, 0xFE	; 254
    3198:	88 ec       	ldi	r24, 0xC8	; 200
    319a:	90 e0       	ldi	r25, 0x00	; 0
    319c:	91 83       	std	Z+1, r25	; 0x01
    319e:	80 83       	st	Z, r24
    31a0:	fe 01       	movw	r30, r28
    31a2:	e3 58       	subi	r30, 0x83	; 131
    31a4:	fe 4f       	sbci	r31, 0xFE	; 254
    31a6:	80 81       	ld	r24, Z
    31a8:	91 81       	ldd	r25, Z+1	; 0x01
    31aa:	01 97       	sbiw	r24, 0x01	; 1
    31ac:	f1 f7       	brne	.-4      	; 0x31aa <main+0xada>
    31ae:	fe 01       	movw	r30, r28
    31b0:	e3 58       	subi	r30, 0x83	; 131
    31b2:	fe 4f       	sbci	r31, 0xFE	; 254
    31b4:	91 83       	std	Z+1, r25	; 0x01
    31b6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31b8:	de 01       	movw	r26, r28
    31ba:	a1 58       	subi	r26, 0x81	; 129
    31bc:	be 4f       	sbci	r27, 0xFE	; 254
    31be:	fe 01       	movw	r30, r28
    31c0:	e1 58       	subi	r30, 0x81	; 129
    31c2:	fe 4f       	sbci	r31, 0xFE	; 254
    31c4:	80 81       	ld	r24, Z
    31c6:	91 81       	ldd	r25, Z+1	; 0x01
    31c8:	01 97       	sbiw	r24, 0x01	; 1
    31ca:	11 96       	adiw	r26, 0x01	; 1
    31cc:	9c 93       	st	X, r25
    31ce:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31d0:	fe 01       	movw	r30, r28
    31d2:	e1 58       	subi	r30, 0x81	; 129
    31d4:	fe 4f       	sbci	r31, 0xFE	; 254
    31d6:	80 81       	ld	r24, Z
    31d8:	91 81       	ldd	r25, Z+1	; 0x01
    31da:	00 97       	sbiw	r24, 0x00	; 0
    31dc:	d1 f6       	brne	.-76     	; 0x3192 <main+0xac2>
    31de:	27 c0       	rjmp	.+78     	; 0x322e <main+0xb5e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31e0:	8e 01       	movw	r16, r28
    31e2:	01 58       	subi	r16, 0x81	; 129
    31e4:	1e 4f       	sbci	r17, 0xFE	; 254
    31e6:	fe 01       	movw	r30, r28
    31e8:	ef 57       	subi	r30, 0x7F	; 127
    31ea:	fe 4f       	sbci	r31, 0xFE	; 254
    31ec:	60 81       	ld	r22, Z
    31ee:	71 81       	ldd	r23, Z+1	; 0x01
    31f0:	82 81       	ldd	r24, Z+2	; 0x02
    31f2:	93 81       	ldd	r25, Z+3	; 0x03
    31f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31f8:	dc 01       	movw	r26, r24
    31fa:	cb 01       	movw	r24, r22
    31fc:	f8 01       	movw	r30, r16
    31fe:	91 83       	std	Z+1, r25	; 0x01
    3200:	80 83       	st	Z, r24
    3202:	de 01       	movw	r26, r28
    3204:	a5 58       	subi	r26, 0x85	; 133
    3206:	be 4f       	sbci	r27, 0xFE	; 254
    3208:	fe 01       	movw	r30, r28
    320a:	e1 58       	subi	r30, 0x81	; 129
    320c:	fe 4f       	sbci	r31, 0xFE	; 254
    320e:	80 81       	ld	r24, Z
    3210:	91 81       	ldd	r25, Z+1	; 0x01
    3212:	8d 93       	st	X+, r24
    3214:	9c 93       	st	X, r25
    3216:	fe 01       	movw	r30, r28
    3218:	e5 58       	subi	r30, 0x85	; 133
    321a:	fe 4f       	sbci	r31, 0xFE	; 254
    321c:	80 81       	ld	r24, Z
    321e:	91 81       	ldd	r25, Z+1	; 0x01
    3220:	01 97       	sbiw	r24, 0x01	; 1
    3222:	f1 f7       	brne	.-4      	; 0x3220 <main+0xb50>
    3224:	fe 01       	movw	r30, r28
    3226:	e5 58       	subi	r30, 0x85	; 133
    3228:	fe 4f       	sbci	r31, 0xFE	; 254
    322a:	91 83       	std	Z+1, r25	; 0x01
    322c:	80 83       	st	Z, r24
					_delay_ms(200);
					LCD_VoidSendStringFromPos("*",0,11+i);
    322e:	fe 01       	movw	r30, r28
    3230:	e1 52       	subi	r30, 0x21	; 33
    3232:	fe 4f       	sbci	r31, 0xFE	; 254
    3234:	80 81       	ld	r24, Z
    3236:	28 2f       	mov	r18, r24
    3238:	25 5f       	subi	r18, 0xF5	; 245
    323a:	84 ea       	ldi	r24, 0xA4	; 164
    323c:	90 e0       	ldi	r25, 0x00	; 0
    323e:	60 e0       	ldi	r22, 0x00	; 0
    3240:	42 2f       	mov	r20, r18
    3242:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <LCD_VoidSendStringFromPos>
					_delay_ms(2);
					LCD_VoidSendStringFromPos("Invalid Input",0,1);
					_delay_ms(500);
					break;
				}
				Comp_Pass += Key_Value;
    3246:	fe 01       	movw	r30, r28
    3248:	eb 50       	subi	r30, 0x0B	; 11
    324a:	fe 4f       	sbci	r31, 0xFE	; 254
    324c:	80 81       	ld	r24, Z
    324e:	28 2f       	mov	r18, r24
    3250:	30 e0       	ldi	r19, 0x00	; 0
    3252:	40 e0       	ldi	r20, 0x00	; 0
    3254:	50 e0       	ldi	r21, 0x00	; 0
    3256:	be 01       	movw	r22, r28
    3258:	60 52       	subi	r22, 0x20	; 32
    325a:	7e 4f       	sbci	r23, 0xFE	; 254
    325c:	fe 01       	movw	r30, r28
    325e:	e0 52       	subi	r30, 0x20	; 32
    3260:	fe 4f       	sbci	r31, 0xFE	; 254
    3262:	80 81       	ld	r24, Z
    3264:	91 81       	ldd	r25, Z+1	; 0x01
    3266:	a2 81       	ldd	r26, Z+2	; 0x02
    3268:	b3 81       	ldd	r27, Z+3	; 0x03
    326a:	82 0f       	add	r24, r18
    326c:	93 1f       	adc	r25, r19
    326e:	a4 1f       	adc	r26, r20
    3270:	b5 1f       	adc	r27, r21
    3272:	fb 01       	movw	r30, r22
    3274:	80 83       	st	Z, r24
    3276:	91 83       	std	Z+1, r25	; 0x01
    3278:	a2 83       	std	Z+2, r26	; 0x02
    327a:	b3 83       	std	Z+3, r27	; 0x03
				Comp_Pass = Comp_Pass * 10;
    327c:	8e 01       	movw	r16, r28
    327e:	00 52       	subi	r16, 0x20	; 32
    3280:	1e 4f       	sbci	r17, 0xFE	; 254
    3282:	fe 01       	movw	r30, r28
    3284:	e0 52       	subi	r30, 0x20	; 32
    3286:	fe 4f       	sbci	r31, 0xFE	; 254
    3288:	80 81       	ld	r24, Z
    328a:	91 81       	ldd	r25, Z+1	; 0x01
    328c:	a2 81       	ldd	r26, Z+2	; 0x02
    328e:	b3 81       	ldd	r27, Z+3	; 0x03
    3290:	2a e0       	ldi	r18, 0x0A	; 10
    3292:	30 e0       	ldi	r19, 0x00	; 0
    3294:	40 e0       	ldi	r20, 0x00	; 0
    3296:	50 e0       	ldi	r21, 0x00	; 0
    3298:	bc 01       	movw	r22, r24
    329a:	cd 01       	movw	r24, r26
    329c:	0e 94 d5 2d 	call	0x5baa	; 0x5baa <__mulsi3>
    32a0:	dc 01       	movw	r26, r24
    32a2:	cb 01       	movw	r24, r22
    32a4:	f8 01       	movw	r30, r16
    32a6:	80 83       	st	Z, r24
    32a8:	91 83       	std	Z+1, r25	; 0x01
    32aa:	a2 83       	std	Z+2, r26	; 0x02
    32ac:	b3 83       	std	Z+3, r27	; 0x03
		if (Chosen_Mode == 1)
		{
			LCD_VoidSendCommand(LCD_ClearDisplay);
			_delay_ms(2);
			LCD_VoidSendString("Password : ");
			for (u8 i = 0; i < 4 ; i++)
    32ae:	de 01       	movw	r26, r28
    32b0:	a1 52       	subi	r26, 0x21	; 33
    32b2:	be 4f       	sbci	r27, 0xFE	; 254
    32b4:	fe 01       	movw	r30, r28
    32b6:	e1 52       	subi	r30, 0x21	; 33
    32b8:	fe 4f       	sbci	r31, 0xFE	; 254
    32ba:	80 81       	ld	r24, Z
    32bc:	8f 5f       	subi	r24, 0xFF	; 255
    32be:	8c 93       	st	X, r24
    32c0:	71 c1       	rjmp	.+738    	; 0x35a4 <main+0xed4>
					_delay_ms(200);
					LCD_VoidSendStringFromPos("*",0,11+i);
				}
				else
				{
					LCD_VoidSendCommand(LCD_ClearDisplay);
    32c2:	81 e0       	ldi	r24, 0x01	; 1
    32c4:	0e 94 92 0b 	call	0x1724	; 0x1724 <LCD_VoidSendCommand>
    32c8:	fe 01       	movw	r30, r28
    32ca:	e9 58       	subi	r30, 0x89	; 137
    32cc:	fe 4f       	sbci	r31, 0xFE	; 254
    32ce:	80 e0       	ldi	r24, 0x00	; 0
    32d0:	90 e0       	ldi	r25, 0x00	; 0
    32d2:	a0 e0       	ldi	r26, 0x00	; 0
    32d4:	b0 e4       	ldi	r27, 0x40	; 64
    32d6:	80 83       	st	Z, r24
    32d8:	91 83       	std	Z+1, r25	; 0x01
    32da:	a2 83       	std	Z+2, r26	; 0x02
    32dc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32de:	8e 01       	movw	r16, r28
    32e0:	0d 58       	subi	r16, 0x8D	; 141
    32e2:	1e 4f       	sbci	r17, 0xFE	; 254
    32e4:	fe 01       	movw	r30, r28
    32e6:	e9 58       	subi	r30, 0x89	; 137
    32e8:	fe 4f       	sbci	r31, 0xFE	; 254
    32ea:	60 81       	ld	r22, Z
    32ec:	71 81       	ldd	r23, Z+1	; 0x01
    32ee:	82 81       	ldd	r24, Z+2	; 0x02
    32f0:	93 81       	ldd	r25, Z+3	; 0x03
    32f2:	20 e0       	ldi	r18, 0x00	; 0
    32f4:	30 e0       	ldi	r19, 0x00	; 0
    32f6:	4a ef       	ldi	r20, 0xFA	; 250
    32f8:	54 e4       	ldi	r21, 0x44	; 68
    32fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32fe:	dc 01       	movw	r26, r24
    3300:	cb 01       	movw	r24, r22
    3302:	f8 01       	movw	r30, r16
    3304:	80 83       	st	Z, r24
    3306:	91 83       	std	Z+1, r25	; 0x01
    3308:	a2 83       	std	Z+2, r26	; 0x02
    330a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    330c:	fe 01       	movw	r30, r28
    330e:	ed 58       	subi	r30, 0x8D	; 141
    3310:	fe 4f       	sbci	r31, 0xFE	; 254
    3312:	60 81       	ld	r22, Z
    3314:	71 81       	ldd	r23, Z+1	; 0x01
    3316:	82 81       	ldd	r24, Z+2	; 0x02
    3318:	93 81       	ldd	r25, Z+3	; 0x03
    331a:	20 e0       	ldi	r18, 0x00	; 0
    331c:	30 e0       	ldi	r19, 0x00	; 0
    331e:	40 e8       	ldi	r20, 0x80	; 128
    3320:	5f e3       	ldi	r21, 0x3F	; 63
    3322:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3326:	88 23       	and	r24, r24
    3328:	44 f4       	brge	.+16     	; 0x333a <main+0xc6a>
		__ticks = 1;
    332a:	fe 01       	movw	r30, r28
    332c:	ef 58       	subi	r30, 0x8F	; 143
    332e:	fe 4f       	sbci	r31, 0xFE	; 254
    3330:	81 e0       	ldi	r24, 0x01	; 1
    3332:	90 e0       	ldi	r25, 0x00	; 0
    3334:	91 83       	std	Z+1, r25	; 0x01
    3336:	80 83       	st	Z, r24
    3338:	64 c0       	rjmp	.+200    	; 0x3402 <main+0xd32>
	else if (__tmp > 65535)
    333a:	fe 01       	movw	r30, r28
    333c:	ed 58       	subi	r30, 0x8D	; 141
    333e:	fe 4f       	sbci	r31, 0xFE	; 254
    3340:	60 81       	ld	r22, Z
    3342:	71 81       	ldd	r23, Z+1	; 0x01
    3344:	82 81       	ldd	r24, Z+2	; 0x02
    3346:	93 81       	ldd	r25, Z+3	; 0x03
    3348:	20 e0       	ldi	r18, 0x00	; 0
    334a:	3f ef       	ldi	r19, 0xFF	; 255
    334c:	4f e7       	ldi	r20, 0x7F	; 127
    334e:	57 e4       	ldi	r21, 0x47	; 71
    3350:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3354:	18 16       	cp	r1, r24
    3356:	0c f0       	brlt	.+2      	; 0x335a <main+0xc8a>
    3358:	43 c0       	rjmp	.+134    	; 0x33e0 <main+0xd10>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    335a:	fe 01       	movw	r30, r28
    335c:	e9 58       	subi	r30, 0x89	; 137
    335e:	fe 4f       	sbci	r31, 0xFE	; 254
    3360:	60 81       	ld	r22, Z
    3362:	71 81       	ldd	r23, Z+1	; 0x01
    3364:	82 81       	ldd	r24, Z+2	; 0x02
    3366:	93 81       	ldd	r25, Z+3	; 0x03
    3368:	20 e0       	ldi	r18, 0x00	; 0
    336a:	30 e0       	ldi	r19, 0x00	; 0
    336c:	40 e2       	ldi	r20, 0x20	; 32
    336e:	51 e4       	ldi	r21, 0x41	; 65
    3370:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3374:	dc 01       	movw	r26, r24
    3376:	cb 01       	movw	r24, r22
    3378:	8e 01       	movw	r16, r28
    337a:	0f 58       	subi	r16, 0x8F	; 143
    337c:	1e 4f       	sbci	r17, 0xFE	; 254
    337e:	bc 01       	movw	r22, r24
    3380:	cd 01       	movw	r24, r26
    3382:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3386:	dc 01       	movw	r26, r24
    3388:	cb 01       	movw	r24, r22
    338a:	f8 01       	movw	r30, r16
    338c:	91 83       	std	Z+1, r25	; 0x01
    338e:	80 83       	st	Z, r24
    3390:	1f c0       	rjmp	.+62     	; 0x33d0 <main+0xd00>
    3392:	fe 01       	movw	r30, r28
    3394:	e1 59       	subi	r30, 0x91	; 145
    3396:	fe 4f       	sbci	r31, 0xFE	; 254
    3398:	88 ec       	ldi	r24, 0xC8	; 200
    339a:	90 e0       	ldi	r25, 0x00	; 0
    339c:	91 83       	std	Z+1, r25	; 0x01
    339e:	80 83       	st	Z, r24
    33a0:	fe 01       	movw	r30, r28
    33a2:	e1 59       	subi	r30, 0x91	; 145
    33a4:	fe 4f       	sbci	r31, 0xFE	; 254
    33a6:	80 81       	ld	r24, Z
    33a8:	91 81       	ldd	r25, Z+1	; 0x01
    33aa:	01 97       	sbiw	r24, 0x01	; 1
    33ac:	f1 f7       	brne	.-4      	; 0x33aa <main+0xcda>
    33ae:	fe 01       	movw	r30, r28
    33b0:	e1 59       	subi	r30, 0x91	; 145
    33b2:	fe 4f       	sbci	r31, 0xFE	; 254
    33b4:	91 83       	std	Z+1, r25	; 0x01
    33b6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33b8:	de 01       	movw	r26, r28
    33ba:	af 58       	subi	r26, 0x8F	; 143
    33bc:	be 4f       	sbci	r27, 0xFE	; 254
    33be:	fe 01       	movw	r30, r28
    33c0:	ef 58       	subi	r30, 0x8F	; 143
    33c2:	fe 4f       	sbci	r31, 0xFE	; 254
    33c4:	80 81       	ld	r24, Z
    33c6:	91 81       	ldd	r25, Z+1	; 0x01
    33c8:	01 97       	sbiw	r24, 0x01	; 1
    33ca:	11 96       	adiw	r26, 0x01	; 1
    33cc:	9c 93       	st	X, r25
    33ce:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33d0:	fe 01       	movw	r30, r28
    33d2:	ef 58       	subi	r30, 0x8F	; 143
    33d4:	fe 4f       	sbci	r31, 0xFE	; 254
    33d6:	80 81       	ld	r24, Z
    33d8:	91 81       	ldd	r25, Z+1	; 0x01
    33da:	00 97       	sbiw	r24, 0x00	; 0
    33dc:	d1 f6       	brne	.-76     	; 0x3392 <main+0xcc2>
    33de:	27 c0       	rjmp	.+78     	; 0x342e <main+0xd5e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33e0:	8e 01       	movw	r16, r28
    33e2:	0f 58       	subi	r16, 0x8F	; 143
    33e4:	1e 4f       	sbci	r17, 0xFE	; 254
    33e6:	fe 01       	movw	r30, r28
    33e8:	ed 58       	subi	r30, 0x8D	; 141
    33ea:	fe 4f       	sbci	r31, 0xFE	; 254
    33ec:	60 81       	ld	r22, Z
    33ee:	71 81       	ldd	r23, Z+1	; 0x01
    33f0:	82 81       	ldd	r24, Z+2	; 0x02
    33f2:	93 81       	ldd	r25, Z+3	; 0x03
    33f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33f8:	dc 01       	movw	r26, r24
    33fa:	cb 01       	movw	r24, r22
    33fc:	f8 01       	movw	r30, r16
    33fe:	91 83       	std	Z+1, r25	; 0x01
    3400:	80 83       	st	Z, r24
    3402:	de 01       	movw	r26, r28
    3404:	a3 59       	subi	r26, 0x93	; 147
    3406:	be 4f       	sbci	r27, 0xFE	; 254
    3408:	fe 01       	movw	r30, r28
    340a:	ef 58       	subi	r30, 0x8F	; 143
    340c:	fe 4f       	sbci	r31, 0xFE	; 254
    340e:	80 81       	ld	r24, Z
    3410:	91 81       	ldd	r25, Z+1	; 0x01
    3412:	8d 93       	st	X+, r24
    3414:	9c 93       	st	X, r25
    3416:	fe 01       	movw	r30, r28
    3418:	e3 59       	subi	r30, 0x93	; 147
    341a:	fe 4f       	sbci	r31, 0xFE	; 254
    341c:	80 81       	ld	r24, Z
    341e:	91 81       	ldd	r25, Z+1	; 0x01
    3420:	01 97       	sbiw	r24, 0x01	; 1
    3422:	f1 f7       	brne	.-4      	; 0x3420 <main+0xd50>
    3424:	fe 01       	movw	r30, r28
    3426:	e3 59       	subi	r30, 0x93	; 147
    3428:	fe 4f       	sbci	r31, 0xFE	; 254
    342a:	91 83       	std	Z+1, r25	; 0x01
    342c:	80 83       	st	Z, r24
					_delay_ms(2);
					LCD_VoidSendStringFromPos("Invalid Input",0,1);
    342e:	86 ea       	ldi	r24, 0xA6	; 166
    3430:	90 e0       	ldi	r25, 0x00	; 0
    3432:	60 e0       	ldi	r22, 0x00	; 0
    3434:	41 e0       	ldi	r20, 0x01	; 1
    3436:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <LCD_VoidSendStringFromPos>
    343a:	fe 01       	movw	r30, r28
    343c:	e7 59       	subi	r30, 0x97	; 151
    343e:	fe 4f       	sbci	r31, 0xFE	; 254
    3440:	80 e0       	ldi	r24, 0x00	; 0
    3442:	90 e0       	ldi	r25, 0x00	; 0
    3444:	aa ef       	ldi	r26, 0xFA	; 250
    3446:	b3 e4       	ldi	r27, 0x43	; 67
    3448:	80 83       	st	Z, r24
    344a:	91 83       	std	Z+1, r25	; 0x01
    344c:	a2 83       	std	Z+2, r26	; 0x02
    344e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3450:	8e 01       	movw	r16, r28
    3452:	0b 59       	subi	r16, 0x9B	; 155
    3454:	1e 4f       	sbci	r17, 0xFE	; 254
    3456:	fe 01       	movw	r30, r28
    3458:	e7 59       	subi	r30, 0x97	; 151
    345a:	fe 4f       	sbci	r31, 0xFE	; 254
    345c:	60 81       	ld	r22, Z
    345e:	71 81       	ldd	r23, Z+1	; 0x01
    3460:	82 81       	ldd	r24, Z+2	; 0x02
    3462:	93 81       	ldd	r25, Z+3	; 0x03
    3464:	20 e0       	ldi	r18, 0x00	; 0
    3466:	30 e0       	ldi	r19, 0x00	; 0
    3468:	4a ef       	ldi	r20, 0xFA	; 250
    346a:	54 e4       	ldi	r21, 0x44	; 68
    346c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3470:	dc 01       	movw	r26, r24
    3472:	cb 01       	movw	r24, r22
    3474:	f8 01       	movw	r30, r16
    3476:	80 83       	st	Z, r24
    3478:	91 83       	std	Z+1, r25	; 0x01
    347a:	a2 83       	std	Z+2, r26	; 0x02
    347c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    347e:	fe 01       	movw	r30, r28
    3480:	eb 59       	subi	r30, 0x9B	; 155
    3482:	fe 4f       	sbci	r31, 0xFE	; 254
    3484:	60 81       	ld	r22, Z
    3486:	71 81       	ldd	r23, Z+1	; 0x01
    3488:	82 81       	ldd	r24, Z+2	; 0x02
    348a:	93 81       	ldd	r25, Z+3	; 0x03
    348c:	20 e0       	ldi	r18, 0x00	; 0
    348e:	30 e0       	ldi	r19, 0x00	; 0
    3490:	40 e8       	ldi	r20, 0x80	; 128
    3492:	5f e3       	ldi	r21, 0x3F	; 63
    3494:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3498:	88 23       	and	r24, r24
    349a:	44 f4       	brge	.+16     	; 0x34ac <main+0xddc>
		__ticks = 1;
    349c:	fe 01       	movw	r30, r28
    349e:	ed 59       	subi	r30, 0x9D	; 157
    34a0:	fe 4f       	sbci	r31, 0xFE	; 254
    34a2:	81 e0       	ldi	r24, 0x01	; 1
    34a4:	90 e0       	ldi	r25, 0x00	; 0
    34a6:	91 83       	std	Z+1, r25	; 0x01
    34a8:	80 83       	st	Z, r24
    34aa:	64 c0       	rjmp	.+200    	; 0x3574 <main+0xea4>
	else if (__tmp > 65535)
    34ac:	fe 01       	movw	r30, r28
    34ae:	eb 59       	subi	r30, 0x9B	; 155
    34b0:	fe 4f       	sbci	r31, 0xFE	; 254
    34b2:	60 81       	ld	r22, Z
    34b4:	71 81       	ldd	r23, Z+1	; 0x01
    34b6:	82 81       	ldd	r24, Z+2	; 0x02
    34b8:	93 81       	ldd	r25, Z+3	; 0x03
    34ba:	20 e0       	ldi	r18, 0x00	; 0
    34bc:	3f ef       	ldi	r19, 0xFF	; 255
    34be:	4f e7       	ldi	r20, 0x7F	; 127
    34c0:	57 e4       	ldi	r21, 0x47	; 71
    34c2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    34c6:	18 16       	cp	r1, r24
    34c8:	0c f0       	brlt	.+2      	; 0x34cc <main+0xdfc>
    34ca:	43 c0       	rjmp	.+134    	; 0x3552 <main+0xe82>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34cc:	fe 01       	movw	r30, r28
    34ce:	e7 59       	subi	r30, 0x97	; 151
    34d0:	fe 4f       	sbci	r31, 0xFE	; 254
    34d2:	60 81       	ld	r22, Z
    34d4:	71 81       	ldd	r23, Z+1	; 0x01
    34d6:	82 81       	ldd	r24, Z+2	; 0x02
    34d8:	93 81       	ldd	r25, Z+3	; 0x03
    34da:	20 e0       	ldi	r18, 0x00	; 0
    34dc:	30 e0       	ldi	r19, 0x00	; 0
    34de:	40 e2       	ldi	r20, 0x20	; 32
    34e0:	51 e4       	ldi	r21, 0x41	; 65
    34e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34e6:	dc 01       	movw	r26, r24
    34e8:	cb 01       	movw	r24, r22
    34ea:	8e 01       	movw	r16, r28
    34ec:	0d 59       	subi	r16, 0x9D	; 157
    34ee:	1e 4f       	sbci	r17, 0xFE	; 254
    34f0:	bc 01       	movw	r22, r24
    34f2:	cd 01       	movw	r24, r26
    34f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34f8:	dc 01       	movw	r26, r24
    34fa:	cb 01       	movw	r24, r22
    34fc:	f8 01       	movw	r30, r16
    34fe:	91 83       	std	Z+1, r25	; 0x01
    3500:	80 83       	st	Z, r24
    3502:	1f c0       	rjmp	.+62     	; 0x3542 <main+0xe72>
    3504:	fe 01       	movw	r30, r28
    3506:	ef 59       	subi	r30, 0x9F	; 159
    3508:	fe 4f       	sbci	r31, 0xFE	; 254
    350a:	88 ec       	ldi	r24, 0xC8	; 200
    350c:	90 e0       	ldi	r25, 0x00	; 0
    350e:	91 83       	std	Z+1, r25	; 0x01
    3510:	80 83       	st	Z, r24
    3512:	fe 01       	movw	r30, r28
    3514:	ef 59       	subi	r30, 0x9F	; 159
    3516:	fe 4f       	sbci	r31, 0xFE	; 254
    3518:	80 81       	ld	r24, Z
    351a:	91 81       	ldd	r25, Z+1	; 0x01
    351c:	01 97       	sbiw	r24, 0x01	; 1
    351e:	f1 f7       	brne	.-4      	; 0x351c <main+0xe4c>
    3520:	fe 01       	movw	r30, r28
    3522:	ef 59       	subi	r30, 0x9F	; 159
    3524:	fe 4f       	sbci	r31, 0xFE	; 254
    3526:	91 83       	std	Z+1, r25	; 0x01
    3528:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    352a:	de 01       	movw	r26, r28
    352c:	ad 59       	subi	r26, 0x9D	; 157
    352e:	be 4f       	sbci	r27, 0xFE	; 254
    3530:	fe 01       	movw	r30, r28
    3532:	ed 59       	subi	r30, 0x9D	; 157
    3534:	fe 4f       	sbci	r31, 0xFE	; 254
    3536:	80 81       	ld	r24, Z
    3538:	91 81       	ldd	r25, Z+1	; 0x01
    353a:	01 97       	sbiw	r24, 0x01	; 1
    353c:	11 96       	adiw	r26, 0x01	; 1
    353e:	9c 93       	st	X, r25
    3540:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3542:	fe 01       	movw	r30, r28
    3544:	ed 59       	subi	r30, 0x9D	; 157
    3546:	fe 4f       	sbci	r31, 0xFE	; 254
    3548:	80 81       	ld	r24, Z
    354a:	91 81       	ldd	r25, Z+1	; 0x01
    354c:	00 97       	sbiw	r24, 0x00	; 0
    354e:	d1 f6       	brne	.-76     	; 0x3504 <main+0xe34>
    3550:	30 c0       	rjmp	.+96     	; 0x35b2 <main+0xee2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3552:	8e 01       	movw	r16, r28
    3554:	0d 59       	subi	r16, 0x9D	; 157
    3556:	1e 4f       	sbci	r17, 0xFE	; 254
    3558:	fe 01       	movw	r30, r28
    355a:	eb 59       	subi	r30, 0x9B	; 155
    355c:	fe 4f       	sbci	r31, 0xFE	; 254
    355e:	60 81       	ld	r22, Z
    3560:	71 81       	ldd	r23, Z+1	; 0x01
    3562:	82 81       	ldd	r24, Z+2	; 0x02
    3564:	93 81       	ldd	r25, Z+3	; 0x03
    3566:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    356a:	dc 01       	movw	r26, r24
    356c:	cb 01       	movw	r24, r22
    356e:	f8 01       	movw	r30, r16
    3570:	91 83       	std	Z+1, r25	; 0x01
    3572:	80 83       	st	Z, r24
    3574:	de 01       	movw	r26, r28
    3576:	a1 5a       	subi	r26, 0xA1	; 161
    3578:	be 4f       	sbci	r27, 0xFE	; 254
    357a:	fe 01       	movw	r30, r28
    357c:	ed 59       	subi	r30, 0x9D	; 157
    357e:	fe 4f       	sbci	r31, 0xFE	; 254
    3580:	80 81       	ld	r24, Z
    3582:	91 81       	ldd	r25, Z+1	; 0x01
    3584:	11 96       	adiw	r26, 0x01	; 1
    3586:	9c 93       	st	X, r25
    3588:	8e 93       	st	-X, r24
    358a:	fe 01       	movw	r30, r28
    358c:	e1 5a       	subi	r30, 0xA1	; 161
    358e:	fe 4f       	sbci	r31, 0xFE	; 254
    3590:	80 81       	ld	r24, Z
    3592:	91 81       	ldd	r25, Z+1	; 0x01
    3594:	01 97       	sbiw	r24, 0x01	; 1
    3596:	f1 f7       	brne	.-4      	; 0x3594 <main+0xec4>
    3598:	fe 01       	movw	r30, r28
    359a:	e1 5a       	subi	r30, 0xA1	; 161
    359c:	fe 4f       	sbci	r31, 0xFE	; 254
    359e:	91 83       	std	Z+1, r25	; 0x01
    35a0:	80 83       	st	Z, r24
    35a2:	07 c0       	rjmp	.+14     	; 0x35b2 <main+0xee2>
		if (Chosen_Mode == 1)
		{
			LCD_VoidSendCommand(LCD_ClearDisplay);
			_delay_ms(2);
			LCD_VoidSendString("Password : ");
			for (u8 i = 0; i < 4 ; i++)
    35a4:	fe 01       	movw	r30, r28
    35a6:	e1 52       	subi	r30, 0x21	; 33
    35a8:	fe 4f       	sbci	r31, 0xFE	; 254
    35aa:	80 81       	ld	r24, Z
    35ac:	84 30       	cpi	r24, 0x04	; 4
    35ae:	08 f4       	brcc	.+2      	; 0x35b2 <main+0xee2>
    35b0:	b9 cc       	rjmp	.-1678   	; 0x2f24 <main+0x854>
					break;
				}
				Comp_Pass += Key_Value;
				Comp_Pass = Comp_Pass * 10;
			}
			Comp_Pass = Comp_Pass / 10;
    35b2:	8e 01       	movw	r16, r28
    35b4:	00 52       	subi	r16, 0x20	; 32
    35b6:	1e 4f       	sbci	r17, 0xFE	; 254
    35b8:	fe 01       	movw	r30, r28
    35ba:	e0 52       	subi	r30, 0x20	; 32
    35bc:	fe 4f       	sbci	r31, 0xFE	; 254
    35be:	80 81       	ld	r24, Z
    35c0:	91 81       	ldd	r25, Z+1	; 0x01
    35c2:	a2 81       	ldd	r26, Z+2	; 0x02
    35c4:	b3 81       	ldd	r27, Z+3	; 0x03
    35c6:	2a e0       	ldi	r18, 0x0A	; 10
    35c8:	30 e0       	ldi	r19, 0x00	; 0
    35ca:	40 e0       	ldi	r20, 0x00	; 0
    35cc:	50 e0       	ldi	r21, 0x00	; 0
    35ce:	bc 01       	movw	r22, r24
    35d0:	cd 01       	movw	r24, r26
    35d2:	0e 94 f4 2d 	call	0x5be8	; 0x5be8 <__udivmodsi4>
    35d6:	da 01       	movw	r26, r20
    35d8:	c9 01       	movw	r24, r18
    35da:	f8 01       	movw	r30, r16
    35dc:	80 83       	st	Z, r24
    35de:	91 83       	std	Z+1, r25	; 0x01
    35e0:	a2 83       	std	Z+2, r26	; 0x02
    35e2:	b3 83       	std	Z+3, r27	; 0x03
    35e4:	fe 01       	movw	r30, r28
    35e6:	e5 5a       	subi	r30, 0xA5	; 165
    35e8:	fe 4f       	sbci	r31, 0xFE	; 254
    35ea:	80 e0       	ldi	r24, 0x00	; 0
    35ec:	90 e0       	ldi	r25, 0x00	; 0
    35ee:	aa ef       	ldi	r26, 0xFA	; 250
    35f0:	b3 e4       	ldi	r27, 0x43	; 67
    35f2:	80 83       	st	Z, r24
    35f4:	91 83       	std	Z+1, r25	; 0x01
    35f6:	a2 83       	std	Z+2, r26	; 0x02
    35f8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35fa:	8e 01       	movw	r16, r28
    35fc:	09 5a       	subi	r16, 0xA9	; 169
    35fe:	1e 4f       	sbci	r17, 0xFE	; 254
    3600:	fe 01       	movw	r30, r28
    3602:	e5 5a       	subi	r30, 0xA5	; 165
    3604:	fe 4f       	sbci	r31, 0xFE	; 254
    3606:	60 81       	ld	r22, Z
    3608:	71 81       	ldd	r23, Z+1	; 0x01
    360a:	82 81       	ldd	r24, Z+2	; 0x02
    360c:	93 81       	ldd	r25, Z+3	; 0x03
    360e:	20 e0       	ldi	r18, 0x00	; 0
    3610:	30 e0       	ldi	r19, 0x00	; 0
    3612:	4a ef       	ldi	r20, 0xFA	; 250
    3614:	54 e4       	ldi	r21, 0x44	; 68
    3616:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    361a:	dc 01       	movw	r26, r24
    361c:	cb 01       	movw	r24, r22
    361e:	f8 01       	movw	r30, r16
    3620:	80 83       	st	Z, r24
    3622:	91 83       	std	Z+1, r25	; 0x01
    3624:	a2 83       	std	Z+2, r26	; 0x02
    3626:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3628:	fe 01       	movw	r30, r28
    362a:	e9 5a       	subi	r30, 0xA9	; 169
    362c:	fe 4f       	sbci	r31, 0xFE	; 254
    362e:	60 81       	ld	r22, Z
    3630:	71 81       	ldd	r23, Z+1	; 0x01
    3632:	82 81       	ldd	r24, Z+2	; 0x02
    3634:	93 81       	ldd	r25, Z+3	; 0x03
    3636:	20 e0       	ldi	r18, 0x00	; 0
    3638:	30 e0       	ldi	r19, 0x00	; 0
    363a:	40 e8       	ldi	r20, 0x80	; 128
    363c:	5f e3       	ldi	r21, 0x3F	; 63
    363e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3642:	88 23       	and	r24, r24
    3644:	44 f4       	brge	.+16     	; 0x3656 <main+0xf86>
		__ticks = 1;
    3646:	fe 01       	movw	r30, r28
    3648:	eb 5a       	subi	r30, 0xAB	; 171
    364a:	fe 4f       	sbci	r31, 0xFE	; 254
    364c:	81 e0       	ldi	r24, 0x01	; 1
    364e:	90 e0       	ldi	r25, 0x00	; 0
    3650:	91 83       	std	Z+1, r25	; 0x01
    3652:	80 83       	st	Z, r24
    3654:	64 c0       	rjmp	.+200    	; 0x371e <main+0x104e>
	else if (__tmp > 65535)
    3656:	fe 01       	movw	r30, r28
    3658:	e9 5a       	subi	r30, 0xA9	; 169
    365a:	fe 4f       	sbci	r31, 0xFE	; 254
    365c:	60 81       	ld	r22, Z
    365e:	71 81       	ldd	r23, Z+1	; 0x01
    3660:	82 81       	ldd	r24, Z+2	; 0x02
    3662:	93 81       	ldd	r25, Z+3	; 0x03
    3664:	20 e0       	ldi	r18, 0x00	; 0
    3666:	3f ef       	ldi	r19, 0xFF	; 255
    3668:	4f e7       	ldi	r20, 0x7F	; 127
    366a:	57 e4       	ldi	r21, 0x47	; 71
    366c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3670:	18 16       	cp	r1, r24
    3672:	0c f0       	brlt	.+2      	; 0x3676 <main+0xfa6>
    3674:	43 c0       	rjmp	.+134    	; 0x36fc <main+0x102c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3676:	fe 01       	movw	r30, r28
    3678:	e5 5a       	subi	r30, 0xA5	; 165
    367a:	fe 4f       	sbci	r31, 0xFE	; 254
    367c:	60 81       	ld	r22, Z
    367e:	71 81       	ldd	r23, Z+1	; 0x01
    3680:	82 81       	ldd	r24, Z+2	; 0x02
    3682:	93 81       	ldd	r25, Z+3	; 0x03
    3684:	20 e0       	ldi	r18, 0x00	; 0
    3686:	30 e0       	ldi	r19, 0x00	; 0
    3688:	40 e2       	ldi	r20, 0x20	; 32
    368a:	51 e4       	ldi	r21, 0x41	; 65
    368c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3690:	dc 01       	movw	r26, r24
    3692:	cb 01       	movw	r24, r22
    3694:	8e 01       	movw	r16, r28
    3696:	0b 5a       	subi	r16, 0xAB	; 171
    3698:	1e 4f       	sbci	r17, 0xFE	; 254
    369a:	bc 01       	movw	r22, r24
    369c:	cd 01       	movw	r24, r26
    369e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36a2:	dc 01       	movw	r26, r24
    36a4:	cb 01       	movw	r24, r22
    36a6:	f8 01       	movw	r30, r16
    36a8:	91 83       	std	Z+1, r25	; 0x01
    36aa:	80 83       	st	Z, r24
    36ac:	1f c0       	rjmp	.+62     	; 0x36ec <main+0x101c>
    36ae:	fe 01       	movw	r30, r28
    36b0:	ed 5a       	subi	r30, 0xAD	; 173
    36b2:	fe 4f       	sbci	r31, 0xFE	; 254
    36b4:	88 ec       	ldi	r24, 0xC8	; 200
    36b6:	90 e0       	ldi	r25, 0x00	; 0
    36b8:	91 83       	std	Z+1, r25	; 0x01
    36ba:	80 83       	st	Z, r24
    36bc:	fe 01       	movw	r30, r28
    36be:	ed 5a       	subi	r30, 0xAD	; 173
    36c0:	fe 4f       	sbci	r31, 0xFE	; 254
    36c2:	80 81       	ld	r24, Z
    36c4:	91 81       	ldd	r25, Z+1	; 0x01
    36c6:	01 97       	sbiw	r24, 0x01	; 1
    36c8:	f1 f7       	brne	.-4      	; 0x36c6 <main+0xff6>
    36ca:	fe 01       	movw	r30, r28
    36cc:	ed 5a       	subi	r30, 0xAD	; 173
    36ce:	fe 4f       	sbci	r31, 0xFE	; 254
    36d0:	91 83       	std	Z+1, r25	; 0x01
    36d2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36d4:	de 01       	movw	r26, r28
    36d6:	ab 5a       	subi	r26, 0xAB	; 171
    36d8:	be 4f       	sbci	r27, 0xFE	; 254
    36da:	fe 01       	movw	r30, r28
    36dc:	eb 5a       	subi	r30, 0xAB	; 171
    36de:	fe 4f       	sbci	r31, 0xFE	; 254
    36e0:	80 81       	ld	r24, Z
    36e2:	91 81       	ldd	r25, Z+1	; 0x01
    36e4:	01 97       	sbiw	r24, 0x01	; 1
    36e6:	11 96       	adiw	r26, 0x01	; 1
    36e8:	9c 93       	st	X, r25
    36ea:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36ec:	fe 01       	movw	r30, r28
    36ee:	eb 5a       	subi	r30, 0xAB	; 171
    36f0:	fe 4f       	sbci	r31, 0xFE	; 254
    36f2:	80 81       	ld	r24, Z
    36f4:	91 81       	ldd	r25, Z+1	; 0x01
    36f6:	00 97       	sbiw	r24, 0x00	; 0
    36f8:	d1 f6       	brne	.-76     	; 0x36ae <main+0xfde>
    36fa:	27 c0       	rjmp	.+78     	; 0x374a <main+0x107a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36fc:	8e 01       	movw	r16, r28
    36fe:	0b 5a       	subi	r16, 0xAB	; 171
    3700:	1e 4f       	sbci	r17, 0xFE	; 254
    3702:	fe 01       	movw	r30, r28
    3704:	e9 5a       	subi	r30, 0xA9	; 169
    3706:	fe 4f       	sbci	r31, 0xFE	; 254
    3708:	60 81       	ld	r22, Z
    370a:	71 81       	ldd	r23, Z+1	; 0x01
    370c:	82 81       	ldd	r24, Z+2	; 0x02
    370e:	93 81       	ldd	r25, Z+3	; 0x03
    3710:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3714:	dc 01       	movw	r26, r24
    3716:	cb 01       	movw	r24, r22
    3718:	f8 01       	movw	r30, r16
    371a:	91 83       	std	Z+1, r25	; 0x01
    371c:	80 83       	st	Z, r24
    371e:	de 01       	movw	r26, r28
    3720:	af 5a       	subi	r26, 0xAF	; 175
    3722:	be 4f       	sbci	r27, 0xFE	; 254
    3724:	fe 01       	movw	r30, r28
    3726:	eb 5a       	subi	r30, 0xAB	; 171
    3728:	fe 4f       	sbci	r31, 0xFE	; 254
    372a:	80 81       	ld	r24, Z
    372c:	91 81       	ldd	r25, Z+1	; 0x01
    372e:	8d 93       	st	X+, r24
    3730:	9c 93       	st	X, r25
    3732:	fe 01       	movw	r30, r28
    3734:	ef 5a       	subi	r30, 0xAF	; 175
    3736:	fe 4f       	sbci	r31, 0xFE	; 254
    3738:	80 81       	ld	r24, Z
    373a:	91 81       	ldd	r25, Z+1	; 0x01
    373c:	01 97       	sbiw	r24, 0x01	; 1
    373e:	f1 f7       	brne	.-4      	; 0x373c <main+0x106c>
    3740:	fe 01       	movw	r30, r28
    3742:	ef 5a       	subi	r30, 0xAF	; 175
    3744:	fe 4f       	sbci	r31, 0xFE	; 254
    3746:	91 83       	std	Z+1, r25	; 0x01
    3748:	80 83       	st	Z, r24
			_delay_ms(500);
			LCD_VoidSendCommand(LCD_ClearDisplay);
    374a:	81 e0       	ldi	r24, 0x01	; 1
    374c:	0e 94 92 0b 	call	0x1724	; 0x1724 <LCD_VoidSendCommand>
    3750:	fe 01       	movw	r30, r28
    3752:	e3 5b       	subi	r30, 0xB3	; 179
    3754:	fe 4f       	sbci	r31, 0xFE	; 254
    3756:	80 e0       	ldi	r24, 0x00	; 0
    3758:	90 e0       	ldi	r25, 0x00	; 0
    375a:	a0 e0       	ldi	r26, 0x00	; 0
    375c:	b0 e4       	ldi	r27, 0x40	; 64
    375e:	80 83       	st	Z, r24
    3760:	91 83       	std	Z+1, r25	; 0x01
    3762:	a2 83       	std	Z+2, r26	; 0x02
    3764:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3766:	8e 01       	movw	r16, r28
    3768:	07 5b       	subi	r16, 0xB7	; 183
    376a:	1e 4f       	sbci	r17, 0xFE	; 254
    376c:	fe 01       	movw	r30, r28
    376e:	e3 5b       	subi	r30, 0xB3	; 179
    3770:	fe 4f       	sbci	r31, 0xFE	; 254
    3772:	60 81       	ld	r22, Z
    3774:	71 81       	ldd	r23, Z+1	; 0x01
    3776:	82 81       	ldd	r24, Z+2	; 0x02
    3778:	93 81       	ldd	r25, Z+3	; 0x03
    377a:	20 e0       	ldi	r18, 0x00	; 0
    377c:	30 e0       	ldi	r19, 0x00	; 0
    377e:	4a ef       	ldi	r20, 0xFA	; 250
    3780:	54 e4       	ldi	r21, 0x44	; 68
    3782:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3786:	dc 01       	movw	r26, r24
    3788:	cb 01       	movw	r24, r22
    378a:	f8 01       	movw	r30, r16
    378c:	80 83       	st	Z, r24
    378e:	91 83       	std	Z+1, r25	; 0x01
    3790:	a2 83       	std	Z+2, r26	; 0x02
    3792:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3794:	fe 01       	movw	r30, r28
    3796:	e7 5b       	subi	r30, 0xB7	; 183
    3798:	fe 4f       	sbci	r31, 0xFE	; 254
    379a:	60 81       	ld	r22, Z
    379c:	71 81       	ldd	r23, Z+1	; 0x01
    379e:	82 81       	ldd	r24, Z+2	; 0x02
    37a0:	93 81       	ldd	r25, Z+3	; 0x03
    37a2:	20 e0       	ldi	r18, 0x00	; 0
    37a4:	30 e0       	ldi	r19, 0x00	; 0
    37a6:	40 e8       	ldi	r20, 0x80	; 128
    37a8:	5f e3       	ldi	r21, 0x3F	; 63
    37aa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    37ae:	88 23       	and	r24, r24
    37b0:	44 f4       	brge	.+16     	; 0x37c2 <main+0x10f2>
		__ticks = 1;
    37b2:	fe 01       	movw	r30, r28
    37b4:	e9 5b       	subi	r30, 0xB9	; 185
    37b6:	fe 4f       	sbci	r31, 0xFE	; 254
    37b8:	81 e0       	ldi	r24, 0x01	; 1
    37ba:	90 e0       	ldi	r25, 0x00	; 0
    37bc:	91 83       	std	Z+1, r25	; 0x01
    37be:	80 83       	st	Z, r24
    37c0:	64 c0       	rjmp	.+200    	; 0x388a <main+0x11ba>
	else if (__tmp > 65535)
    37c2:	fe 01       	movw	r30, r28
    37c4:	e7 5b       	subi	r30, 0xB7	; 183
    37c6:	fe 4f       	sbci	r31, 0xFE	; 254
    37c8:	60 81       	ld	r22, Z
    37ca:	71 81       	ldd	r23, Z+1	; 0x01
    37cc:	82 81       	ldd	r24, Z+2	; 0x02
    37ce:	93 81       	ldd	r25, Z+3	; 0x03
    37d0:	20 e0       	ldi	r18, 0x00	; 0
    37d2:	3f ef       	ldi	r19, 0xFF	; 255
    37d4:	4f e7       	ldi	r20, 0x7F	; 127
    37d6:	57 e4       	ldi	r21, 0x47	; 71
    37d8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    37dc:	18 16       	cp	r1, r24
    37de:	0c f0       	brlt	.+2      	; 0x37e2 <main+0x1112>
    37e0:	43 c0       	rjmp	.+134    	; 0x3868 <main+0x1198>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37e2:	fe 01       	movw	r30, r28
    37e4:	e3 5b       	subi	r30, 0xB3	; 179
    37e6:	fe 4f       	sbci	r31, 0xFE	; 254
    37e8:	60 81       	ld	r22, Z
    37ea:	71 81       	ldd	r23, Z+1	; 0x01
    37ec:	82 81       	ldd	r24, Z+2	; 0x02
    37ee:	93 81       	ldd	r25, Z+3	; 0x03
    37f0:	20 e0       	ldi	r18, 0x00	; 0
    37f2:	30 e0       	ldi	r19, 0x00	; 0
    37f4:	40 e2       	ldi	r20, 0x20	; 32
    37f6:	51 e4       	ldi	r21, 0x41	; 65
    37f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37fc:	dc 01       	movw	r26, r24
    37fe:	cb 01       	movw	r24, r22
    3800:	8e 01       	movw	r16, r28
    3802:	09 5b       	subi	r16, 0xB9	; 185
    3804:	1e 4f       	sbci	r17, 0xFE	; 254
    3806:	bc 01       	movw	r22, r24
    3808:	cd 01       	movw	r24, r26
    380a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    380e:	dc 01       	movw	r26, r24
    3810:	cb 01       	movw	r24, r22
    3812:	f8 01       	movw	r30, r16
    3814:	91 83       	std	Z+1, r25	; 0x01
    3816:	80 83       	st	Z, r24
    3818:	1f c0       	rjmp	.+62     	; 0x3858 <main+0x1188>
    381a:	fe 01       	movw	r30, r28
    381c:	eb 5b       	subi	r30, 0xBB	; 187
    381e:	fe 4f       	sbci	r31, 0xFE	; 254
    3820:	88 ec       	ldi	r24, 0xC8	; 200
    3822:	90 e0       	ldi	r25, 0x00	; 0
    3824:	91 83       	std	Z+1, r25	; 0x01
    3826:	80 83       	st	Z, r24
    3828:	fe 01       	movw	r30, r28
    382a:	eb 5b       	subi	r30, 0xBB	; 187
    382c:	fe 4f       	sbci	r31, 0xFE	; 254
    382e:	80 81       	ld	r24, Z
    3830:	91 81       	ldd	r25, Z+1	; 0x01
    3832:	01 97       	sbiw	r24, 0x01	; 1
    3834:	f1 f7       	brne	.-4      	; 0x3832 <main+0x1162>
    3836:	fe 01       	movw	r30, r28
    3838:	eb 5b       	subi	r30, 0xBB	; 187
    383a:	fe 4f       	sbci	r31, 0xFE	; 254
    383c:	91 83       	std	Z+1, r25	; 0x01
    383e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3840:	de 01       	movw	r26, r28
    3842:	a9 5b       	subi	r26, 0xB9	; 185
    3844:	be 4f       	sbci	r27, 0xFE	; 254
    3846:	fe 01       	movw	r30, r28
    3848:	e9 5b       	subi	r30, 0xB9	; 185
    384a:	fe 4f       	sbci	r31, 0xFE	; 254
    384c:	80 81       	ld	r24, Z
    384e:	91 81       	ldd	r25, Z+1	; 0x01
    3850:	01 97       	sbiw	r24, 0x01	; 1
    3852:	11 96       	adiw	r26, 0x01	; 1
    3854:	9c 93       	st	X, r25
    3856:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3858:	fe 01       	movw	r30, r28
    385a:	e9 5b       	subi	r30, 0xB9	; 185
    385c:	fe 4f       	sbci	r31, 0xFE	; 254
    385e:	80 81       	ld	r24, Z
    3860:	91 81       	ldd	r25, Z+1	; 0x01
    3862:	00 97       	sbiw	r24, 0x00	; 0
    3864:	d1 f6       	brne	.-76     	; 0x381a <main+0x114a>
    3866:	27 c0       	rjmp	.+78     	; 0x38b6 <main+0x11e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3868:	8e 01       	movw	r16, r28
    386a:	09 5b       	subi	r16, 0xB9	; 185
    386c:	1e 4f       	sbci	r17, 0xFE	; 254
    386e:	fe 01       	movw	r30, r28
    3870:	e7 5b       	subi	r30, 0xB7	; 183
    3872:	fe 4f       	sbci	r31, 0xFE	; 254
    3874:	60 81       	ld	r22, Z
    3876:	71 81       	ldd	r23, Z+1	; 0x01
    3878:	82 81       	ldd	r24, Z+2	; 0x02
    387a:	93 81       	ldd	r25, Z+3	; 0x03
    387c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3880:	dc 01       	movw	r26, r24
    3882:	cb 01       	movw	r24, r22
    3884:	f8 01       	movw	r30, r16
    3886:	91 83       	std	Z+1, r25	; 0x01
    3888:	80 83       	st	Z, r24
    388a:	de 01       	movw	r26, r28
    388c:	ad 5b       	subi	r26, 0xBD	; 189
    388e:	be 4f       	sbci	r27, 0xFE	; 254
    3890:	fe 01       	movw	r30, r28
    3892:	e9 5b       	subi	r30, 0xB9	; 185
    3894:	fe 4f       	sbci	r31, 0xFE	; 254
    3896:	80 81       	ld	r24, Z
    3898:	91 81       	ldd	r25, Z+1	; 0x01
    389a:	8d 93       	st	X+, r24
    389c:	9c 93       	st	X, r25
    389e:	fe 01       	movw	r30, r28
    38a0:	ed 5b       	subi	r30, 0xBD	; 189
    38a2:	fe 4f       	sbci	r31, 0xFE	; 254
    38a4:	80 81       	ld	r24, Z
    38a6:	91 81       	ldd	r25, Z+1	; 0x01
    38a8:	01 97       	sbiw	r24, 0x01	; 1
    38aa:	f1 f7       	brne	.-4      	; 0x38a8 <main+0x11d8>
    38ac:	fe 01       	movw	r30, r28
    38ae:	ed 5b       	subi	r30, 0xBD	; 189
    38b0:	fe 4f       	sbci	r31, 0xFE	; 254
    38b2:	91 83       	std	Z+1, r25	; 0x01
    38b4:	80 83       	st	Z, r24
			_delay_ms(2);
			if (Saved_Pass == Comp_Pass)
    38b6:	fe 01       	movw	r30, r28
    38b8:	e0 51       	subi	r30, 0x10	; 16
    38ba:	fe 4f       	sbci	r31, 0xFE	; 254
    38bc:	de 01       	movw	r26, r28
    38be:	a0 52       	subi	r26, 0x20	; 32
    38c0:	be 4f       	sbci	r27, 0xFE	; 254
    38c2:	20 81       	ld	r18, Z
    38c4:	31 81       	ldd	r19, Z+1	; 0x01
    38c6:	42 81       	ldd	r20, Z+2	; 0x02
    38c8:	53 81       	ldd	r21, Z+3	; 0x03
    38ca:	8d 91       	ld	r24, X+
    38cc:	9d 91       	ld	r25, X+
    38ce:	0d 90       	ld	r0, X+
    38d0:	bc 91       	ld	r27, X
    38d2:	a0 2d       	mov	r26, r0
    38d4:	28 17       	cp	r18, r24
    38d6:	39 07       	cpc	r19, r25
    38d8:	4a 07       	cpc	r20, r26
    38da:	5b 07       	cpc	r21, r27
    38dc:	09 f0       	breq	.+2      	; 0x38e0 <main+0x1210>
    38de:	93 c1       	rjmp	.+806    	; 0x3c06 <main+0x1536>
			{
				LCD_VoidSendString("Welcome Back");
    38e0:	84 eb       	ldi	r24, 0xB4	; 180
    38e2:	90 e0       	ldi	r25, 0x00	; 0
    38e4:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <LCD_VoidSendString>
				DIO_PORTC = (DIO_PORTC & 0xF0) | (motor_steps[1] & 0x0F);  // 90
    38e8:	a5 e3       	ldi	r26, 0x35	; 53
    38ea:	b0 e0       	ldi	r27, 0x00	; 0
    38ec:	e5 e3       	ldi	r30, 0x35	; 53
    38ee:	f0 e0       	ldi	r31, 0x00	; 0
    38f0:	80 81       	ld	r24, Z
    38f2:	98 2f       	mov	r25, r24
    38f4:	90 7f       	andi	r25, 0xF0	; 240
    38f6:	fe 01       	movw	r30, r28
    38f8:	e3 50       	subi	r30, 0x03	; 3
    38fa:	fe 4f       	sbci	r31, 0xFE	; 254
    38fc:	81 81       	ldd	r24, Z+1	; 0x01
    38fe:	8f 70       	andi	r24, 0x0F	; 15
    3900:	89 2b       	or	r24, r25
    3902:	8c 93       	st	X, r24
    3904:	fe 01       	movw	r30, r28
    3906:	e1 5c       	subi	r30, 0xC1	; 193
    3908:	fe 4f       	sbci	r31, 0xFE	; 254
    390a:	80 e0       	ldi	r24, 0x00	; 0
    390c:	90 e0       	ldi	r25, 0x00	; 0
    390e:	aa ef       	ldi	r26, 0xFA	; 250
    3910:	b4 e4       	ldi	r27, 0x44	; 68
    3912:	80 83       	st	Z, r24
    3914:	91 83       	std	Z+1, r25	; 0x01
    3916:	a2 83       	std	Z+2, r26	; 0x02
    3918:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    391a:	8e 01       	movw	r16, r28
    391c:	05 5c       	subi	r16, 0xC5	; 197
    391e:	1e 4f       	sbci	r17, 0xFE	; 254
    3920:	fe 01       	movw	r30, r28
    3922:	e1 5c       	subi	r30, 0xC1	; 193
    3924:	fe 4f       	sbci	r31, 0xFE	; 254
    3926:	60 81       	ld	r22, Z
    3928:	71 81       	ldd	r23, Z+1	; 0x01
    392a:	82 81       	ldd	r24, Z+2	; 0x02
    392c:	93 81       	ldd	r25, Z+3	; 0x03
    392e:	20 e0       	ldi	r18, 0x00	; 0
    3930:	30 e0       	ldi	r19, 0x00	; 0
    3932:	4a ef       	ldi	r20, 0xFA	; 250
    3934:	54 e4       	ldi	r21, 0x44	; 68
    3936:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    393a:	dc 01       	movw	r26, r24
    393c:	cb 01       	movw	r24, r22
    393e:	f8 01       	movw	r30, r16
    3940:	80 83       	st	Z, r24
    3942:	91 83       	std	Z+1, r25	; 0x01
    3944:	a2 83       	std	Z+2, r26	; 0x02
    3946:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3948:	fe 01       	movw	r30, r28
    394a:	e5 5c       	subi	r30, 0xC5	; 197
    394c:	fe 4f       	sbci	r31, 0xFE	; 254
    394e:	60 81       	ld	r22, Z
    3950:	71 81       	ldd	r23, Z+1	; 0x01
    3952:	82 81       	ldd	r24, Z+2	; 0x02
    3954:	93 81       	ldd	r25, Z+3	; 0x03
    3956:	20 e0       	ldi	r18, 0x00	; 0
    3958:	30 e0       	ldi	r19, 0x00	; 0
    395a:	40 e8       	ldi	r20, 0x80	; 128
    395c:	5f e3       	ldi	r21, 0x3F	; 63
    395e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3962:	88 23       	and	r24, r24
    3964:	44 f4       	brge	.+16     	; 0x3976 <main+0x12a6>
		__ticks = 1;
    3966:	fe 01       	movw	r30, r28
    3968:	e7 5c       	subi	r30, 0xC7	; 199
    396a:	fe 4f       	sbci	r31, 0xFE	; 254
    396c:	81 e0       	ldi	r24, 0x01	; 1
    396e:	90 e0       	ldi	r25, 0x00	; 0
    3970:	91 83       	std	Z+1, r25	; 0x01
    3972:	80 83       	st	Z, r24
    3974:	64 c0       	rjmp	.+200    	; 0x3a3e <main+0x136e>
	else if (__tmp > 65535)
    3976:	fe 01       	movw	r30, r28
    3978:	e5 5c       	subi	r30, 0xC5	; 197
    397a:	fe 4f       	sbci	r31, 0xFE	; 254
    397c:	60 81       	ld	r22, Z
    397e:	71 81       	ldd	r23, Z+1	; 0x01
    3980:	82 81       	ldd	r24, Z+2	; 0x02
    3982:	93 81       	ldd	r25, Z+3	; 0x03
    3984:	20 e0       	ldi	r18, 0x00	; 0
    3986:	3f ef       	ldi	r19, 0xFF	; 255
    3988:	4f e7       	ldi	r20, 0x7F	; 127
    398a:	57 e4       	ldi	r21, 0x47	; 71
    398c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3990:	18 16       	cp	r1, r24
    3992:	0c f0       	brlt	.+2      	; 0x3996 <main+0x12c6>
    3994:	43 c0       	rjmp	.+134    	; 0x3a1c <main+0x134c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3996:	fe 01       	movw	r30, r28
    3998:	e1 5c       	subi	r30, 0xC1	; 193
    399a:	fe 4f       	sbci	r31, 0xFE	; 254
    399c:	60 81       	ld	r22, Z
    399e:	71 81       	ldd	r23, Z+1	; 0x01
    39a0:	82 81       	ldd	r24, Z+2	; 0x02
    39a2:	93 81       	ldd	r25, Z+3	; 0x03
    39a4:	20 e0       	ldi	r18, 0x00	; 0
    39a6:	30 e0       	ldi	r19, 0x00	; 0
    39a8:	40 e2       	ldi	r20, 0x20	; 32
    39aa:	51 e4       	ldi	r21, 0x41	; 65
    39ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39b0:	dc 01       	movw	r26, r24
    39b2:	cb 01       	movw	r24, r22
    39b4:	8e 01       	movw	r16, r28
    39b6:	07 5c       	subi	r16, 0xC7	; 199
    39b8:	1e 4f       	sbci	r17, 0xFE	; 254
    39ba:	bc 01       	movw	r22, r24
    39bc:	cd 01       	movw	r24, r26
    39be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39c2:	dc 01       	movw	r26, r24
    39c4:	cb 01       	movw	r24, r22
    39c6:	f8 01       	movw	r30, r16
    39c8:	91 83       	std	Z+1, r25	; 0x01
    39ca:	80 83       	st	Z, r24
    39cc:	1f c0       	rjmp	.+62     	; 0x3a0c <main+0x133c>
    39ce:	fe 01       	movw	r30, r28
    39d0:	e9 5c       	subi	r30, 0xC9	; 201
    39d2:	fe 4f       	sbci	r31, 0xFE	; 254
    39d4:	88 ec       	ldi	r24, 0xC8	; 200
    39d6:	90 e0       	ldi	r25, 0x00	; 0
    39d8:	91 83       	std	Z+1, r25	; 0x01
    39da:	80 83       	st	Z, r24
    39dc:	fe 01       	movw	r30, r28
    39de:	e9 5c       	subi	r30, 0xC9	; 201
    39e0:	fe 4f       	sbci	r31, 0xFE	; 254
    39e2:	80 81       	ld	r24, Z
    39e4:	91 81       	ldd	r25, Z+1	; 0x01
    39e6:	01 97       	sbiw	r24, 0x01	; 1
    39e8:	f1 f7       	brne	.-4      	; 0x39e6 <main+0x1316>
    39ea:	fe 01       	movw	r30, r28
    39ec:	e9 5c       	subi	r30, 0xC9	; 201
    39ee:	fe 4f       	sbci	r31, 0xFE	; 254
    39f0:	91 83       	std	Z+1, r25	; 0x01
    39f2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39f4:	de 01       	movw	r26, r28
    39f6:	a7 5c       	subi	r26, 0xC7	; 199
    39f8:	be 4f       	sbci	r27, 0xFE	; 254
    39fa:	fe 01       	movw	r30, r28
    39fc:	e7 5c       	subi	r30, 0xC7	; 199
    39fe:	fe 4f       	sbci	r31, 0xFE	; 254
    3a00:	80 81       	ld	r24, Z
    3a02:	91 81       	ldd	r25, Z+1	; 0x01
    3a04:	01 97       	sbiw	r24, 0x01	; 1
    3a06:	11 96       	adiw	r26, 0x01	; 1
    3a08:	9c 93       	st	X, r25
    3a0a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a0c:	fe 01       	movw	r30, r28
    3a0e:	e7 5c       	subi	r30, 0xC7	; 199
    3a10:	fe 4f       	sbci	r31, 0xFE	; 254
    3a12:	80 81       	ld	r24, Z
    3a14:	91 81       	ldd	r25, Z+1	; 0x01
    3a16:	00 97       	sbiw	r24, 0x00	; 0
    3a18:	d1 f6       	brne	.-76     	; 0x39ce <main+0x12fe>
    3a1a:	27 c0       	rjmp	.+78     	; 0x3a6a <main+0x139a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a1c:	8e 01       	movw	r16, r28
    3a1e:	07 5c       	subi	r16, 0xC7	; 199
    3a20:	1e 4f       	sbci	r17, 0xFE	; 254
    3a22:	fe 01       	movw	r30, r28
    3a24:	e5 5c       	subi	r30, 0xC5	; 197
    3a26:	fe 4f       	sbci	r31, 0xFE	; 254
    3a28:	60 81       	ld	r22, Z
    3a2a:	71 81       	ldd	r23, Z+1	; 0x01
    3a2c:	82 81       	ldd	r24, Z+2	; 0x02
    3a2e:	93 81       	ldd	r25, Z+3	; 0x03
    3a30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a34:	dc 01       	movw	r26, r24
    3a36:	cb 01       	movw	r24, r22
    3a38:	f8 01       	movw	r30, r16
    3a3a:	91 83       	std	Z+1, r25	; 0x01
    3a3c:	80 83       	st	Z, r24
    3a3e:	de 01       	movw	r26, r28
    3a40:	ab 5c       	subi	r26, 0xCB	; 203
    3a42:	be 4f       	sbci	r27, 0xFE	; 254
    3a44:	fe 01       	movw	r30, r28
    3a46:	e7 5c       	subi	r30, 0xC7	; 199
    3a48:	fe 4f       	sbci	r31, 0xFE	; 254
    3a4a:	80 81       	ld	r24, Z
    3a4c:	91 81       	ldd	r25, Z+1	; 0x01
    3a4e:	8d 93       	st	X+, r24
    3a50:	9c 93       	st	X, r25
    3a52:	fe 01       	movw	r30, r28
    3a54:	eb 5c       	subi	r30, 0xCB	; 203
    3a56:	fe 4f       	sbci	r31, 0xFE	; 254
    3a58:	80 81       	ld	r24, Z
    3a5a:	91 81       	ldd	r25, Z+1	; 0x01
    3a5c:	01 97       	sbiw	r24, 0x01	; 1
    3a5e:	f1 f7       	brne	.-4      	; 0x3a5c <main+0x138c>
    3a60:	fe 01       	movw	r30, r28
    3a62:	eb 5c       	subi	r30, 0xCB	; 203
    3a64:	fe 4f       	sbci	r31, 0xFE	; 254
    3a66:	91 83       	std	Z+1, r25	; 0x01
    3a68:	80 83       	st	Z, r24
				_delay_ms(2000);
				DIO_PORTC = (DIO_PORTC & 0xF0) | (motor_steps[0] & 0x0F);  //   0
    3a6a:	a5 e3       	ldi	r26, 0x35	; 53
    3a6c:	b0 e0       	ldi	r27, 0x00	; 0
    3a6e:	e5 e3       	ldi	r30, 0x35	; 53
    3a70:	f0 e0       	ldi	r31, 0x00	; 0
    3a72:	80 81       	ld	r24, Z
    3a74:	98 2f       	mov	r25, r24
    3a76:	90 7f       	andi	r25, 0xF0	; 240
    3a78:	fe 01       	movw	r30, r28
    3a7a:	e3 50       	subi	r30, 0x03	; 3
    3a7c:	fe 4f       	sbci	r31, 0xFE	; 254
    3a7e:	80 81       	ld	r24, Z
    3a80:	8f 70       	andi	r24, 0x0F	; 15
    3a82:	89 2b       	or	r24, r25
    3a84:	8c 93       	st	X, r24
				LCD_VoidSendCommand(LCD_ClearDisplay);
    3a86:	81 e0       	ldi	r24, 0x01	; 1
    3a88:	0e 94 92 0b 	call	0x1724	; 0x1724 <LCD_VoidSendCommand>
    3a8c:	fe 01       	movw	r30, r28
    3a8e:	ef 5c       	subi	r30, 0xCF	; 207
    3a90:	fe 4f       	sbci	r31, 0xFE	; 254
    3a92:	80 e0       	ldi	r24, 0x00	; 0
    3a94:	90 e0       	ldi	r25, 0x00	; 0
    3a96:	a0 e0       	ldi	r26, 0x00	; 0
    3a98:	b0 e4       	ldi	r27, 0x40	; 64
    3a9a:	80 83       	st	Z, r24
    3a9c:	91 83       	std	Z+1, r25	; 0x01
    3a9e:	a2 83       	std	Z+2, r26	; 0x02
    3aa0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3aa2:	8e 01       	movw	r16, r28
    3aa4:	03 5d       	subi	r16, 0xD3	; 211
    3aa6:	1e 4f       	sbci	r17, 0xFE	; 254
    3aa8:	fe 01       	movw	r30, r28
    3aaa:	ef 5c       	subi	r30, 0xCF	; 207
    3aac:	fe 4f       	sbci	r31, 0xFE	; 254
    3aae:	60 81       	ld	r22, Z
    3ab0:	71 81       	ldd	r23, Z+1	; 0x01
    3ab2:	82 81       	ldd	r24, Z+2	; 0x02
    3ab4:	93 81       	ldd	r25, Z+3	; 0x03
    3ab6:	20 e0       	ldi	r18, 0x00	; 0
    3ab8:	30 e0       	ldi	r19, 0x00	; 0
    3aba:	4a ef       	ldi	r20, 0xFA	; 250
    3abc:	54 e4       	ldi	r21, 0x44	; 68
    3abe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ac2:	dc 01       	movw	r26, r24
    3ac4:	cb 01       	movw	r24, r22
    3ac6:	f8 01       	movw	r30, r16
    3ac8:	80 83       	st	Z, r24
    3aca:	91 83       	std	Z+1, r25	; 0x01
    3acc:	a2 83       	std	Z+2, r26	; 0x02
    3ace:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3ad0:	fe 01       	movw	r30, r28
    3ad2:	e3 5d       	subi	r30, 0xD3	; 211
    3ad4:	fe 4f       	sbci	r31, 0xFE	; 254
    3ad6:	60 81       	ld	r22, Z
    3ad8:	71 81       	ldd	r23, Z+1	; 0x01
    3ada:	82 81       	ldd	r24, Z+2	; 0x02
    3adc:	93 81       	ldd	r25, Z+3	; 0x03
    3ade:	20 e0       	ldi	r18, 0x00	; 0
    3ae0:	30 e0       	ldi	r19, 0x00	; 0
    3ae2:	40 e8       	ldi	r20, 0x80	; 128
    3ae4:	5f e3       	ldi	r21, 0x3F	; 63
    3ae6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3aea:	88 23       	and	r24, r24
    3aec:	44 f4       	brge	.+16     	; 0x3afe <main+0x142e>
		__ticks = 1;
    3aee:	fe 01       	movw	r30, r28
    3af0:	e5 5d       	subi	r30, 0xD5	; 213
    3af2:	fe 4f       	sbci	r31, 0xFE	; 254
    3af4:	81 e0       	ldi	r24, 0x01	; 1
    3af6:	90 e0       	ldi	r25, 0x00	; 0
    3af8:	91 83       	std	Z+1, r25	; 0x01
    3afa:	80 83       	st	Z, r24
    3afc:	64 c0       	rjmp	.+200    	; 0x3bc6 <main+0x14f6>
	else if (__tmp > 65535)
    3afe:	fe 01       	movw	r30, r28
    3b00:	e3 5d       	subi	r30, 0xD3	; 211
    3b02:	fe 4f       	sbci	r31, 0xFE	; 254
    3b04:	60 81       	ld	r22, Z
    3b06:	71 81       	ldd	r23, Z+1	; 0x01
    3b08:	82 81       	ldd	r24, Z+2	; 0x02
    3b0a:	93 81       	ldd	r25, Z+3	; 0x03
    3b0c:	20 e0       	ldi	r18, 0x00	; 0
    3b0e:	3f ef       	ldi	r19, 0xFF	; 255
    3b10:	4f e7       	ldi	r20, 0x7F	; 127
    3b12:	57 e4       	ldi	r21, 0x47	; 71
    3b14:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3b18:	18 16       	cp	r1, r24
    3b1a:	0c f0       	brlt	.+2      	; 0x3b1e <main+0x144e>
    3b1c:	43 c0       	rjmp	.+134    	; 0x3ba4 <main+0x14d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b1e:	fe 01       	movw	r30, r28
    3b20:	ef 5c       	subi	r30, 0xCF	; 207
    3b22:	fe 4f       	sbci	r31, 0xFE	; 254
    3b24:	60 81       	ld	r22, Z
    3b26:	71 81       	ldd	r23, Z+1	; 0x01
    3b28:	82 81       	ldd	r24, Z+2	; 0x02
    3b2a:	93 81       	ldd	r25, Z+3	; 0x03
    3b2c:	20 e0       	ldi	r18, 0x00	; 0
    3b2e:	30 e0       	ldi	r19, 0x00	; 0
    3b30:	40 e2       	ldi	r20, 0x20	; 32
    3b32:	51 e4       	ldi	r21, 0x41	; 65
    3b34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b38:	dc 01       	movw	r26, r24
    3b3a:	cb 01       	movw	r24, r22
    3b3c:	8e 01       	movw	r16, r28
    3b3e:	05 5d       	subi	r16, 0xD5	; 213
    3b40:	1e 4f       	sbci	r17, 0xFE	; 254
    3b42:	bc 01       	movw	r22, r24
    3b44:	cd 01       	movw	r24, r26
    3b46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b4a:	dc 01       	movw	r26, r24
    3b4c:	cb 01       	movw	r24, r22
    3b4e:	f8 01       	movw	r30, r16
    3b50:	91 83       	std	Z+1, r25	; 0x01
    3b52:	80 83       	st	Z, r24
    3b54:	1f c0       	rjmp	.+62     	; 0x3b94 <main+0x14c4>
    3b56:	fe 01       	movw	r30, r28
    3b58:	e7 5d       	subi	r30, 0xD7	; 215
    3b5a:	fe 4f       	sbci	r31, 0xFE	; 254
    3b5c:	88 ec       	ldi	r24, 0xC8	; 200
    3b5e:	90 e0       	ldi	r25, 0x00	; 0
    3b60:	91 83       	std	Z+1, r25	; 0x01
    3b62:	80 83       	st	Z, r24
    3b64:	fe 01       	movw	r30, r28
    3b66:	e7 5d       	subi	r30, 0xD7	; 215
    3b68:	fe 4f       	sbci	r31, 0xFE	; 254
    3b6a:	80 81       	ld	r24, Z
    3b6c:	91 81       	ldd	r25, Z+1	; 0x01
    3b6e:	01 97       	sbiw	r24, 0x01	; 1
    3b70:	f1 f7       	brne	.-4      	; 0x3b6e <main+0x149e>
    3b72:	fe 01       	movw	r30, r28
    3b74:	e7 5d       	subi	r30, 0xD7	; 215
    3b76:	fe 4f       	sbci	r31, 0xFE	; 254
    3b78:	91 83       	std	Z+1, r25	; 0x01
    3b7a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b7c:	de 01       	movw	r26, r28
    3b7e:	a5 5d       	subi	r26, 0xD5	; 213
    3b80:	be 4f       	sbci	r27, 0xFE	; 254
    3b82:	fe 01       	movw	r30, r28
    3b84:	e5 5d       	subi	r30, 0xD5	; 213
    3b86:	fe 4f       	sbci	r31, 0xFE	; 254
    3b88:	80 81       	ld	r24, Z
    3b8a:	91 81       	ldd	r25, Z+1	; 0x01
    3b8c:	01 97       	sbiw	r24, 0x01	; 1
    3b8e:	11 96       	adiw	r26, 0x01	; 1
    3b90:	9c 93       	st	X, r25
    3b92:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b94:	fe 01       	movw	r30, r28
    3b96:	e5 5d       	subi	r30, 0xD5	; 213
    3b98:	fe 4f       	sbci	r31, 0xFE	; 254
    3b9a:	80 81       	ld	r24, Z
    3b9c:	91 81       	ldd	r25, Z+1	; 0x01
    3b9e:	00 97       	sbiw	r24, 0x00	; 0
    3ba0:	d1 f6       	brne	.-76     	; 0x3b56 <main+0x1486>
    3ba2:	28 c0       	rjmp	.+80     	; 0x3bf4 <main+0x1524>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ba4:	8e 01       	movw	r16, r28
    3ba6:	05 5d       	subi	r16, 0xD5	; 213
    3ba8:	1e 4f       	sbci	r17, 0xFE	; 254
    3baa:	fe 01       	movw	r30, r28
    3bac:	e3 5d       	subi	r30, 0xD3	; 211
    3bae:	fe 4f       	sbci	r31, 0xFE	; 254
    3bb0:	60 81       	ld	r22, Z
    3bb2:	71 81       	ldd	r23, Z+1	; 0x01
    3bb4:	82 81       	ldd	r24, Z+2	; 0x02
    3bb6:	93 81       	ldd	r25, Z+3	; 0x03
    3bb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bbc:	dc 01       	movw	r26, r24
    3bbe:	cb 01       	movw	r24, r22
    3bc0:	f8 01       	movw	r30, r16
    3bc2:	91 83       	std	Z+1, r25	; 0x01
    3bc4:	80 83       	st	Z, r24
    3bc6:	de 01       	movw	r26, r28
    3bc8:	a9 5d       	subi	r26, 0xD9	; 217
    3bca:	be 4f       	sbci	r27, 0xFE	; 254
    3bcc:	fe 01       	movw	r30, r28
    3bce:	e5 5d       	subi	r30, 0xD5	; 213
    3bd0:	fe 4f       	sbci	r31, 0xFE	; 254
    3bd2:	80 81       	ld	r24, Z
    3bd4:	91 81       	ldd	r25, Z+1	; 0x01
    3bd6:	11 96       	adiw	r26, 0x01	; 1
    3bd8:	9c 93       	st	X, r25
    3bda:	8e 93       	st	-X, r24
    3bdc:	fe 01       	movw	r30, r28
    3bde:	e9 5d       	subi	r30, 0xD9	; 217
    3be0:	fe 4f       	sbci	r31, 0xFE	; 254
    3be2:	80 81       	ld	r24, Z
    3be4:	91 81       	ldd	r25, Z+1	; 0x01
    3be6:	01 97       	sbiw	r24, 0x01	; 1
    3be8:	f1 f7       	brne	.-4      	; 0x3be6 <main+0x1516>
    3bea:	fe 01       	movw	r30, r28
    3bec:	e9 5d       	subi	r30, 0xD9	; 217
    3bee:	fe 4f       	sbci	r31, 0xFE	; 254
    3bf0:	91 83       	std	Z+1, r25	; 0x01
    3bf2:	80 83       	st	Z, r24
				_delay_ms(2);
				Comp_Pass = 0;
    3bf4:	fe 01       	movw	r30, r28
    3bf6:	e0 52       	subi	r30, 0x20	; 32
    3bf8:	fe 4f       	sbci	r31, 0xFE	; 254
    3bfa:	10 82       	st	Z, r1
    3bfc:	11 82       	std	Z+1, r1	; 0x01
    3bfe:	12 82       	std	Z+2, r1	; 0x02
    3c00:	13 82       	std	Z+3, r1	; 0x03
    3c02:	0c 94 91 14 	jmp	0x2922	; 0x2922 <main+0x252>
			}
			else if (Reversed_Pass == Comp_Pass)
    3c06:	fe 01       	movw	r30, r28
    3c08:	e4 51       	subi	r30, 0x14	; 20
    3c0a:	fe 4f       	sbci	r31, 0xFE	; 254
    3c0c:	de 01       	movw	r26, r28
    3c0e:	a0 52       	subi	r26, 0x20	; 32
    3c10:	be 4f       	sbci	r27, 0xFE	; 254
    3c12:	20 81       	ld	r18, Z
    3c14:	31 81       	ldd	r19, Z+1	; 0x01
    3c16:	42 81       	ldd	r20, Z+2	; 0x02
    3c18:	53 81       	ldd	r21, Z+3	; 0x03
    3c1a:	8d 91       	ld	r24, X+
    3c1c:	9d 91       	ld	r25, X+
    3c1e:	0d 90       	ld	r0, X+
    3c20:	bc 91       	ld	r27, X
    3c22:	a0 2d       	mov	r26, r0
    3c24:	28 17       	cp	r18, r24
    3c26:	39 07       	cpc	r19, r25
    3c28:	4a 07       	cpc	r20, r26
    3c2a:	5b 07       	cpc	r21, r27
    3c2c:	09 f0       	breq	.+2      	; 0x3c30 <main+0x1560>
    3c2e:	79 c1       	rjmp	.+754    	; 0x3f22 <main+0x1852>
			{
				LCD_VoidSendStringFromPos("Calling 911",0,1);
    3c30:	81 ec       	ldi	r24, 0xC1	; 193
    3c32:	90 e0       	ldi	r25, 0x00	; 0
    3c34:	60 e0       	ldi	r22, 0x00	; 0
    3c36:	41 e0       	ldi	r20, 0x01	; 1
    3c38:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <LCD_VoidSendStringFromPos>
    3c3c:	fe 01       	movw	r30, r28
    3c3e:	ed 5d       	subi	r30, 0xDD	; 221
    3c40:	fe 4f       	sbci	r31, 0xFE	; 254
    3c42:	80 e0       	ldi	r24, 0x00	; 0
    3c44:	90 e0       	ldi	r25, 0x00	; 0
    3c46:	aa e7       	ldi	r26, 0x7A	; 122
    3c48:	b4 e4       	ldi	r27, 0x44	; 68
    3c4a:	80 83       	st	Z, r24
    3c4c:	91 83       	std	Z+1, r25	; 0x01
    3c4e:	a2 83       	std	Z+2, r26	; 0x02
    3c50:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c52:	8e 01       	movw	r16, r28
    3c54:	01 5e       	subi	r16, 0xE1	; 225
    3c56:	1e 4f       	sbci	r17, 0xFE	; 254
    3c58:	fe 01       	movw	r30, r28
    3c5a:	ed 5d       	subi	r30, 0xDD	; 221
    3c5c:	fe 4f       	sbci	r31, 0xFE	; 254
    3c5e:	60 81       	ld	r22, Z
    3c60:	71 81       	ldd	r23, Z+1	; 0x01
    3c62:	82 81       	ldd	r24, Z+2	; 0x02
    3c64:	93 81       	ldd	r25, Z+3	; 0x03
    3c66:	20 e0       	ldi	r18, 0x00	; 0
    3c68:	30 e0       	ldi	r19, 0x00	; 0
    3c6a:	4a ef       	ldi	r20, 0xFA	; 250
    3c6c:	54 e4       	ldi	r21, 0x44	; 68
    3c6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c72:	dc 01       	movw	r26, r24
    3c74:	cb 01       	movw	r24, r22
    3c76:	f8 01       	movw	r30, r16
    3c78:	80 83       	st	Z, r24
    3c7a:	91 83       	std	Z+1, r25	; 0x01
    3c7c:	a2 83       	std	Z+2, r26	; 0x02
    3c7e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3c80:	fe 01       	movw	r30, r28
    3c82:	e1 5e       	subi	r30, 0xE1	; 225
    3c84:	fe 4f       	sbci	r31, 0xFE	; 254
    3c86:	60 81       	ld	r22, Z
    3c88:	71 81       	ldd	r23, Z+1	; 0x01
    3c8a:	82 81       	ldd	r24, Z+2	; 0x02
    3c8c:	93 81       	ldd	r25, Z+3	; 0x03
    3c8e:	20 e0       	ldi	r18, 0x00	; 0
    3c90:	30 e0       	ldi	r19, 0x00	; 0
    3c92:	40 e8       	ldi	r20, 0x80	; 128
    3c94:	5f e3       	ldi	r21, 0x3F	; 63
    3c96:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3c9a:	88 23       	and	r24, r24
    3c9c:	44 f4       	brge	.+16     	; 0x3cae <main+0x15de>
		__ticks = 1;
    3c9e:	fe 01       	movw	r30, r28
    3ca0:	e3 5e       	subi	r30, 0xE3	; 227
    3ca2:	fe 4f       	sbci	r31, 0xFE	; 254
    3ca4:	81 e0       	ldi	r24, 0x01	; 1
    3ca6:	90 e0       	ldi	r25, 0x00	; 0
    3ca8:	91 83       	std	Z+1, r25	; 0x01
    3caa:	80 83       	st	Z, r24
    3cac:	64 c0       	rjmp	.+200    	; 0x3d76 <main+0x16a6>
	else if (__tmp > 65535)
    3cae:	fe 01       	movw	r30, r28
    3cb0:	e1 5e       	subi	r30, 0xE1	; 225
    3cb2:	fe 4f       	sbci	r31, 0xFE	; 254
    3cb4:	60 81       	ld	r22, Z
    3cb6:	71 81       	ldd	r23, Z+1	; 0x01
    3cb8:	82 81       	ldd	r24, Z+2	; 0x02
    3cba:	93 81       	ldd	r25, Z+3	; 0x03
    3cbc:	20 e0       	ldi	r18, 0x00	; 0
    3cbe:	3f ef       	ldi	r19, 0xFF	; 255
    3cc0:	4f e7       	ldi	r20, 0x7F	; 127
    3cc2:	57 e4       	ldi	r21, 0x47	; 71
    3cc4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3cc8:	18 16       	cp	r1, r24
    3cca:	0c f0       	brlt	.+2      	; 0x3cce <main+0x15fe>
    3ccc:	43 c0       	rjmp	.+134    	; 0x3d54 <main+0x1684>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3cce:	fe 01       	movw	r30, r28
    3cd0:	ed 5d       	subi	r30, 0xDD	; 221
    3cd2:	fe 4f       	sbci	r31, 0xFE	; 254
    3cd4:	60 81       	ld	r22, Z
    3cd6:	71 81       	ldd	r23, Z+1	; 0x01
    3cd8:	82 81       	ldd	r24, Z+2	; 0x02
    3cda:	93 81       	ldd	r25, Z+3	; 0x03
    3cdc:	20 e0       	ldi	r18, 0x00	; 0
    3cde:	30 e0       	ldi	r19, 0x00	; 0
    3ce0:	40 e2       	ldi	r20, 0x20	; 32
    3ce2:	51 e4       	ldi	r21, 0x41	; 65
    3ce4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ce8:	dc 01       	movw	r26, r24
    3cea:	cb 01       	movw	r24, r22
    3cec:	8e 01       	movw	r16, r28
    3cee:	03 5e       	subi	r16, 0xE3	; 227
    3cf0:	1e 4f       	sbci	r17, 0xFE	; 254
    3cf2:	bc 01       	movw	r22, r24
    3cf4:	cd 01       	movw	r24, r26
    3cf6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cfa:	dc 01       	movw	r26, r24
    3cfc:	cb 01       	movw	r24, r22
    3cfe:	f8 01       	movw	r30, r16
    3d00:	91 83       	std	Z+1, r25	; 0x01
    3d02:	80 83       	st	Z, r24
    3d04:	1f c0       	rjmp	.+62     	; 0x3d44 <main+0x1674>
    3d06:	fe 01       	movw	r30, r28
    3d08:	e5 5e       	subi	r30, 0xE5	; 229
    3d0a:	fe 4f       	sbci	r31, 0xFE	; 254
    3d0c:	88 ec       	ldi	r24, 0xC8	; 200
    3d0e:	90 e0       	ldi	r25, 0x00	; 0
    3d10:	91 83       	std	Z+1, r25	; 0x01
    3d12:	80 83       	st	Z, r24
    3d14:	fe 01       	movw	r30, r28
    3d16:	e5 5e       	subi	r30, 0xE5	; 229
    3d18:	fe 4f       	sbci	r31, 0xFE	; 254
    3d1a:	80 81       	ld	r24, Z
    3d1c:	91 81       	ldd	r25, Z+1	; 0x01
    3d1e:	01 97       	sbiw	r24, 0x01	; 1
    3d20:	f1 f7       	brne	.-4      	; 0x3d1e <main+0x164e>
    3d22:	fe 01       	movw	r30, r28
    3d24:	e5 5e       	subi	r30, 0xE5	; 229
    3d26:	fe 4f       	sbci	r31, 0xFE	; 254
    3d28:	91 83       	std	Z+1, r25	; 0x01
    3d2a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d2c:	de 01       	movw	r26, r28
    3d2e:	a3 5e       	subi	r26, 0xE3	; 227
    3d30:	be 4f       	sbci	r27, 0xFE	; 254
    3d32:	fe 01       	movw	r30, r28
    3d34:	e3 5e       	subi	r30, 0xE3	; 227
    3d36:	fe 4f       	sbci	r31, 0xFE	; 254
    3d38:	80 81       	ld	r24, Z
    3d3a:	91 81       	ldd	r25, Z+1	; 0x01
    3d3c:	01 97       	sbiw	r24, 0x01	; 1
    3d3e:	11 96       	adiw	r26, 0x01	; 1
    3d40:	9c 93       	st	X, r25
    3d42:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d44:	fe 01       	movw	r30, r28
    3d46:	e3 5e       	subi	r30, 0xE3	; 227
    3d48:	fe 4f       	sbci	r31, 0xFE	; 254
    3d4a:	80 81       	ld	r24, Z
    3d4c:	91 81       	ldd	r25, Z+1	; 0x01
    3d4e:	00 97       	sbiw	r24, 0x00	; 0
    3d50:	d1 f6       	brne	.-76     	; 0x3d06 <main+0x1636>
    3d52:	27 c0       	rjmp	.+78     	; 0x3da2 <main+0x16d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d54:	8e 01       	movw	r16, r28
    3d56:	03 5e       	subi	r16, 0xE3	; 227
    3d58:	1e 4f       	sbci	r17, 0xFE	; 254
    3d5a:	fe 01       	movw	r30, r28
    3d5c:	e1 5e       	subi	r30, 0xE1	; 225
    3d5e:	fe 4f       	sbci	r31, 0xFE	; 254
    3d60:	60 81       	ld	r22, Z
    3d62:	71 81       	ldd	r23, Z+1	; 0x01
    3d64:	82 81       	ldd	r24, Z+2	; 0x02
    3d66:	93 81       	ldd	r25, Z+3	; 0x03
    3d68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d6c:	dc 01       	movw	r26, r24
    3d6e:	cb 01       	movw	r24, r22
    3d70:	f8 01       	movw	r30, r16
    3d72:	91 83       	std	Z+1, r25	; 0x01
    3d74:	80 83       	st	Z, r24
    3d76:	de 01       	movw	r26, r28
    3d78:	a7 5e       	subi	r26, 0xE7	; 231
    3d7a:	be 4f       	sbci	r27, 0xFE	; 254
    3d7c:	fe 01       	movw	r30, r28
    3d7e:	e3 5e       	subi	r30, 0xE3	; 227
    3d80:	fe 4f       	sbci	r31, 0xFE	; 254
    3d82:	80 81       	ld	r24, Z
    3d84:	91 81       	ldd	r25, Z+1	; 0x01
    3d86:	8d 93       	st	X+, r24
    3d88:	9c 93       	st	X, r25
    3d8a:	fe 01       	movw	r30, r28
    3d8c:	e7 5e       	subi	r30, 0xE7	; 231
    3d8e:	fe 4f       	sbci	r31, 0xFE	; 254
    3d90:	80 81       	ld	r24, Z
    3d92:	91 81       	ldd	r25, Z+1	; 0x01
    3d94:	01 97       	sbiw	r24, 0x01	; 1
    3d96:	f1 f7       	brne	.-4      	; 0x3d94 <main+0x16c4>
    3d98:	fe 01       	movw	r30, r28
    3d9a:	e7 5e       	subi	r30, 0xE7	; 231
    3d9c:	fe 4f       	sbci	r31, 0xFE	; 254
    3d9e:	91 83       	std	Z+1, r25	; 0x01
    3da0:	80 83       	st	Z, r24
				_delay_ms(1000);
				LCD_VoidSendCommand(LCD_ClearDisplay);
    3da2:	81 e0       	ldi	r24, 0x01	; 1
    3da4:	0e 94 92 0b 	call	0x1724	; 0x1724 <LCD_VoidSendCommand>
    3da8:	fe 01       	movw	r30, r28
    3daa:	eb 5e       	subi	r30, 0xEB	; 235
    3dac:	fe 4f       	sbci	r31, 0xFE	; 254
    3dae:	80 e0       	ldi	r24, 0x00	; 0
    3db0:	90 e0       	ldi	r25, 0x00	; 0
    3db2:	a0 e0       	ldi	r26, 0x00	; 0
    3db4:	b0 e4       	ldi	r27, 0x40	; 64
    3db6:	80 83       	st	Z, r24
    3db8:	91 83       	std	Z+1, r25	; 0x01
    3dba:	a2 83       	std	Z+2, r26	; 0x02
    3dbc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3dbe:	8e 01       	movw	r16, r28
    3dc0:	0f 5e       	subi	r16, 0xEF	; 239
    3dc2:	1e 4f       	sbci	r17, 0xFE	; 254
    3dc4:	fe 01       	movw	r30, r28
    3dc6:	eb 5e       	subi	r30, 0xEB	; 235
    3dc8:	fe 4f       	sbci	r31, 0xFE	; 254
    3dca:	60 81       	ld	r22, Z
    3dcc:	71 81       	ldd	r23, Z+1	; 0x01
    3dce:	82 81       	ldd	r24, Z+2	; 0x02
    3dd0:	93 81       	ldd	r25, Z+3	; 0x03
    3dd2:	20 e0       	ldi	r18, 0x00	; 0
    3dd4:	30 e0       	ldi	r19, 0x00	; 0
    3dd6:	4a ef       	ldi	r20, 0xFA	; 250
    3dd8:	54 e4       	ldi	r21, 0x44	; 68
    3dda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3dde:	dc 01       	movw	r26, r24
    3de0:	cb 01       	movw	r24, r22
    3de2:	f8 01       	movw	r30, r16
    3de4:	80 83       	st	Z, r24
    3de6:	91 83       	std	Z+1, r25	; 0x01
    3de8:	a2 83       	std	Z+2, r26	; 0x02
    3dea:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3dec:	fe 01       	movw	r30, r28
    3dee:	ef 5e       	subi	r30, 0xEF	; 239
    3df0:	fe 4f       	sbci	r31, 0xFE	; 254
    3df2:	60 81       	ld	r22, Z
    3df4:	71 81       	ldd	r23, Z+1	; 0x01
    3df6:	82 81       	ldd	r24, Z+2	; 0x02
    3df8:	93 81       	ldd	r25, Z+3	; 0x03
    3dfa:	20 e0       	ldi	r18, 0x00	; 0
    3dfc:	30 e0       	ldi	r19, 0x00	; 0
    3dfe:	40 e8       	ldi	r20, 0x80	; 128
    3e00:	5f e3       	ldi	r21, 0x3F	; 63
    3e02:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3e06:	88 23       	and	r24, r24
    3e08:	44 f4       	brge	.+16     	; 0x3e1a <main+0x174a>
		__ticks = 1;
    3e0a:	fe 01       	movw	r30, r28
    3e0c:	e1 5f       	subi	r30, 0xF1	; 241
    3e0e:	fe 4f       	sbci	r31, 0xFE	; 254
    3e10:	81 e0       	ldi	r24, 0x01	; 1
    3e12:	90 e0       	ldi	r25, 0x00	; 0
    3e14:	91 83       	std	Z+1, r25	; 0x01
    3e16:	80 83       	st	Z, r24
    3e18:	64 c0       	rjmp	.+200    	; 0x3ee2 <main+0x1812>
	else if (__tmp > 65535)
    3e1a:	fe 01       	movw	r30, r28
    3e1c:	ef 5e       	subi	r30, 0xEF	; 239
    3e1e:	fe 4f       	sbci	r31, 0xFE	; 254
    3e20:	60 81       	ld	r22, Z
    3e22:	71 81       	ldd	r23, Z+1	; 0x01
    3e24:	82 81       	ldd	r24, Z+2	; 0x02
    3e26:	93 81       	ldd	r25, Z+3	; 0x03
    3e28:	20 e0       	ldi	r18, 0x00	; 0
    3e2a:	3f ef       	ldi	r19, 0xFF	; 255
    3e2c:	4f e7       	ldi	r20, 0x7F	; 127
    3e2e:	57 e4       	ldi	r21, 0x47	; 71
    3e30:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3e34:	18 16       	cp	r1, r24
    3e36:	0c f0       	brlt	.+2      	; 0x3e3a <main+0x176a>
    3e38:	43 c0       	rjmp	.+134    	; 0x3ec0 <main+0x17f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e3a:	fe 01       	movw	r30, r28
    3e3c:	eb 5e       	subi	r30, 0xEB	; 235
    3e3e:	fe 4f       	sbci	r31, 0xFE	; 254
    3e40:	60 81       	ld	r22, Z
    3e42:	71 81       	ldd	r23, Z+1	; 0x01
    3e44:	82 81       	ldd	r24, Z+2	; 0x02
    3e46:	93 81       	ldd	r25, Z+3	; 0x03
    3e48:	20 e0       	ldi	r18, 0x00	; 0
    3e4a:	30 e0       	ldi	r19, 0x00	; 0
    3e4c:	40 e2       	ldi	r20, 0x20	; 32
    3e4e:	51 e4       	ldi	r21, 0x41	; 65
    3e50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e54:	dc 01       	movw	r26, r24
    3e56:	cb 01       	movw	r24, r22
    3e58:	8e 01       	movw	r16, r28
    3e5a:	01 5f       	subi	r16, 0xF1	; 241
    3e5c:	1e 4f       	sbci	r17, 0xFE	; 254
    3e5e:	bc 01       	movw	r22, r24
    3e60:	cd 01       	movw	r24, r26
    3e62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e66:	dc 01       	movw	r26, r24
    3e68:	cb 01       	movw	r24, r22
    3e6a:	f8 01       	movw	r30, r16
    3e6c:	91 83       	std	Z+1, r25	; 0x01
    3e6e:	80 83       	st	Z, r24
    3e70:	1f c0       	rjmp	.+62     	; 0x3eb0 <main+0x17e0>
    3e72:	fe 01       	movw	r30, r28
    3e74:	e3 5f       	subi	r30, 0xF3	; 243
    3e76:	fe 4f       	sbci	r31, 0xFE	; 254
    3e78:	88 ec       	ldi	r24, 0xC8	; 200
    3e7a:	90 e0       	ldi	r25, 0x00	; 0
    3e7c:	91 83       	std	Z+1, r25	; 0x01
    3e7e:	80 83       	st	Z, r24
    3e80:	fe 01       	movw	r30, r28
    3e82:	e3 5f       	subi	r30, 0xF3	; 243
    3e84:	fe 4f       	sbci	r31, 0xFE	; 254
    3e86:	80 81       	ld	r24, Z
    3e88:	91 81       	ldd	r25, Z+1	; 0x01
    3e8a:	01 97       	sbiw	r24, 0x01	; 1
    3e8c:	f1 f7       	brne	.-4      	; 0x3e8a <main+0x17ba>
    3e8e:	fe 01       	movw	r30, r28
    3e90:	e3 5f       	subi	r30, 0xF3	; 243
    3e92:	fe 4f       	sbci	r31, 0xFE	; 254
    3e94:	91 83       	std	Z+1, r25	; 0x01
    3e96:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e98:	de 01       	movw	r26, r28
    3e9a:	a1 5f       	subi	r26, 0xF1	; 241
    3e9c:	be 4f       	sbci	r27, 0xFE	; 254
    3e9e:	fe 01       	movw	r30, r28
    3ea0:	e1 5f       	subi	r30, 0xF1	; 241
    3ea2:	fe 4f       	sbci	r31, 0xFE	; 254
    3ea4:	80 81       	ld	r24, Z
    3ea6:	91 81       	ldd	r25, Z+1	; 0x01
    3ea8:	01 97       	sbiw	r24, 0x01	; 1
    3eaa:	11 96       	adiw	r26, 0x01	; 1
    3eac:	9c 93       	st	X, r25
    3eae:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3eb0:	fe 01       	movw	r30, r28
    3eb2:	e1 5f       	subi	r30, 0xF1	; 241
    3eb4:	fe 4f       	sbci	r31, 0xFE	; 254
    3eb6:	80 81       	ld	r24, Z
    3eb8:	91 81       	ldd	r25, Z+1	; 0x01
    3eba:	00 97       	sbiw	r24, 0x00	; 0
    3ebc:	d1 f6       	brne	.-76     	; 0x3e72 <main+0x17a2>
    3ebe:	28 c0       	rjmp	.+80     	; 0x3f10 <main+0x1840>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ec0:	8e 01       	movw	r16, r28
    3ec2:	01 5f       	subi	r16, 0xF1	; 241
    3ec4:	1e 4f       	sbci	r17, 0xFE	; 254
    3ec6:	fe 01       	movw	r30, r28
    3ec8:	ef 5e       	subi	r30, 0xEF	; 239
    3eca:	fe 4f       	sbci	r31, 0xFE	; 254
    3ecc:	60 81       	ld	r22, Z
    3ece:	71 81       	ldd	r23, Z+1	; 0x01
    3ed0:	82 81       	ldd	r24, Z+2	; 0x02
    3ed2:	93 81       	ldd	r25, Z+3	; 0x03
    3ed4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ed8:	dc 01       	movw	r26, r24
    3eda:	cb 01       	movw	r24, r22
    3edc:	f8 01       	movw	r30, r16
    3ede:	91 83       	std	Z+1, r25	; 0x01
    3ee0:	80 83       	st	Z, r24
    3ee2:	de 01       	movw	r26, r28
    3ee4:	a5 5f       	subi	r26, 0xF5	; 245
    3ee6:	be 4f       	sbci	r27, 0xFE	; 254
    3ee8:	fe 01       	movw	r30, r28
    3eea:	e1 5f       	subi	r30, 0xF1	; 241
    3eec:	fe 4f       	sbci	r31, 0xFE	; 254
    3eee:	80 81       	ld	r24, Z
    3ef0:	91 81       	ldd	r25, Z+1	; 0x01
    3ef2:	11 96       	adiw	r26, 0x01	; 1
    3ef4:	9c 93       	st	X, r25
    3ef6:	8e 93       	st	-X, r24
    3ef8:	fe 01       	movw	r30, r28
    3efa:	e5 5f       	subi	r30, 0xF5	; 245
    3efc:	fe 4f       	sbci	r31, 0xFE	; 254
    3efe:	80 81       	ld	r24, Z
    3f00:	91 81       	ldd	r25, Z+1	; 0x01
    3f02:	01 97       	sbiw	r24, 0x01	; 1
    3f04:	f1 f7       	brne	.-4      	; 0x3f02 <main+0x1832>
    3f06:	fe 01       	movw	r30, r28
    3f08:	e5 5f       	subi	r30, 0xF5	; 245
    3f0a:	fe 4f       	sbci	r31, 0xFE	; 254
    3f0c:	91 83       	std	Z+1, r25	; 0x01
    3f0e:	80 83       	st	Z, r24
				_delay_ms(2);
				Comp_Pass = 0;
    3f10:	fe 01       	movw	r30, r28
    3f12:	e0 52       	subi	r30, 0x20	; 32
    3f14:	fe 4f       	sbci	r31, 0xFE	; 254
    3f16:	10 82       	st	Z, r1
    3f18:	11 82       	std	Z+1, r1	; 0x01
    3f1a:	12 82       	std	Z+2, r1	; 0x02
    3f1c:	13 82       	std	Z+3, r1	; 0x03
    3f1e:	0c 94 91 14 	jmp	0x2922	; 0x2922 <main+0x252>
			}
			else
			{
				LCD_VoidSendStringFromPos("Wrong Password",0,1);
    3f22:	8d ec       	ldi	r24, 0xCD	; 205
    3f24:	90 e0       	ldi	r25, 0x00	; 0
    3f26:	60 e0       	ldi	r22, 0x00	; 0
    3f28:	41 e0       	ldi	r20, 0x01	; 1
    3f2a:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <LCD_VoidSendStringFromPos>
    3f2e:	fe 01       	movw	r30, r28
    3f30:	e9 5f       	subi	r30, 0xF9	; 249
    3f32:	fe 4f       	sbci	r31, 0xFE	; 254
    3f34:	80 e0       	ldi	r24, 0x00	; 0
    3f36:	90 e0       	ldi	r25, 0x00	; 0
    3f38:	aa ef       	ldi	r26, 0xFA	; 250
    3f3a:	b3 e4       	ldi	r27, 0x43	; 67
    3f3c:	80 83       	st	Z, r24
    3f3e:	91 83       	std	Z+1, r25	; 0x01
    3f40:	a2 83       	std	Z+2, r26	; 0x02
    3f42:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f44:	8e 01       	movw	r16, r28
    3f46:	0d 5f       	subi	r16, 0xFD	; 253
    3f48:	1e 4f       	sbci	r17, 0xFE	; 254
    3f4a:	fe 01       	movw	r30, r28
    3f4c:	e9 5f       	subi	r30, 0xF9	; 249
    3f4e:	fe 4f       	sbci	r31, 0xFE	; 254
    3f50:	60 81       	ld	r22, Z
    3f52:	71 81       	ldd	r23, Z+1	; 0x01
    3f54:	82 81       	ldd	r24, Z+2	; 0x02
    3f56:	93 81       	ldd	r25, Z+3	; 0x03
    3f58:	20 e0       	ldi	r18, 0x00	; 0
    3f5a:	30 e0       	ldi	r19, 0x00	; 0
    3f5c:	4a ef       	ldi	r20, 0xFA	; 250
    3f5e:	54 e4       	ldi	r21, 0x44	; 68
    3f60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f64:	dc 01       	movw	r26, r24
    3f66:	cb 01       	movw	r24, r22
    3f68:	f8 01       	movw	r30, r16
    3f6a:	80 83       	st	Z, r24
    3f6c:	91 83       	std	Z+1, r25	; 0x01
    3f6e:	a2 83       	std	Z+2, r26	; 0x02
    3f70:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3f72:	fe 01       	movw	r30, r28
    3f74:	ed 5f       	subi	r30, 0xFD	; 253
    3f76:	fe 4f       	sbci	r31, 0xFE	; 254
    3f78:	60 81       	ld	r22, Z
    3f7a:	71 81       	ldd	r23, Z+1	; 0x01
    3f7c:	82 81       	ldd	r24, Z+2	; 0x02
    3f7e:	93 81       	ldd	r25, Z+3	; 0x03
    3f80:	20 e0       	ldi	r18, 0x00	; 0
    3f82:	30 e0       	ldi	r19, 0x00	; 0
    3f84:	40 e8       	ldi	r20, 0x80	; 128
    3f86:	5f e3       	ldi	r21, 0x3F	; 63
    3f88:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3f8c:	88 23       	and	r24, r24
    3f8e:	44 f4       	brge	.+16     	; 0x3fa0 <main+0x18d0>
		__ticks = 1;
    3f90:	fe 01       	movw	r30, r28
    3f92:	ef 5f       	subi	r30, 0xFF	; 255
    3f94:	fe 4f       	sbci	r31, 0xFE	; 254
    3f96:	81 e0       	ldi	r24, 0x01	; 1
    3f98:	90 e0       	ldi	r25, 0x00	; 0
    3f9a:	91 83       	std	Z+1, r25	; 0x01
    3f9c:	80 83       	st	Z, r24
    3f9e:	64 c0       	rjmp	.+200    	; 0x4068 <main+0x1998>
	else if (__tmp > 65535)
    3fa0:	fe 01       	movw	r30, r28
    3fa2:	ed 5f       	subi	r30, 0xFD	; 253
    3fa4:	fe 4f       	sbci	r31, 0xFE	; 254
    3fa6:	60 81       	ld	r22, Z
    3fa8:	71 81       	ldd	r23, Z+1	; 0x01
    3faa:	82 81       	ldd	r24, Z+2	; 0x02
    3fac:	93 81       	ldd	r25, Z+3	; 0x03
    3fae:	20 e0       	ldi	r18, 0x00	; 0
    3fb0:	3f ef       	ldi	r19, 0xFF	; 255
    3fb2:	4f e7       	ldi	r20, 0x7F	; 127
    3fb4:	57 e4       	ldi	r21, 0x47	; 71
    3fb6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3fba:	18 16       	cp	r1, r24
    3fbc:	0c f0       	brlt	.+2      	; 0x3fc0 <main+0x18f0>
    3fbe:	43 c0       	rjmp	.+134    	; 0x4046 <main+0x1976>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3fc0:	fe 01       	movw	r30, r28
    3fc2:	e9 5f       	subi	r30, 0xF9	; 249
    3fc4:	fe 4f       	sbci	r31, 0xFE	; 254
    3fc6:	60 81       	ld	r22, Z
    3fc8:	71 81       	ldd	r23, Z+1	; 0x01
    3fca:	82 81       	ldd	r24, Z+2	; 0x02
    3fcc:	93 81       	ldd	r25, Z+3	; 0x03
    3fce:	20 e0       	ldi	r18, 0x00	; 0
    3fd0:	30 e0       	ldi	r19, 0x00	; 0
    3fd2:	40 e2       	ldi	r20, 0x20	; 32
    3fd4:	51 e4       	ldi	r21, 0x41	; 65
    3fd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fda:	dc 01       	movw	r26, r24
    3fdc:	cb 01       	movw	r24, r22
    3fde:	8e 01       	movw	r16, r28
    3fe0:	0f 5f       	subi	r16, 0xFF	; 255
    3fe2:	1e 4f       	sbci	r17, 0xFE	; 254
    3fe4:	bc 01       	movw	r22, r24
    3fe6:	cd 01       	movw	r24, r26
    3fe8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fec:	dc 01       	movw	r26, r24
    3fee:	cb 01       	movw	r24, r22
    3ff0:	f8 01       	movw	r30, r16
    3ff2:	91 83       	std	Z+1, r25	; 0x01
    3ff4:	80 83       	st	Z, r24
    3ff6:	1f c0       	rjmp	.+62     	; 0x4036 <main+0x1966>
    3ff8:	fe 01       	movw	r30, r28
    3ffa:	e1 50       	subi	r30, 0x01	; 1
    3ffc:	ff 4f       	sbci	r31, 0xFF	; 255
    3ffe:	88 ec       	ldi	r24, 0xC8	; 200
    4000:	90 e0       	ldi	r25, 0x00	; 0
    4002:	91 83       	std	Z+1, r25	; 0x01
    4004:	80 83       	st	Z, r24
    4006:	fe 01       	movw	r30, r28
    4008:	e1 50       	subi	r30, 0x01	; 1
    400a:	ff 4f       	sbci	r31, 0xFF	; 255
    400c:	80 81       	ld	r24, Z
    400e:	91 81       	ldd	r25, Z+1	; 0x01
    4010:	01 97       	sbiw	r24, 0x01	; 1
    4012:	f1 f7       	brne	.-4      	; 0x4010 <main+0x1940>
    4014:	fe 01       	movw	r30, r28
    4016:	e1 50       	subi	r30, 0x01	; 1
    4018:	ff 4f       	sbci	r31, 0xFF	; 255
    401a:	91 83       	std	Z+1, r25	; 0x01
    401c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    401e:	de 01       	movw	r26, r28
    4020:	af 5f       	subi	r26, 0xFF	; 255
    4022:	be 4f       	sbci	r27, 0xFE	; 254
    4024:	fe 01       	movw	r30, r28
    4026:	ef 5f       	subi	r30, 0xFF	; 255
    4028:	fe 4f       	sbci	r31, 0xFE	; 254
    402a:	80 81       	ld	r24, Z
    402c:	91 81       	ldd	r25, Z+1	; 0x01
    402e:	01 97       	sbiw	r24, 0x01	; 1
    4030:	11 96       	adiw	r26, 0x01	; 1
    4032:	9c 93       	st	X, r25
    4034:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4036:	fe 01       	movw	r30, r28
    4038:	ef 5f       	subi	r30, 0xFF	; 255
    403a:	fe 4f       	sbci	r31, 0xFE	; 254
    403c:	80 81       	ld	r24, Z
    403e:	91 81       	ldd	r25, Z+1	; 0x01
    4040:	00 97       	sbiw	r24, 0x00	; 0
    4042:	d1 f6       	brne	.-76     	; 0x3ff8 <main+0x1928>
    4044:	27 c0       	rjmp	.+78     	; 0x4094 <main+0x19c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4046:	8e 01       	movw	r16, r28
    4048:	0f 5f       	subi	r16, 0xFF	; 255
    404a:	1e 4f       	sbci	r17, 0xFE	; 254
    404c:	fe 01       	movw	r30, r28
    404e:	ed 5f       	subi	r30, 0xFD	; 253
    4050:	fe 4f       	sbci	r31, 0xFE	; 254
    4052:	60 81       	ld	r22, Z
    4054:	71 81       	ldd	r23, Z+1	; 0x01
    4056:	82 81       	ldd	r24, Z+2	; 0x02
    4058:	93 81       	ldd	r25, Z+3	; 0x03
    405a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    405e:	dc 01       	movw	r26, r24
    4060:	cb 01       	movw	r24, r22
    4062:	f8 01       	movw	r30, r16
    4064:	91 83       	std	Z+1, r25	; 0x01
    4066:	80 83       	st	Z, r24
    4068:	de 01       	movw	r26, r28
    406a:	a3 50       	subi	r26, 0x03	; 3
    406c:	bf 4f       	sbci	r27, 0xFF	; 255
    406e:	fe 01       	movw	r30, r28
    4070:	ef 5f       	subi	r30, 0xFF	; 255
    4072:	fe 4f       	sbci	r31, 0xFE	; 254
    4074:	80 81       	ld	r24, Z
    4076:	91 81       	ldd	r25, Z+1	; 0x01
    4078:	8d 93       	st	X+, r24
    407a:	9c 93       	st	X, r25
    407c:	fe 01       	movw	r30, r28
    407e:	e3 50       	subi	r30, 0x03	; 3
    4080:	ff 4f       	sbci	r31, 0xFF	; 255
    4082:	80 81       	ld	r24, Z
    4084:	91 81       	ldd	r25, Z+1	; 0x01
    4086:	01 97       	sbiw	r24, 0x01	; 1
    4088:	f1 f7       	brne	.-4      	; 0x4086 <main+0x19b6>
    408a:	fe 01       	movw	r30, r28
    408c:	e3 50       	subi	r30, 0x03	; 3
    408e:	ff 4f       	sbci	r31, 0xFF	; 255
    4090:	91 83       	std	Z+1, r25	; 0x01
    4092:	80 83       	st	Z, r24
				_delay_ms(500);
				LCD_VoidSendCommand(LCD_ClearDisplay);
    4094:	81 e0       	ldi	r24, 0x01	; 1
    4096:	0e 94 92 0b 	call	0x1724	; 0x1724 <LCD_VoidSendCommand>
    409a:	fe 01       	movw	r30, r28
    409c:	e7 50       	subi	r30, 0x07	; 7
    409e:	ff 4f       	sbci	r31, 0xFF	; 255
    40a0:	80 e0       	ldi	r24, 0x00	; 0
    40a2:	90 e0       	ldi	r25, 0x00	; 0
    40a4:	a0 e0       	ldi	r26, 0x00	; 0
    40a6:	b0 e4       	ldi	r27, 0x40	; 64
    40a8:	80 83       	st	Z, r24
    40aa:	91 83       	std	Z+1, r25	; 0x01
    40ac:	a2 83       	std	Z+2, r26	; 0x02
    40ae:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    40b0:	8e 01       	movw	r16, r28
    40b2:	0b 50       	subi	r16, 0x0B	; 11
    40b4:	1f 4f       	sbci	r17, 0xFF	; 255
    40b6:	fe 01       	movw	r30, r28
    40b8:	e7 50       	subi	r30, 0x07	; 7
    40ba:	ff 4f       	sbci	r31, 0xFF	; 255
    40bc:	60 81       	ld	r22, Z
    40be:	71 81       	ldd	r23, Z+1	; 0x01
    40c0:	82 81       	ldd	r24, Z+2	; 0x02
    40c2:	93 81       	ldd	r25, Z+3	; 0x03
    40c4:	20 e0       	ldi	r18, 0x00	; 0
    40c6:	30 e0       	ldi	r19, 0x00	; 0
    40c8:	4a ef       	ldi	r20, 0xFA	; 250
    40ca:	54 e4       	ldi	r21, 0x44	; 68
    40cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40d0:	dc 01       	movw	r26, r24
    40d2:	cb 01       	movw	r24, r22
    40d4:	f8 01       	movw	r30, r16
    40d6:	80 83       	st	Z, r24
    40d8:	91 83       	std	Z+1, r25	; 0x01
    40da:	a2 83       	std	Z+2, r26	; 0x02
    40dc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    40de:	fe 01       	movw	r30, r28
    40e0:	eb 50       	subi	r30, 0x0B	; 11
    40e2:	ff 4f       	sbci	r31, 0xFF	; 255
    40e4:	60 81       	ld	r22, Z
    40e6:	71 81       	ldd	r23, Z+1	; 0x01
    40e8:	82 81       	ldd	r24, Z+2	; 0x02
    40ea:	93 81       	ldd	r25, Z+3	; 0x03
    40ec:	20 e0       	ldi	r18, 0x00	; 0
    40ee:	30 e0       	ldi	r19, 0x00	; 0
    40f0:	40 e8       	ldi	r20, 0x80	; 128
    40f2:	5f e3       	ldi	r21, 0x3F	; 63
    40f4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    40f8:	88 23       	and	r24, r24
    40fa:	44 f4       	brge	.+16     	; 0x410c <main+0x1a3c>
		__ticks = 1;
    40fc:	fe 01       	movw	r30, r28
    40fe:	ed 50       	subi	r30, 0x0D	; 13
    4100:	ff 4f       	sbci	r31, 0xFF	; 255
    4102:	81 e0       	ldi	r24, 0x01	; 1
    4104:	90 e0       	ldi	r25, 0x00	; 0
    4106:	91 83       	std	Z+1, r25	; 0x01
    4108:	80 83       	st	Z, r24
    410a:	64 c0       	rjmp	.+200    	; 0x41d4 <main+0x1b04>
	else if (__tmp > 65535)
    410c:	fe 01       	movw	r30, r28
    410e:	eb 50       	subi	r30, 0x0B	; 11
    4110:	ff 4f       	sbci	r31, 0xFF	; 255
    4112:	60 81       	ld	r22, Z
    4114:	71 81       	ldd	r23, Z+1	; 0x01
    4116:	82 81       	ldd	r24, Z+2	; 0x02
    4118:	93 81       	ldd	r25, Z+3	; 0x03
    411a:	20 e0       	ldi	r18, 0x00	; 0
    411c:	3f ef       	ldi	r19, 0xFF	; 255
    411e:	4f e7       	ldi	r20, 0x7F	; 127
    4120:	57 e4       	ldi	r21, 0x47	; 71
    4122:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4126:	18 16       	cp	r1, r24
    4128:	0c f0       	brlt	.+2      	; 0x412c <main+0x1a5c>
    412a:	43 c0       	rjmp	.+134    	; 0x41b2 <main+0x1ae2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    412c:	fe 01       	movw	r30, r28
    412e:	e7 50       	subi	r30, 0x07	; 7
    4130:	ff 4f       	sbci	r31, 0xFF	; 255
    4132:	60 81       	ld	r22, Z
    4134:	71 81       	ldd	r23, Z+1	; 0x01
    4136:	82 81       	ldd	r24, Z+2	; 0x02
    4138:	93 81       	ldd	r25, Z+3	; 0x03
    413a:	20 e0       	ldi	r18, 0x00	; 0
    413c:	30 e0       	ldi	r19, 0x00	; 0
    413e:	40 e2       	ldi	r20, 0x20	; 32
    4140:	51 e4       	ldi	r21, 0x41	; 65
    4142:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4146:	dc 01       	movw	r26, r24
    4148:	cb 01       	movw	r24, r22
    414a:	8e 01       	movw	r16, r28
    414c:	0d 50       	subi	r16, 0x0D	; 13
    414e:	1f 4f       	sbci	r17, 0xFF	; 255
    4150:	bc 01       	movw	r22, r24
    4152:	cd 01       	movw	r24, r26
    4154:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4158:	dc 01       	movw	r26, r24
    415a:	cb 01       	movw	r24, r22
    415c:	f8 01       	movw	r30, r16
    415e:	91 83       	std	Z+1, r25	; 0x01
    4160:	80 83       	st	Z, r24
    4162:	1f c0       	rjmp	.+62     	; 0x41a2 <main+0x1ad2>
    4164:	fe 01       	movw	r30, r28
    4166:	ef 50       	subi	r30, 0x0F	; 15
    4168:	ff 4f       	sbci	r31, 0xFF	; 255
    416a:	88 ec       	ldi	r24, 0xC8	; 200
    416c:	90 e0       	ldi	r25, 0x00	; 0
    416e:	91 83       	std	Z+1, r25	; 0x01
    4170:	80 83       	st	Z, r24
    4172:	fe 01       	movw	r30, r28
    4174:	ef 50       	subi	r30, 0x0F	; 15
    4176:	ff 4f       	sbci	r31, 0xFF	; 255
    4178:	80 81       	ld	r24, Z
    417a:	91 81       	ldd	r25, Z+1	; 0x01
    417c:	01 97       	sbiw	r24, 0x01	; 1
    417e:	f1 f7       	brne	.-4      	; 0x417c <main+0x1aac>
    4180:	fe 01       	movw	r30, r28
    4182:	ef 50       	subi	r30, 0x0F	; 15
    4184:	ff 4f       	sbci	r31, 0xFF	; 255
    4186:	91 83       	std	Z+1, r25	; 0x01
    4188:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    418a:	de 01       	movw	r26, r28
    418c:	ad 50       	subi	r26, 0x0D	; 13
    418e:	bf 4f       	sbci	r27, 0xFF	; 255
    4190:	fe 01       	movw	r30, r28
    4192:	ed 50       	subi	r30, 0x0D	; 13
    4194:	ff 4f       	sbci	r31, 0xFF	; 255
    4196:	80 81       	ld	r24, Z
    4198:	91 81       	ldd	r25, Z+1	; 0x01
    419a:	01 97       	sbiw	r24, 0x01	; 1
    419c:	11 96       	adiw	r26, 0x01	; 1
    419e:	9c 93       	st	X, r25
    41a0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41a2:	fe 01       	movw	r30, r28
    41a4:	ed 50       	subi	r30, 0x0D	; 13
    41a6:	ff 4f       	sbci	r31, 0xFF	; 255
    41a8:	80 81       	ld	r24, Z
    41aa:	91 81       	ldd	r25, Z+1	; 0x01
    41ac:	00 97       	sbiw	r24, 0x00	; 0
    41ae:	d1 f6       	brne	.-76     	; 0x4164 <main+0x1a94>
    41b0:	28 c0       	rjmp	.+80     	; 0x4202 <main+0x1b32>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41b2:	8e 01       	movw	r16, r28
    41b4:	0d 50       	subi	r16, 0x0D	; 13
    41b6:	1f 4f       	sbci	r17, 0xFF	; 255
    41b8:	fe 01       	movw	r30, r28
    41ba:	eb 50       	subi	r30, 0x0B	; 11
    41bc:	ff 4f       	sbci	r31, 0xFF	; 255
    41be:	60 81       	ld	r22, Z
    41c0:	71 81       	ldd	r23, Z+1	; 0x01
    41c2:	82 81       	ldd	r24, Z+2	; 0x02
    41c4:	93 81       	ldd	r25, Z+3	; 0x03
    41c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41ca:	dc 01       	movw	r26, r24
    41cc:	cb 01       	movw	r24, r22
    41ce:	f8 01       	movw	r30, r16
    41d0:	91 83       	std	Z+1, r25	; 0x01
    41d2:	80 83       	st	Z, r24
    41d4:	de 01       	movw	r26, r28
    41d6:	a1 51       	subi	r26, 0x11	; 17
    41d8:	bf 4f       	sbci	r27, 0xFF	; 255
    41da:	fe 01       	movw	r30, r28
    41dc:	ed 50       	subi	r30, 0x0D	; 13
    41de:	ff 4f       	sbci	r31, 0xFF	; 255
    41e0:	80 81       	ld	r24, Z
    41e2:	91 81       	ldd	r25, Z+1	; 0x01
    41e4:	11 96       	adiw	r26, 0x01	; 1
    41e6:	9c 93       	st	X, r25
    41e8:	8e 93       	st	-X, r24
    41ea:	fe 01       	movw	r30, r28
    41ec:	e1 51       	subi	r30, 0x11	; 17
    41ee:	ff 4f       	sbci	r31, 0xFF	; 255
    41f0:	80 81       	ld	r24, Z
    41f2:	91 81       	ldd	r25, Z+1	; 0x01
    41f4:	01 97       	sbiw	r24, 0x01	; 1
    41f6:	f1 f7       	brne	.-4      	; 0x41f4 <main+0x1b24>
    41f8:	fe 01       	movw	r30, r28
    41fa:	e1 51       	subi	r30, 0x11	; 17
    41fc:	ff 4f       	sbci	r31, 0xFF	; 255
    41fe:	91 83       	std	Z+1, r25	; 0x01
    4200:	80 83       	st	Z, r24
				_delay_ms(2);
				Comp_Pass = 0;
    4202:	fe 01       	movw	r30, r28
    4204:	e0 52       	subi	r30, 0x20	; 32
    4206:	fe 4f       	sbci	r31, 0xFE	; 254
    4208:	10 82       	st	Z, r1
    420a:	11 82       	std	Z+1, r1	; 0x01
    420c:	12 82       	std	Z+2, r1	; 0x02
    420e:	13 82       	std	Z+3, r1	; 0x03
    4210:	0c 94 91 14 	jmp	0x2922	; 0x2922 <main+0x252>
			}
		}

		// Code to Change the Password
		else if (Chosen_Mode == 2)
    4214:	fe 01       	movw	r30, r28
    4216:	ec 50       	subi	r30, 0x0C	; 12
    4218:	fe 4f       	sbci	r31, 0xFE	; 254
    421a:	80 81       	ld	r24, Z
    421c:	82 30       	cpi	r24, 0x02	; 2
    421e:	11 f0       	breq	.+4      	; 0x4224 <main+0x1b54>
    4220:	0c 94 e5 2c 	jmp	0x59ca	; 0x59ca <main+0x32fa>
		{
			LCD_VoidSendCommand(LCD_ClearDisplay);
    4224:	81 e0       	ldi	r24, 0x01	; 1
    4226:	0e 94 92 0b 	call	0x1724	; 0x1724 <LCD_VoidSendCommand>
    422a:	fe 01       	movw	r30, r28
    422c:	e5 51       	subi	r30, 0x15	; 21
    422e:	ff 4f       	sbci	r31, 0xFF	; 255
    4230:	80 e0       	ldi	r24, 0x00	; 0
    4232:	90 e0       	ldi	r25, 0x00	; 0
    4234:	a0 e0       	ldi	r26, 0x00	; 0
    4236:	b0 e4       	ldi	r27, 0x40	; 64
    4238:	80 83       	st	Z, r24
    423a:	91 83       	std	Z+1, r25	; 0x01
    423c:	a2 83       	std	Z+2, r26	; 0x02
    423e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4240:	8e 01       	movw	r16, r28
    4242:	09 51       	subi	r16, 0x19	; 25
    4244:	1f 4f       	sbci	r17, 0xFF	; 255
    4246:	fe 01       	movw	r30, r28
    4248:	e5 51       	subi	r30, 0x15	; 21
    424a:	ff 4f       	sbci	r31, 0xFF	; 255
    424c:	60 81       	ld	r22, Z
    424e:	71 81       	ldd	r23, Z+1	; 0x01
    4250:	82 81       	ldd	r24, Z+2	; 0x02
    4252:	93 81       	ldd	r25, Z+3	; 0x03
    4254:	20 e0       	ldi	r18, 0x00	; 0
    4256:	30 e0       	ldi	r19, 0x00	; 0
    4258:	4a ef       	ldi	r20, 0xFA	; 250
    425a:	54 e4       	ldi	r21, 0x44	; 68
    425c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4260:	dc 01       	movw	r26, r24
    4262:	cb 01       	movw	r24, r22
    4264:	f8 01       	movw	r30, r16
    4266:	80 83       	st	Z, r24
    4268:	91 83       	std	Z+1, r25	; 0x01
    426a:	a2 83       	std	Z+2, r26	; 0x02
    426c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    426e:	fe 01       	movw	r30, r28
    4270:	e9 51       	subi	r30, 0x19	; 25
    4272:	ff 4f       	sbci	r31, 0xFF	; 255
    4274:	60 81       	ld	r22, Z
    4276:	71 81       	ldd	r23, Z+1	; 0x01
    4278:	82 81       	ldd	r24, Z+2	; 0x02
    427a:	93 81       	ldd	r25, Z+3	; 0x03
    427c:	20 e0       	ldi	r18, 0x00	; 0
    427e:	30 e0       	ldi	r19, 0x00	; 0
    4280:	40 e8       	ldi	r20, 0x80	; 128
    4282:	5f e3       	ldi	r21, 0x3F	; 63
    4284:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4288:	88 23       	and	r24, r24
    428a:	44 f4       	brge	.+16     	; 0x429c <main+0x1bcc>
		__ticks = 1;
    428c:	fe 01       	movw	r30, r28
    428e:	eb 51       	subi	r30, 0x1B	; 27
    4290:	ff 4f       	sbci	r31, 0xFF	; 255
    4292:	81 e0       	ldi	r24, 0x01	; 1
    4294:	90 e0       	ldi	r25, 0x00	; 0
    4296:	91 83       	std	Z+1, r25	; 0x01
    4298:	80 83       	st	Z, r24
    429a:	64 c0       	rjmp	.+200    	; 0x4364 <main+0x1c94>
	else if (__tmp > 65535)
    429c:	fe 01       	movw	r30, r28
    429e:	e9 51       	subi	r30, 0x19	; 25
    42a0:	ff 4f       	sbci	r31, 0xFF	; 255
    42a2:	60 81       	ld	r22, Z
    42a4:	71 81       	ldd	r23, Z+1	; 0x01
    42a6:	82 81       	ldd	r24, Z+2	; 0x02
    42a8:	93 81       	ldd	r25, Z+3	; 0x03
    42aa:	20 e0       	ldi	r18, 0x00	; 0
    42ac:	3f ef       	ldi	r19, 0xFF	; 255
    42ae:	4f e7       	ldi	r20, 0x7F	; 127
    42b0:	57 e4       	ldi	r21, 0x47	; 71
    42b2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    42b6:	18 16       	cp	r1, r24
    42b8:	0c f0       	brlt	.+2      	; 0x42bc <main+0x1bec>
    42ba:	43 c0       	rjmp	.+134    	; 0x4342 <main+0x1c72>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    42bc:	fe 01       	movw	r30, r28
    42be:	e5 51       	subi	r30, 0x15	; 21
    42c0:	ff 4f       	sbci	r31, 0xFF	; 255
    42c2:	60 81       	ld	r22, Z
    42c4:	71 81       	ldd	r23, Z+1	; 0x01
    42c6:	82 81       	ldd	r24, Z+2	; 0x02
    42c8:	93 81       	ldd	r25, Z+3	; 0x03
    42ca:	20 e0       	ldi	r18, 0x00	; 0
    42cc:	30 e0       	ldi	r19, 0x00	; 0
    42ce:	40 e2       	ldi	r20, 0x20	; 32
    42d0:	51 e4       	ldi	r21, 0x41	; 65
    42d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42d6:	dc 01       	movw	r26, r24
    42d8:	cb 01       	movw	r24, r22
    42da:	8e 01       	movw	r16, r28
    42dc:	0b 51       	subi	r16, 0x1B	; 27
    42de:	1f 4f       	sbci	r17, 0xFF	; 255
    42e0:	bc 01       	movw	r22, r24
    42e2:	cd 01       	movw	r24, r26
    42e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42e8:	dc 01       	movw	r26, r24
    42ea:	cb 01       	movw	r24, r22
    42ec:	f8 01       	movw	r30, r16
    42ee:	91 83       	std	Z+1, r25	; 0x01
    42f0:	80 83       	st	Z, r24
    42f2:	1f c0       	rjmp	.+62     	; 0x4332 <main+0x1c62>
    42f4:	fe 01       	movw	r30, r28
    42f6:	ed 51       	subi	r30, 0x1D	; 29
    42f8:	ff 4f       	sbci	r31, 0xFF	; 255
    42fa:	88 ec       	ldi	r24, 0xC8	; 200
    42fc:	90 e0       	ldi	r25, 0x00	; 0
    42fe:	91 83       	std	Z+1, r25	; 0x01
    4300:	80 83       	st	Z, r24
    4302:	fe 01       	movw	r30, r28
    4304:	ed 51       	subi	r30, 0x1D	; 29
    4306:	ff 4f       	sbci	r31, 0xFF	; 255
    4308:	80 81       	ld	r24, Z
    430a:	91 81       	ldd	r25, Z+1	; 0x01
    430c:	01 97       	sbiw	r24, 0x01	; 1
    430e:	f1 f7       	brne	.-4      	; 0x430c <main+0x1c3c>
    4310:	fe 01       	movw	r30, r28
    4312:	ed 51       	subi	r30, 0x1D	; 29
    4314:	ff 4f       	sbci	r31, 0xFF	; 255
    4316:	91 83       	std	Z+1, r25	; 0x01
    4318:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    431a:	de 01       	movw	r26, r28
    431c:	ab 51       	subi	r26, 0x1B	; 27
    431e:	bf 4f       	sbci	r27, 0xFF	; 255
    4320:	fe 01       	movw	r30, r28
    4322:	eb 51       	subi	r30, 0x1B	; 27
    4324:	ff 4f       	sbci	r31, 0xFF	; 255
    4326:	80 81       	ld	r24, Z
    4328:	91 81       	ldd	r25, Z+1	; 0x01
    432a:	01 97       	sbiw	r24, 0x01	; 1
    432c:	11 96       	adiw	r26, 0x01	; 1
    432e:	9c 93       	st	X, r25
    4330:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4332:	fe 01       	movw	r30, r28
    4334:	eb 51       	subi	r30, 0x1B	; 27
    4336:	ff 4f       	sbci	r31, 0xFF	; 255
    4338:	80 81       	ld	r24, Z
    433a:	91 81       	ldd	r25, Z+1	; 0x01
    433c:	00 97       	sbiw	r24, 0x00	; 0
    433e:	d1 f6       	brne	.-76     	; 0x42f4 <main+0x1c24>
    4340:	27 c0       	rjmp	.+78     	; 0x4390 <main+0x1cc0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4342:	8e 01       	movw	r16, r28
    4344:	0b 51       	subi	r16, 0x1B	; 27
    4346:	1f 4f       	sbci	r17, 0xFF	; 255
    4348:	fe 01       	movw	r30, r28
    434a:	e9 51       	subi	r30, 0x19	; 25
    434c:	ff 4f       	sbci	r31, 0xFF	; 255
    434e:	60 81       	ld	r22, Z
    4350:	71 81       	ldd	r23, Z+1	; 0x01
    4352:	82 81       	ldd	r24, Z+2	; 0x02
    4354:	93 81       	ldd	r25, Z+3	; 0x03
    4356:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    435a:	dc 01       	movw	r26, r24
    435c:	cb 01       	movw	r24, r22
    435e:	f8 01       	movw	r30, r16
    4360:	91 83       	std	Z+1, r25	; 0x01
    4362:	80 83       	st	Z, r24
    4364:	de 01       	movw	r26, r28
    4366:	af 51       	subi	r26, 0x1F	; 31
    4368:	bf 4f       	sbci	r27, 0xFF	; 255
    436a:	fe 01       	movw	r30, r28
    436c:	eb 51       	subi	r30, 0x1B	; 27
    436e:	ff 4f       	sbci	r31, 0xFF	; 255
    4370:	80 81       	ld	r24, Z
    4372:	91 81       	ldd	r25, Z+1	; 0x01
    4374:	8d 93       	st	X+, r24
    4376:	9c 93       	st	X, r25
    4378:	fe 01       	movw	r30, r28
    437a:	ef 51       	subi	r30, 0x1F	; 31
    437c:	ff 4f       	sbci	r31, 0xFF	; 255
    437e:	80 81       	ld	r24, Z
    4380:	91 81       	ldd	r25, Z+1	; 0x01
    4382:	01 97       	sbiw	r24, 0x01	; 1
    4384:	f1 f7       	brne	.-4      	; 0x4382 <main+0x1cb2>
    4386:	fe 01       	movw	r30, r28
    4388:	ef 51       	subi	r30, 0x1F	; 31
    438a:	ff 4f       	sbci	r31, 0xFF	; 255
    438c:	91 83       	std	Z+1, r25	; 0x01
    438e:	80 83       	st	Z, r24
			_delay_ms(2);
			LCD_VoidSendString("Old Pass : ");
    4390:	8c ed       	ldi	r24, 0xDC	; 220
    4392:	90 e0       	ldi	r25, 0x00	; 0
    4394:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <LCD_VoidSendString>
			for (u8 i = 0; i<4 ;i++)
    4398:	fe 01       	movw	r30, r28
    439a:	e2 52       	subi	r30, 0x22	; 34
    439c:	fe 4f       	sbci	r31, 0xFE	; 254
    439e:	10 82       	st	Z, r1
    43a0:	40 c3       	rjmp	.+1664   	; 0x4a22 <main+0x2352>
			{
				LCD_VoidSendCommand(LCD_CursorON);
    43a2:	8e e0       	ldi	r24, 0x0E	; 14
    43a4:	0e 94 92 0b 	call	0x1724	; 0x1724 <LCD_VoidSendCommand>
    43a8:	fe 01       	movw	r30, r28
    43aa:	e3 52       	subi	r30, 0x23	; 35
    43ac:	ff 4f       	sbci	r31, 0xFF	; 255
    43ae:	80 e0       	ldi	r24, 0x00	; 0
    43b0:	90 e0       	ldi	r25, 0x00	; 0
    43b2:	a8 e4       	ldi	r26, 0x48	; 72
    43b4:	b3 e4       	ldi	r27, 0x43	; 67
    43b6:	80 83       	st	Z, r24
    43b8:	91 83       	std	Z+1, r25	; 0x01
    43ba:	a2 83       	std	Z+2, r26	; 0x02
    43bc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    43be:	8e 01       	movw	r16, r28
    43c0:	07 52       	subi	r16, 0x27	; 39
    43c2:	1f 4f       	sbci	r17, 0xFF	; 255
    43c4:	fe 01       	movw	r30, r28
    43c6:	e3 52       	subi	r30, 0x23	; 35
    43c8:	ff 4f       	sbci	r31, 0xFF	; 255
    43ca:	60 81       	ld	r22, Z
    43cc:	71 81       	ldd	r23, Z+1	; 0x01
    43ce:	82 81       	ldd	r24, Z+2	; 0x02
    43d0:	93 81       	ldd	r25, Z+3	; 0x03
    43d2:	20 e0       	ldi	r18, 0x00	; 0
    43d4:	30 e0       	ldi	r19, 0x00	; 0
    43d6:	4a ef       	ldi	r20, 0xFA	; 250
    43d8:	54 e4       	ldi	r21, 0x44	; 68
    43da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43de:	dc 01       	movw	r26, r24
    43e0:	cb 01       	movw	r24, r22
    43e2:	f8 01       	movw	r30, r16
    43e4:	80 83       	st	Z, r24
    43e6:	91 83       	std	Z+1, r25	; 0x01
    43e8:	a2 83       	std	Z+2, r26	; 0x02
    43ea:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    43ec:	fe 01       	movw	r30, r28
    43ee:	e7 52       	subi	r30, 0x27	; 39
    43f0:	ff 4f       	sbci	r31, 0xFF	; 255
    43f2:	60 81       	ld	r22, Z
    43f4:	71 81       	ldd	r23, Z+1	; 0x01
    43f6:	82 81       	ldd	r24, Z+2	; 0x02
    43f8:	93 81       	ldd	r25, Z+3	; 0x03
    43fa:	20 e0       	ldi	r18, 0x00	; 0
    43fc:	30 e0       	ldi	r19, 0x00	; 0
    43fe:	40 e8       	ldi	r20, 0x80	; 128
    4400:	5f e3       	ldi	r21, 0x3F	; 63
    4402:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4406:	88 23       	and	r24, r24
    4408:	44 f4       	brge	.+16     	; 0x441a <main+0x1d4a>
		__ticks = 1;
    440a:	fe 01       	movw	r30, r28
    440c:	e9 52       	subi	r30, 0x29	; 41
    440e:	ff 4f       	sbci	r31, 0xFF	; 255
    4410:	81 e0       	ldi	r24, 0x01	; 1
    4412:	90 e0       	ldi	r25, 0x00	; 0
    4414:	91 83       	std	Z+1, r25	; 0x01
    4416:	80 83       	st	Z, r24
    4418:	64 c0       	rjmp	.+200    	; 0x44e2 <main+0x1e12>
	else if (__tmp > 65535)
    441a:	fe 01       	movw	r30, r28
    441c:	e7 52       	subi	r30, 0x27	; 39
    441e:	ff 4f       	sbci	r31, 0xFF	; 255
    4420:	60 81       	ld	r22, Z
    4422:	71 81       	ldd	r23, Z+1	; 0x01
    4424:	82 81       	ldd	r24, Z+2	; 0x02
    4426:	93 81       	ldd	r25, Z+3	; 0x03
    4428:	20 e0       	ldi	r18, 0x00	; 0
    442a:	3f ef       	ldi	r19, 0xFF	; 255
    442c:	4f e7       	ldi	r20, 0x7F	; 127
    442e:	57 e4       	ldi	r21, 0x47	; 71
    4430:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4434:	18 16       	cp	r1, r24
    4436:	0c f0       	brlt	.+2      	; 0x443a <main+0x1d6a>
    4438:	43 c0       	rjmp	.+134    	; 0x44c0 <main+0x1df0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    443a:	fe 01       	movw	r30, r28
    443c:	e3 52       	subi	r30, 0x23	; 35
    443e:	ff 4f       	sbci	r31, 0xFF	; 255
    4440:	60 81       	ld	r22, Z
    4442:	71 81       	ldd	r23, Z+1	; 0x01
    4444:	82 81       	ldd	r24, Z+2	; 0x02
    4446:	93 81       	ldd	r25, Z+3	; 0x03
    4448:	20 e0       	ldi	r18, 0x00	; 0
    444a:	30 e0       	ldi	r19, 0x00	; 0
    444c:	40 e2       	ldi	r20, 0x20	; 32
    444e:	51 e4       	ldi	r21, 0x41	; 65
    4450:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4454:	dc 01       	movw	r26, r24
    4456:	cb 01       	movw	r24, r22
    4458:	8e 01       	movw	r16, r28
    445a:	09 52       	subi	r16, 0x29	; 41
    445c:	1f 4f       	sbci	r17, 0xFF	; 255
    445e:	bc 01       	movw	r22, r24
    4460:	cd 01       	movw	r24, r26
    4462:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4466:	dc 01       	movw	r26, r24
    4468:	cb 01       	movw	r24, r22
    446a:	f8 01       	movw	r30, r16
    446c:	91 83       	std	Z+1, r25	; 0x01
    446e:	80 83       	st	Z, r24
    4470:	1f c0       	rjmp	.+62     	; 0x44b0 <main+0x1de0>
    4472:	fe 01       	movw	r30, r28
    4474:	eb 52       	subi	r30, 0x2B	; 43
    4476:	ff 4f       	sbci	r31, 0xFF	; 255
    4478:	88 ec       	ldi	r24, 0xC8	; 200
    447a:	90 e0       	ldi	r25, 0x00	; 0
    447c:	91 83       	std	Z+1, r25	; 0x01
    447e:	80 83       	st	Z, r24
    4480:	fe 01       	movw	r30, r28
    4482:	eb 52       	subi	r30, 0x2B	; 43
    4484:	ff 4f       	sbci	r31, 0xFF	; 255
    4486:	80 81       	ld	r24, Z
    4488:	91 81       	ldd	r25, Z+1	; 0x01
    448a:	01 97       	sbiw	r24, 0x01	; 1
    448c:	f1 f7       	brne	.-4      	; 0x448a <main+0x1dba>
    448e:	fe 01       	movw	r30, r28
    4490:	eb 52       	subi	r30, 0x2B	; 43
    4492:	ff 4f       	sbci	r31, 0xFF	; 255
    4494:	91 83       	std	Z+1, r25	; 0x01
    4496:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4498:	de 01       	movw	r26, r28
    449a:	a9 52       	subi	r26, 0x29	; 41
    449c:	bf 4f       	sbci	r27, 0xFF	; 255
    449e:	fe 01       	movw	r30, r28
    44a0:	e9 52       	subi	r30, 0x29	; 41
    44a2:	ff 4f       	sbci	r31, 0xFF	; 255
    44a4:	80 81       	ld	r24, Z
    44a6:	91 81       	ldd	r25, Z+1	; 0x01
    44a8:	01 97       	sbiw	r24, 0x01	; 1
    44aa:	11 96       	adiw	r26, 0x01	; 1
    44ac:	9c 93       	st	X, r25
    44ae:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44b0:	fe 01       	movw	r30, r28
    44b2:	e9 52       	subi	r30, 0x29	; 41
    44b4:	ff 4f       	sbci	r31, 0xFF	; 255
    44b6:	80 81       	ld	r24, Z
    44b8:	91 81       	ldd	r25, Z+1	; 0x01
    44ba:	00 97       	sbiw	r24, 0x00	; 0
    44bc:	d1 f6       	brne	.-76     	; 0x4472 <main+0x1da2>
    44be:	27 c0       	rjmp	.+78     	; 0x450e <main+0x1e3e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    44c0:	8e 01       	movw	r16, r28
    44c2:	09 52       	subi	r16, 0x29	; 41
    44c4:	1f 4f       	sbci	r17, 0xFF	; 255
    44c6:	fe 01       	movw	r30, r28
    44c8:	e7 52       	subi	r30, 0x27	; 39
    44ca:	ff 4f       	sbci	r31, 0xFF	; 255
    44cc:	60 81       	ld	r22, Z
    44ce:	71 81       	ldd	r23, Z+1	; 0x01
    44d0:	82 81       	ldd	r24, Z+2	; 0x02
    44d2:	93 81       	ldd	r25, Z+3	; 0x03
    44d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44d8:	dc 01       	movw	r26, r24
    44da:	cb 01       	movw	r24, r22
    44dc:	f8 01       	movw	r30, r16
    44de:	91 83       	std	Z+1, r25	; 0x01
    44e0:	80 83       	st	Z, r24
    44e2:	de 01       	movw	r26, r28
    44e4:	ad 52       	subi	r26, 0x2D	; 45
    44e6:	bf 4f       	sbci	r27, 0xFF	; 255
    44e8:	fe 01       	movw	r30, r28
    44ea:	e9 52       	subi	r30, 0x29	; 41
    44ec:	ff 4f       	sbci	r31, 0xFF	; 255
    44ee:	80 81       	ld	r24, Z
    44f0:	91 81       	ldd	r25, Z+1	; 0x01
    44f2:	8d 93       	st	X+, r24
    44f4:	9c 93       	st	X, r25
    44f6:	fe 01       	movw	r30, r28
    44f8:	ed 52       	subi	r30, 0x2D	; 45
    44fa:	ff 4f       	sbci	r31, 0xFF	; 255
    44fc:	80 81       	ld	r24, Z
    44fe:	91 81       	ldd	r25, Z+1	; 0x01
    4500:	01 97       	sbiw	r24, 0x01	; 1
    4502:	f1 f7       	brne	.-4      	; 0x4500 <main+0x1e30>
    4504:	fe 01       	movw	r30, r28
    4506:	ed 52       	subi	r30, 0x2D	; 45
    4508:	ff 4f       	sbci	r31, 0xFF	; 255
    450a:	91 83       	std	Z+1, r25	; 0x01
    450c:	80 83       	st	Z, r24
				_delay_ms(200);
				LCD_VoidSendCommand(LCD_CURSOROFF);
    450e:	8c e0       	ldi	r24, 0x0C	; 12
    4510:	0e 94 92 0b 	call	0x1724	; 0x1724 <LCD_VoidSendCommand>

				Key_Value = Keypad_GetPressedKey();
    4514:	0e 94 67 12 	call	0x24ce	; 0x24ce <Keypad_GetPressedKey>
    4518:	fe 01       	movw	r30, r28
    451a:	eb 50       	subi	r30, 0x0B	; 11
    451c:	fe 4f       	sbci	r31, 0xFE	; 254
    451e:	80 83       	st	Z, r24
				if ((Key_Value >= 0) && (Key_Value <= 9))
    4520:	fe 01       	movw	r30, r28
    4522:	eb 50       	subi	r30, 0x0B	; 11
    4524:	fe 4f       	sbci	r31, 0xFE	; 254
    4526:	80 81       	ld	r24, Z
    4528:	8a 30       	cpi	r24, 0x0A	; 10
    452a:	08 f0       	brcs	.+2      	; 0x452e <main+0x1e5e>
    452c:	09 c1       	rjmp	.+530    	; 0x4740 <main+0x2070>
				{
					LCD_VoidSendNumber(Key_Value);
    452e:	fe 01       	movw	r30, r28
    4530:	eb 50       	subi	r30, 0x0B	; 11
    4532:	fe 4f       	sbci	r31, 0xFE	; 254
    4534:	80 81       	ld	r24, Z
    4536:	88 2f       	mov	r24, r24
    4538:	90 e0       	ldi	r25, 0x00	; 0
    453a:	a0 e0       	ldi	r26, 0x00	; 0
    453c:	b0 e0       	ldi	r27, 0x00	; 0
    453e:	bc 01       	movw	r22, r24
    4540:	cd 01       	movw	r24, r26
    4542:	0e 94 77 0e 	call	0x1cee	; 0x1cee <LCD_VoidSendNumber>
    4546:	fe 01       	movw	r30, r28
    4548:	e1 53       	subi	r30, 0x31	; 49
    454a:	ff 4f       	sbci	r31, 0xFF	; 255
    454c:	80 e0       	ldi	r24, 0x00	; 0
    454e:	90 e0       	ldi	r25, 0x00	; 0
    4550:	a8 e4       	ldi	r26, 0x48	; 72
    4552:	b3 e4       	ldi	r27, 0x43	; 67
    4554:	80 83       	st	Z, r24
    4556:	91 83       	std	Z+1, r25	; 0x01
    4558:	a2 83       	std	Z+2, r26	; 0x02
    455a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    455c:	8e 01       	movw	r16, r28
    455e:	05 53       	subi	r16, 0x35	; 53
    4560:	1f 4f       	sbci	r17, 0xFF	; 255
    4562:	fe 01       	movw	r30, r28
    4564:	e1 53       	subi	r30, 0x31	; 49
    4566:	ff 4f       	sbci	r31, 0xFF	; 255
    4568:	60 81       	ld	r22, Z
    456a:	71 81       	ldd	r23, Z+1	; 0x01
    456c:	82 81       	ldd	r24, Z+2	; 0x02
    456e:	93 81       	ldd	r25, Z+3	; 0x03
    4570:	20 e0       	ldi	r18, 0x00	; 0
    4572:	30 e0       	ldi	r19, 0x00	; 0
    4574:	4a ef       	ldi	r20, 0xFA	; 250
    4576:	54 e4       	ldi	r21, 0x44	; 68
    4578:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    457c:	dc 01       	movw	r26, r24
    457e:	cb 01       	movw	r24, r22
    4580:	f8 01       	movw	r30, r16
    4582:	80 83       	st	Z, r24
    4584:	91 83       	std	Z+1, r25	; 0x01
    4586:	a2 83       	std	Z+2, r26	; 0x02
    4588:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    458a:	fe 01       	movw	r30, r28
    458c:	e5 53       	subi	r30, 0x35	; 53
    458e:	ff 4f       	sbci	r31, 0xFF	; 255
    4590:	60 81       	ld	r22, Z
    4592:	71 81       	ldd	r23, Z+1	; 0x01
    4594:	82 81       	ldd	r24, Z+2	; 0x02
    4596:	93 81       	ldd	r25, Z+3	; 0x03
    4598:	20 e0       	ldi	r18, 0x00	; 0
    459a:	30 e0       	ldi	r19, 0x00	; 0
    459c:	40 e8       	ldi	r20, 0x80	; 128
    459e:	5f e3       	ldi	r21, 0x3F	; 63
    45a0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    45a4:	88 23       	and	r24, r24
    45a6:	44 f4       	brge	.+16     	; 0x45b8 <main+0x1ee8>
		__ticks = 1;
    45a8:	fe 01       	movw	r30, r28
    45aa:	e7 53       	subi	r30, 0x37	; 55
    45ac:	ff 4f       	sbci	r31, 0xFF	; 255
    45ae:	81 e0       	ldi	r24, 0x01	; 1
    45b0:	90 e0       	ldi	r25, 0x00	; 0
    45b2:	91 83       	std	Z+1, r25	; 0x01
    45b4:	80 83       	st	Z, r24
    45b6:	64 c0       	rjmp	.+200    	; 0x4680 <main+0x1fb0>
	else if (__tmp > 65535)
    45b8:	fe 01       	movw	r30, r28
    45ba:	e5 53       	subi	r30, 0x35	; 53
    45bc:	ff 4f       	sbci	r31, 0xFF	; 255
    45be:	60 81       	ld	r22, Z
    45c0:	71 81       	ldd	r23, Z+1	; 0x01
    45c2:	82 81       	ldd	r24, Z+2	; 0x02
    45c4:	93 81       	ldd	r25, Z+3	; 0x03
    45c6:	20 e0       	ldi	r18, 0x00	; 0
    45c8:	3f ef       	ldi	r19, 0xFF	; 255
    45ca:	4f e7       	ldi	r20, 0x7F	; 127
    45cc:	57 e4       	ldi	r21, 0x47	; 71
    45ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    45d2:	18 16       	cp	r1, r24
    45d4:	0c f0       	brlt	.+2      	; 0x45d8 <main+0x1f08>
    45d6:	43 c0       	rjmp	.+134    	; 0x465e <main+0x1f8e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    45d8:	fe 01       	movw	r30, r28
    45da:	e1 53       	subi	r30, 0x31	; 49
    45dc:	ff 4f       	sbci	r31, 0xFF	; 255
    45de:	60 81       	ld	r22, Z
    45e0:	71 81       	ldd	r23, Z+1	; 0x01
    45e2:	82 81       	ldd	r24, Z+2	; 0x02
    45e4:	93 81       	ldd	r25, Z+3	; 0x03
    45e6:	20 e0       	ldi	r18, 0x00	; 0
    45e8:	30 e0       	ldi	r19, 0x00	; 0
    45ea:	40 e2       	ldi	r20, 0x20	; 32
    45ec:	51 e4       	ldi	r21, 0x41	; 65
    45ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45f2:	dc 01       	movw	r26, r24
    45f4:	cb 01       	movw	r24, r22
    45f6:	8e 01       	movw	r16, r28
    45f8:	07 53       	subi	r16, 0x37	; 55
    45fa:	1f 4f       	sbci	r17, 0xFF	; 255
    45fc:	bc 01       	movw	r22, r24
    45fe:	cd 01       	movw	r24, r26
    4600:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4604:	dc 01       	movw	r26, r24
    4606:	cb 01       	movw	r24, r22
    4608:	f8 01       	movw	r30, r16
    460a:	91 83       	std	Z+1, r25	; 0x01
    460c:	80 83       	st	Z, r24
    460e:	1f c0       	rjmp	.+62     	; 0x464e <main+0x1f7e>
    4610:	fe 01       	movw	r30, r28
    4612:	e9 53       	subi	r30, 0x39	; 57
    4614:	ff 4f       	sbci	r31, 0xFF	; 255
    4616:	88 ec       	ldi	r24, 0xC8	; 200
    4618:	90 e0       	ldi	r25, 0x00	; 0
    461a:	91 83       	std	Z+1, r25	; 0x01
    461c:	80 83       	st	Z, r24
    461e:	fe 01       	movw	r30, r28
    4620:	e9 53       	subi	r30, 0x39	; 57
    4622:	ff 4f       	sbci	r31, 0xFF	; 255
    4624:	80 81       	ld	r24, Z
    4626:	91 81       	ldd	r25, Z+1	; 0x01
    4628:	01 97       	sbiw	r24, 0x01	; 1
    462a:	f1 f7       	brne	.-4      	; 0x4628 <main+0x1f58>
    462c:	fe 01       	movw	r30, r28
    462e:	e9 53       	subi	r30, 0x39	; 57
    4630:	ff 4f       	sbci	r31, 0xFF	; 255
    4632:	91 83       	std	Z+1, r25	; 0x01
    4634:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4636:	de 01       	movw	r26, r28
    4638:	a7 53       	subi	r26, 0x37	; 55
    463a:	bf 4f       	sbci	r27, 0xFF	; 255
    463c:	fe 01       	movw	r30, r28
    463e:	e7 53       	subi	r30, 0x37	; 55
    4640:	ff 4f       	sbci	r31, 0xFF	; 255
    4642:	80 81       	ld	r24, Z
    4644:	91 81       	ldd	r25, Z+1	; 0x01
    4646:	01 97       	sbiw	r24, 0x01	; 1
    4648:	11 96       	adiw	r26, 0x01	; 1
    464a:	9c 93       	st	X, r25
    464c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    464e:	fe 01       	movw	r30, r28
    4650:	e7 53       	subi	r30, 0x37	; 55
    4652:	ff 4f       	sbci	r31, 0xFF	; 255
    4654:	80 81       	ld	r24, Z
    4656:	91 81       	ldd	r25, Z+1	; 0x01
    4658:	00 97       	sbiw	r24, 0x00	; 0
    465a:	d1 f6       	brne	.-76     	; 0x4610 <main+0x1f40>
    465c:	27 c0       	rjmp	.+78     	; 0x46ac <main+0x1fdc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    465e:	8e 01       	movw	r16, r28
    4660:	07 53       	subi	r16, 0x37	; 55
    4662:	1f 4f       	sbci	r17, 0xFF	; 255
    4664:	fe 01       	movw	r30, r28
    4666:	e5 53       	subi	r30, 0x35	; 53
    4668:	ff 4f       	sbci	r31, 0xFF	; 255
    466a:	60 81       	ld	r22, Z
    466c:	71 81       	ldd	r23, Z+1	; 0x01
    466e:	82 81       	ldd	r24, Z+2	; 0x02
    4670:	93 81       	ldd	r25, Z+3	; 0x03
    4672:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4676:	dc 01       	movw	r26, r24
    4678:	cb 01       	movw	r24, r22
    467a:	f8 01       	movw	r30, r16
    467c:	91 83       	std	Z+1, r25	; 0x01
    467e:	80 83       	st	Z, r24
    4680:	de 01       	movw	r26, r28
    4682:	ab 53       	subi	r26, 0x3B	; 59
    4684:	bf 4f       	sbci	r27, 0xFF	; 255
    4686:	fe 01       	movw	r30, r28
    4688:	e7 53       	subi	r30, 0x37	; 55
    468a:	ff 4f       	sbci	r31, 0xFF	; 255
    468c:	80 81       	ld	r24, Z
    468e:	91 81       	ldd	r25, Z+1	; 0x01
    4690:	8d 93       	st	X+, r24
    4692:	9c 93       	st	X, r25
    4694:	fe 01       	movw	r30, r28
    4696:	eb 53       	subi	r30, 0x3B	; 59
    4698:	ff 4f       	sbci	r31, 0xFF	; 255
    469a:	80 81       	ld	r24, Z
    469c:	91 81       	ldd	r25, Z+1	; 0x01
    469e:	01 97       	sbiw	r24, 0x01	; 1
    46a0:	f1 f7       	brne	.-4      	; 0x469e <main+0x1fce>
    46a2:	fe 01       	movw	r30, r28
    46a4:	eb 53       	subi	r30, 0x3B	; 59
    46a6:	ff 4f       	sbci	r31, 0xFF	; 255
    46a8:	91 83       	std	Z+1, r25	; 0x01
    46aa:	80 83       	st	Z, r24
					_delay_ms(200);
					LCD_VoidSendStringFromPos("*",0,11+i);
    46ac:	fe 01       	movw	r30, r28
    46ae:	e2 52       	subi	r30, 0x22	; 34
    46b0:	fe 4f       	sbci	r31, 0xFE	; 254
    46b2:	80 81       	ld	r24, Z
    46b4:	28 2f       	mov	r18, r24
    46b6:	25 5f       	subi	r18, 0xF5	; 245
    46b8:	84 ea       	ldi	r24, 0xA4	; 164
    46ba:	90 e0       	ldi	r25, 0x00	; 0
    46bc:	60 e0       	ldi	r22, 0x00	; 0
    46be:	42 2f       	mov	r20, r18
    46c0:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <LCD_VoidSendStringFromPos>
					LCD_VoidSendStringFromPos("Invalid Input",0,1);
					_delay_ms(500);
					break;
				}
				/*10+2 120+3 1230+4 12340*/
				Comp_Pass += Key_Value;
    46c4:	fe 01       	movw	r30, r28
    46c6:	eb 50       	subi	r30, 0x0B	; 11
    46c8:	fe 4f       	sbci	r31, 0xFE	; 254
    46ca:	80 81       	ld	r24, Z
    46cc:	28 2f       	mov	r18, r24
    46ce:	30 e0       	ldi	r19, 0x00	; 0
    46d0:	40 e0       	ldi	r20, 0x00	; 0
    46d2:	50 e0       	ldi	r21, 0x00	; 0
    46d4:	be 01       	movw	r22, r28
    46d6:	60 52       	subi	r22, 0x20	; 32
    46d8:	7e 4f       	sbci	r23, 0xFE	; 254
    46da:	fe 01       	movw	r30, r28
    46dc:	e0 52       	subi	r30, 0x20	; 32
    46de:	fe 4f       	sbci	r31, 0xFE	; 254
    46e0:	80 81       	ld	r24, Z
    46e2:	91 81       	ldd	r25, Z+1	; 0x01
    46e4:	a2 81       	ldd	r26, Z+2	; 0x02
    46e6:	b3 81       	ldd	r27, Z+3	; 0x03
    46e8:	82 0f       	add	r24, r18
    46ea:	93 1f       	adc	r25, r19
    46ec:	a4 1f       	adc	r26, r20
    46ee:	b5 1f       	adc	r27, r21
    46f0:	fb 01       	movw	r30, r22
    46f2:	80 83       	st	Z, r24
    46f4:	91 83       	std	Z+1, r25	; 0x01
    46f6:	a2 83       	std	Z+2, r26	; 0x02
    46f8:	b3 83       	std	Z+3, r27	; 0x03
				Comp_Pass = Comp_Pass * 10;
    46fa:	8e 01       	movw	r16, r28
    46fc:	00 52       	subi	r16, 0x20	; 32
    46fe:	1e 4f       	sbci	r17, 0xFE	; 254
    4700:	fe 01       	movw	r30, r28
    4702:	e0 52       	subi	r30, 0x20	; 32
    4704:	fe 4f       	sbci	r31, 0xFE	; 254
    4706:	80 81       	ld	r24, Z
    4708:	91 81       	ldd	r25, Z+1	; 0x01
    470a:	a2 81       	ldd	r26, Z+2	; 0x02
    470c:	b3 81       	ldd	r27, Z+3	; 0x03
    470e:	2a e0       	ldi	r18, 0x0A	; 10
    4710:	30 e0       	ldi	r19, 0x00	; 0
    4712:	40 e0       	ldi	r20, 0x00	; 0
    4714:	50 e0       	ldi	r21, 0x00	; 0
    4716:	bc 01       	movw	r22, r24
    4718:	cd 01       	movw	r24, r26
    471a:	0e 94 d5 2d 	call	0x5baa	; 0x5baa <__mulsi3>
    471e:	dc 01       	movw	r26, r24
    4720:	cb 01       	movw	r24, r22
    4722:	f8 01       	movw	r30, r16
    4724:	80 83       	st	Z, r24
    4726:	91 83       	std	Z+1, r25	; 0x01
    4728:	a2 83       	std	Z+2, r26	; 0x02
    472a:	b3 83       	std	Z+3, r27	; 0x03
		else if (Chosen_Mode == 2)
		{
			LCD_VoidSendCommand(LCD_ClearDisplay);
			_delay_ms(2);
			LCD_VoidSendString("Old Pass : ");
			for (u8 i = 0; i<4 ;i++)
    472c:	de 01       	movw	r26, r28
    472e:	a2 52       	subi	r26, 0x22	; 34
    4730:	be 4f       	sbci	r27, 0xFE	; 254
    4732:	fe 01       	movw	r30, r28
    4734:	e2 52       	subi	r30, 0x22	; 34
    4736:	fe 4f       	sbci	r31, 0xFE	; 254
    4738:	80 81       	ld	r24, Z
    473a:	8f 5f       	subi	r24, 0xFF	; 255
    473c:	8c 93       	st	X, r24
    473e:	71 c1       	rjmp	.+738    	; 0x4a22 <main+0x2352>
					_delay_ms(200);
					Display_Str_Row_Col(0,11+i,"*");*/
				}
				else
				{
					LCD_VoidSendCommand(LCD_ClearDisplay);
    4740:	81 e0       	ldi	r24, 0x01	; 1
    4742:	0e 94 92 0b 	call	0x1724	; 0x1724 <LCD_VoidSendCommand>
    4746:	fe 01       	movw	r30, r28
    4748:	ef 53       	subi	r30, 0x3F	; 63
    474a:	ff 4f       	sbci	r31, 0xFF	; 255
    474c:	80 e0       	ldi	r24, 0x00	; 0
    474e:	90 e0       	ldi	r25, 0x00	; 0
    4750:	a0 e0       	ldi	r26, 0x00	; 0
    4752:	b0 e4       	ldi	r27, 0x40	; 64
    4754:	80 83       	st	Z, r24
    4756:	91 83       	std	Z+1, r25	; 0x01
    4758:	a2 83       	std	Z+2, r26	; 0x02
    475a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    475c:	8e 01       	movw	r16, r28
    475e:	03 54       	subi	r16, 0x43	; 67
    4760:	1f 4f       	sbci	r17, 0xFF	; 255
    4762:	fe 01       	movw	r30, r28
    4764:	ef 53       	subi	r30, 0x3F	; 63
    4766:	ff 4f       	sbci	r31, 0xFF	; 255
    4768:	60 81       	ld	r22, Z
    476a:	71 81       	ldd	r23, Z+1	; 0x01
    476c:	82 81       	ldd	r24, Z+2	; 0x02
    476e:	93 81       	ldd	r25, Z+3	; 0x03
    4770:	20 e0       	ldi	r18, 0x00	; 0
    4772:	30 e0       	ldi	r19, 0x00	; 0
    4774:	4a ef       	ldi	r20, 0xFA	; 250
    4776:	54 e4       	ldi	r21, 0x44	; 68
    4778:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    477c:	dc 01       	movw	r26, r24
    477e:	cb 01       	movw	r24, r22
    4780:	f8 01       	movw	r30, r16
    4782:	80 83       	st	Z, r24
    4784:	91 83       	std	Z+1, r25	; 0x01
    4786:	a2 83       	std	Z+2, r26	; 0x02
    4788:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    478a:	fe 01       	movw	r30, r28
    478c:	e3 54       	subi	r30, 0x43	; 67
    478e:	ff 4f       	sbci	r31, 0xFF	; 255
    4790:	60 81       	ld	r22, Z
    4792:	71 81       	ldd	r23, Z+1	; 0x01
    4794:	82 81       	ldd	r24, Z+2	; 0x02
    4796:	93 81       	ldd	r25, Z+3	; 0x03
    4798:	20 e0       	ldi	r18, 0x00	; 0
    479a:	30 e0       	ldi	r19, 0x00	; 0
    479c:	40 e8       	ldi	r20, 0x80	; 128
    479e:	5f e3       	ldi	r21, 0x3F	; 63
    47a0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    47a4:	88 23       	and	r24, r24
    47a6:	44 f4       	brge	.+16     	; 0x47b8 <main+0x20e8>
		__ticks = 1;
    47a8:	fe 01       	movw	r30, r28
    47aa:	e5 54       	subi	r30, 0x45	; 69
    47ac:	ff 4f       	sbci	r31, 0xFF	; 255
    47ae:	81 e0       	ldi	r24, 0x01	; 1
    47b0:	90 e0       	ldi	r25, 0x00	; 0
    47b2:	91 83       	std	Z+1, r25	; 0x01
    47b4:	80 83       	st	Z, r24
    47b6:	64 c0       	rjmp	.+200    	; 0x4880 <main+0x21b0>
	else if (__tmp > 65535)
    47b8:	fe 01       	movw	r30, r28
    47ba:	e3 54       	subi	r30, 0x43	; 67
    47bc:	ff 4f       	sbci	r31, 0xFF	; 255
    47be:	60 81       	ld	r22, Z
    47c0:	71 81       	ldd	r23, Z+1	; 0x01
    47c2:	82 81       	ldd	r24, Z+2	; 0x02
    47c4:	93 81       	ldd	r25, Z+3	; 0x03
    47c6:	20 e0       	ldi	r18, 0x00	; 0
    47c8:	3f ef       	ldi	r19, 0xFF	; 255
    47ca:	4f e7       	ldi	r20, 0x7F	; 127
    47cc:	57 e4       	ldi	r21, 0x47	; 71
    47ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    47d2:	18 16       	cp	r1, r24
    47d4:	0c f0       	brlt	.+2      	; 0x47d8 <main+0x2108>
    47d6:	43 c0       	rjmp	.+134    	; 0x485e <main+0x218e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    47d8:	fe 01       	movw	r30, r28
    47da:	ef 53       	subi	r30, 0x3F	; 63
    47dc:	ff 4f       	sbci	r31, 0xFF	; 255
    47de:	60 81       	ld	r22, Z
    47e0:	71 81       	ldd	r23, Z+1	; 0x01
    47e2:	82 81       	ldd	r24, Z+2	; 0x02
    47e4:	93 81       	ldd	r25, Z+3	; 0x03
    47e6:	20 e0       	ldi	r18, 0x00	; 0
    47e8:	30 e0       	ldi	r19, 0x00	; 0
    47ea:	40 e2       	ldi	r20, 0x20	; 32
    47ec:	51 e4       	ldi	r21, 0x41	; 65
    47ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47f2:	dc 01       	movw	r26, r24
    47f4:	cb 01       	movw	r24, r22
    47f6:	8e 01       	movw	r16, r28
    47f8:	05 54       	subi	r16, 0x45	; 69
    47fa:	1f 4f       	sbci	r17, 0xFF	; 255
    47fc:	bc 01       	movw	r22, r24
    47fe:	cd 01       	movw	r24, r26
    4800:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4804:	dc 01       	movw	r26, r24
    4806:	cb 01       	movw	r24, r22
    4808:	f8 01       	movw	r30, r16
    480a:	91 83       	std	Z+1, r25	; 0x01
    480c:	80 83       	st	Z, r24
    480e:	1f c0       	rjmp	.+62     	; 0x484e <main+0x217e>
    4810:	fe 01       	movw	r30, r28
    4812:	e7 54       	subi	r30, 0x47	; 71
    4814:	ff 4f       	sbci	r31, 0xFF	; 255
    4816:	88 ec       	ldi	r24, 0xC8	; 200
    4818:	90 e0       	ldi	r25, 0x00	; 0
    481a:	91 83       	std	Z+1, r25	; 0x01
    481c:	80 83       	st	Z, r24
    481e:	fe 01       	movw	r30, r28
    4820:	e7 54       	subi	r30, 0x47	; 71
    4822:	ff 4f       	sbci	r31, 0xFF	; 255
    4824:	80 81       	ld	r24, Z
    4826:	91 81       	ldd	r25, Z+1	; 0x01
    4828:	01 97       	sbiw	r24, 0x01	; 1
    482a:	f1 f7       	brne	.-4      	; 0x4828 <main+0x2158>
    482c:	fe 01       	movw	r30, r28
    482e:	e7 54       	subi	r30, 0x47	; 71
    4830:	ff 4f       	sbci	r31, 0xFF	; 255
    4832:	91 83       	std	Z+1, r25	; 0x01
    4834:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4836:	de 01       	movw	r26, r28
    4838:	a5 54       	subi	r26, 0x45	; 69
    483a:	bf 4f       	sbci	r27, 0xFF	; 255
    483c:	fe 01       	movw	r30, r28
    483e:	e5 54       	subi	r30, 0x45	; 69
    4840:	ff 4f       	sbci	r31, 0xFF	; 255
    4842:	80 81       	ld	r24, Z
    4844:	91 81       	ldd	r25, Z+1	; 0x01
    4846:	01 97       	sbiw	r24, 0x01	; 1
    4848:	11 96       	adiw	r26, 0x01	; 1
    484a:	9c 93       	st	X, r25
    484c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    484e:	fe 01       	movw	r30, r28
    4850:	e5 54       	subi	r30, 0x45	; 69
    4852:	ff 4f       	sbci	r31, 0xFF	; 255
    4854:	80 81       	ld	r24, Z
    4856:	91 81       	ldd	r25, Z+1	; 0x01
    4858:	00 97       	sbiw	r24, 0x00	; 0
    485a:	d1 f6       	brne	.-76     	; 0x4810 <main+0x2140>
    485c:	27 c0       	rjmp	.+78     	; 0x48ac <main+0x21dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    485e:	8e 01       	movw	r16, r28
    4860:	05 54       	subi	r16, 0x45	; 69
    4862:	1f 4f       	sbci	r17, 0xFF	; 255
    4864:	fe 01       	movw	r30, r28
    4866:	e3 54       	subi	r30, 0x43	; 67
    4868:	ff 4f       	sbci	r31, 0xFF	; 255
    486a:	60 81       	ld	r22, Z
    486c:	71 81       	ldd	r23, Z+1	; 0x01
    486e:	82 81       	ldd	r24, Z+2	; 0x02
    4870:	93 81       	ldd	r25, Z+3	; 0x03
    4872:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4876:	dc 01       	movw	r26, r24
    4878:	cb 01       	movw	r24, r22
    487a:	f8 01       	movw	r30, r16
    487c:	91 83       	std	Z+1, r25	; 0x01
    487e:	80 83       	st	Z, r24
    4880:	de 01       	movw	r26, r28
    4882:	a9 54       	subi	r26, 0x49	; 73
    4884:	bf 4f       	sbci	r27, 0xFF	; 255
    4886:	fe 01       	movw	r30, r28
    4888:	e5 54       	subi	r30, 0x45	; 69
    488a:	ff 4f       	sbci	r31, 0xFF	; 255
    488c:	80 81       	ld	r24, Z
    488e:	91 81       	ldd	r25, Z+1	; 0x01
    4890:	8d 93       	st	X+, r24
    4892:	9c 93       	st	X, r25
    4894:	fe 01       	movw	r30, r28
    4896:	e9 54       	subi	r30, 0x49	; 73
    4898:	ff 4f       	sbci	r31, 0xFF	; 255
    489a:	80 81       	ld	r24, Z
    489c:	91 81       	ldd	r25, Z+1	; 0x01
    489e:	01 97       	sbiw	r24, 0x01	; 1
    48a0:	f1 f7       	brne	.-4      	; 0x489e <main+0x21ce>
    48a2:	fe 01       	movw	r30, r28
    48a4:	e9 54       	subi	r30, 0x49	; 73
    48a6:	ff 4f       	sbci	r31, 0xFF	; 255
    48a8:	91 83       	std	Z+1, r25	; 0x01
    48aa:	80 83       	st	Z, r24
					_delay_ms(2);
					LCD_VoidSendStringFromPos("Invalid Input",0,1);
    48ac:	86 ea       	ldi	r24, 0xA6	; 166
    48ae:	90 e0       	ldi	r25, 0x00	; 0
    48b0:	60 e0       	ldi	r22, 0x00	; 0
    48b2:	41 e0       	ldi	r20, 0x01	; 1
    48b4:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <LCD_VoidSendStringFromPos>
    48b8:	fe 01       	movw	r30, r28
    48ba:	ed 54       	subi	r30, 0x4D	; 77
    48bc:	ff 4f       	sbci	r31, 0xFF	; 255
    48be:	80 e0       	ldi	r24, 0x00	; 0
    48c0:	90 e0       	ldi	r25, 0x00	; 0
    48c2:	aa ef       	ldi	r26, 0xFA	; 250
    48c4:	b3 e4       	ldi	r27, 0x43	; 67
    48c6:	80 83       	st	Z, r24
    48c8:	91 83       	std	Z+1, r25	; 0x01
    48ca:	a2 83       	std	Z+2, r26	; 0x02
    48cc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    48ce:	8e 01       	movw	r16, r28
    48d0:	01 55       	subi	r16, 0x51	; 81
    48d2:	1f 4f       	sbci	r17, 0xFF	; 255
    48d4:	fe 01       	movw	r30, r28
    48d6:	ed 54       	subi	r30, 0x4D	; 77
    48d8:	ff 4f       	sbci	r31, 0xFF	; 255
    48da:	60 81       	ld	r22, Z
    48dc:	71 81       	ldd	r23, Z+1	; 0x01
    48de:	82 81       	ldd	r24, Z+2	; 0x02
    48e0:	93 81       	ldd	r25, Z+3	; 0x03
    48e2:	20 e0       	ldi	r18, 0x00	; 0
    48e4:	30 e0       	ldi	r19, 0x00	; 0
    48e6:	4a ef       	ldi	r20, 0xFA	; 250
    48e8:	54 e4       	ldi	r21, 0x44	; 68
    48ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48ee:	dc 01       	movw	r26, r24
    48f0:	cb 01       	movw	r24, r22
    48f2:	f8 01       	movw	r30, r16
    48f4:	80 83       	st	Z, r24
    48f6:	91 83       	std	Z+1, r25	; 0x01
    48f8:	a2 83       	std	Z+2, r26	; 0x02
    48fa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    48fc:	fe 01       	movw	r30, r28
    48fe:	e1 55       	subi	r30, 0x51	; 81
    4900:	ff 4f       	sbci	r31, 0xFF	; 255
    4902:	60 81       	ld	r22, Z
    4904:	71 81       	ldd	r23, Z+1	; 0x01
    4906:	82 81       	ldd	r24, Z+2	; 0x02
    4908:	93 81       	ldd	r25, Z+3	; 0x03
    490a:	20 e0       	ldi	r18, 0x00	; 0
    490c:	30 e0       	ldi	r19, 0x00	; 0
    490e:	40 e8       	ldi	r20, 0x80	; 128
    4910:	5f e3       	ldi	r21, 0x3F	; 63
    4912:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4916:	88 23       	and	r24, r24
    4918:	44 f4       	brge	.+16     	; 0x492a <main+0x225a>
		__ticks = 1;
    491a:	fe 01       	movw	r30, r28
    491c:	e3 55       	subi	r30, 0x53	; 83
    491e:	ff 4f       	sbci	r31, 0xFF	; 255
    4920:	81 e0       	ldi	r24, 0x01	; 1
    4922:	90 e0       	ldi	r25, 0x00	; 0
    4924:	91 83       	std	Z+1, r25	; 0x01
    4926:	80 83       	st	Z, r24
    4928:	64 c0       	rjmp	.+200    	; 0x49f2 <main+0x2322>
	else if (__tmp > 65535)
    492a:	fe 01       	movw	r30, r28
    492c:	e1 55       	subi	r30, 0x51	; 81
    492e:	ff 4f       	sbci	r31, 0xFF	; 255
    4930:	60 81       	ld	r22, Z
    4932:	71 81       	ldd	r23, Z+1	; 0x01
    4934:	82 81       	ldd	r24, Z+2	; 0x02
    4936:	93 81       	ldd	r25, Z+3	; 0x03
    4938:	20 e0       	ldi	r18, 0x00	; 0
    493a:	3f ef       	ldi	r19, 0xFF	; 255
    493c:	4f e7       	ldi	r20, 0x7F	; 127
    493e:	57 e4       	ldi	r21, 0x47	; 71
    4940:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4944:	18 16       	cp	r1, r24
    4946:	0c f0       	brlt	.+2      	; 0x494a <main+0x227a>
    4948:	43 c0       	rjmp	.+134    	; 0x49d0 <main+0x2300>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    494a:	fe 01       	movw	r30, r28
    494c:	ed 54       	subi	r30, 0x4D	; 77
    494e:	ff 4f       	sbci	r31, 0xFF	; 255
    4950:	60 81       	ld	r22, Z
    4952:	71 81       	ldd	r23, Z+1	; 0x01
    4954:	82 81       	ldd	r24, Z+2	; 0x02
    4956:	93 81       	ldd	r25, Z+3	; 0x03
    4958:	20 e0       	ldi	r18, 0x00	; 0
    495a:	30 e0       	ldi	r19, 0x00	; 0
    495c:	40 e2       	ldi	r20, 0x20	; 32
    495e:	51 e4       	ldi	r21, 0x41	; 65
    4960:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4964:	dc 01       	movw	r26, r24
    4966:	cb 01       	movw	r24, r22
    4968:	8e 01       	movw	r16, r28
    496a:	03 55       	subi	r16, 0x53	; 83
    496c:	1f 4f       	sbci	r17, 0xFF	; 255
    496e:	bc 01       	movw	r22, r24
    4970:	cd 01       	movw	r24, r26
    4972:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4976:	dc 01       	movw	r26, r24
    4978:	cb 01       	movw	r24, r22
    497a:	f8 01       	movw	r30, r16
    497c:	91 83       	std	Z+1, r25	; 0x01
    497e:	80 83       	st	Z, r24
    4980:	1f c0       	rjmp	.+62     	; 0x49c0 <main+0x22f0>
    4982:	fe 01       	movw	r30, r28
    4984:	e5 55       	subi	r30, 0x55	; 85
    4986:	ff 4f       	sbci	r31, 0xFF	; 255
    4988:	88 ec       	ldi	r24, 0xC8	; 200
    498a:	90 e0       	ldi	r25, 0x00	; 0
    498c:	91 83       	std	Z+1, r25	; 0x01
    498e:	80 83       	st	Z, r24
    4990:	fe 01       	movw	r30, r28
    4992:	e5 55       	subi	r30, 0x55	; 85
    4994:	ff 4f       	sbci	r31, 0xFF	; 255
    4996:	80 81       	ld	r24, Z
    4998:	91 81       	ldd	r25, Z+1	; 0x01
    499a:	01 97       	sbiw	r24, 0x01	; 1
    499c:	f1 f7       	brne	.-4      	; 0x499a <main+0x22ca>
    499e:	fe 01       	movw	r30, r28
    49a0:	e5 55       	subi	r30, 0x55	; 85
    49a2:	ff 4f       	sbci	r31, 0xFF	; 255
    49a4:	91 83       	std	Z+1, r25	; 0x01
    49a6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    49a8:	de 01       	movw	r26, r28
    49aa:	a3 55       	subi	r26, 0x53	; 83
    49ac:	bf 4f       	sbci	r27, 0xFF	; 255
    49ae:	fe 01       	movw	r30, r28
    49b0:	e3 55       	subi	r30, 0x53	; 83
    49b2:	ff 4f       	sbci	r31, 0xFF	; 255
    49b4:	80 81       	ld	r24, Z
    49b6:	91 81       	ldd	r25, Z+1	; 0x01
    49b8:	01 97       	sbiw	r24, 0x01	; 1
    49ba:	11 96       	adiw	r26, 0x01	; 1
    49bc:	9c 93       	st	X, r25
    49be:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    49c0:	fe 01       	movw	r30, r28
    49c2:	e3 55       	subi	r30, 0x53	; 83
    49c4:	ff 4f       	sbci	r31, 0xFF	; 255
    49c6:	80 81       	ld	r24, Z
    49c8:	91 81       	ldd	r25, Z+1	; 0x01
    49ca:	00 97       	sbiw	r24, 0x00	; 0
    49cc:	d1 f6       	brne	.-76     	; 0x4982 <main+0x22b2>
    49ce:	30 c0       	rjmp	.+96     	; 0x4a30 <main+0x2360>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    49d0:	8e 01       	movw	r16, r28
    49d2:	03 55       	subi	r16, 0x53	; 83
    49d4:	1f 4f       	sbci	r17, 0xFF	; 255
    49d6:	fe 01       	movw	r30, r28
    49d8:	e1 55       	subi	r30, 0x51	; 81
    49da:	ff 4f       	sbci	r31, 0xFF	; 255
    49dc:	60 81       	ld	r22, Z
    49de:	71 81       	ldd	r23, Z+1	; 0x01
    49e0:	82 81       	ldd	r24, Z+2	; 0x02
    49e2:	93 81       	ldd	r25, Z+3	; 0x03
    49e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49e8:	dc 01       	movw	r26, r24
    49ea:	cb 01       	movw	r24, r22
    49ec:	f8 01       	movw	r30, r16
    49ee:	91 83       	std	Z+1, r25	; 0x01
    49f0:	80 83       	st	Z, r24
    49f2:	de 01       	movw	r26, r28
    49f4:	a7 55       	subi	r26, 0x57	; 87
    49f6:	bf 4f       	sbci	r27, 0xFF	; 255
    49f8:	fe 01       	movw	r30, r28
    49fa:	e3 55       	subi	r30, 0x53	; 83
    49fc:	ff 4f       	sbci	r31, 0xFF	; 255
    49fe:	80 81       	ld	r24, Z
    4a00:	91 81       	ldd	r25, Z+1	; 0x01
    4a02:	11 96       	adiw	r26, 0x01	; 1
    4a04:	9c 93       	st	X, r25
    4a06:	8e 93       	st	-X, r24
    4a08:	fe 01       	movw	r30, r28
    4a0a:	e7 55       	subi	r30, 0x57	; 87
    4a0c:	ff 4f       	sbci	r31, 0xFF	; 255
    4a0e:	80 81       	ld	r24, Z
    4a10:	91 81       	ldd	r25, Z+1	; 0x01
    4a12:	01 97       	sbiw	r24, 0x01	; 1
    4a14:	f1 f7       	brne	.-4      	; 0x4a12 <main+0x2342>
    4a16:	fe 01       	movw	r30, r28
    4a18:	e7 55       	subi	r30, 0x57	; 87
    4a1a:	ff 4f       	sbci	r31, 0xFF	; 255
    4a1c:	91 83       	std	Z+1, r25	; 0x01
    4a1e:	80 83       	st	Z, r24
    4a20:	07 c0       	rjmp	.+14     	; 0x4a30 <main+0x2360>
		else if (Chosen_Mode == 2)
		{
			LCD_VoidSendCommand(LCD_ClearDisplay);
			_delay_ms(2);
			LCD_VoidSendString("Old Pass : ");
			for (u8 i = 0; i<4 ;i++)
    4a22:	fe 01       	movw	r30, r28
    4a24:	e2 52       	subi	r30, 0x22	; 34
    4a26:	fe 4f       	sbci	r31, 0xFE	; 254
    4a28:	80 81       	ld	r24, Z
    4a2a:	84 30       	cpi	r24, 0x04	; 4
    4a2c:	08 f4       	brcc	.+2      	; 0x4a30 <main+0x2360>
    4a2e:	b9 cc       	rjmp	.-1678   	; 0x43a2 <main+0x1cd2>
				/*10+2 120+3 1230+4 12340*/
				Comp_Pass += Key_Value;
				Comp_Pass = Comp_Pass * 10;
			}
			/*12340->1234*/
			Comp_Pass = Comp_Pass / 10;
    4a30:	8e 01       	movw	r16, r28
    4a32:	00 52       	subi	r16, 0x20	; 32
    4a34:	1e 4f       	sbci	r17, 0xFE	; 254
    4a36:	fe 01       	movw	r30, r28
    4a38:	e0 52       	subi	r30, 0x20	; 32
    4a3a:	fe 4f       	sbci	r31, 0xFE	; 254
    4a3c:	80 81       	ld	r24, Z
    4a3e:	91 81       	ldd	r25, Z+1	; 0x01
    4a40:	a2 81       	ldd	r26, Z+2	; 0x02
    4a42:	b3 81       	ldd	r27, Z+3	; 0x03
    4a44:	2a e0       	ldi	r18, 0x0A	; 10
    4a46:	30 e0       	ldi	r19, 0x00	; 0
    4a48:	40 e0       	ldi	r20, 0x00	; 0
    4a4a:	50 e0       	ldi	r21, 0x00	; 0
    4a4c:	bc 01       	movw	r22, r24
    4a4e:	cd 01       	movw	r24, r26
    4a50:	0e 94 f4 2d 	call	0x5be8	; 0x5be8 <__udivmodsi4>
    4a54:	da 01       	movw	r26, r20
    4a56:	c9 01       	movw	r24, r18
    4a58:	f8 01       	movw	r30, r16
    4a5a:	80 83       	st	Z, r24
    4a5c:	91 83       	std	Z+1, r25	; 0x01
    4a5e:	a2 83       	std	Z+2, r26	; 0x02
    4a60:	b3 83       	std	Z+3, r27	; 0x03
    4a62:	fe 01       	movw	r30, r28
    4a64:	eb 55       	subi	r30, 0x5B	; 91
    4a66:	ff 4f       	sbci	r31, 0xFF	; 255
    4a68:	80 e0       	ldi	r24, 0x00	; 0
    4a6a:	90 e0       	ldi	r25, 0x00	; 0
    4a6c:	aa ef       	ldi	r26, 0xFA	; 250
    4a6e:	b3 e4       	ldi	r27, 0x43	; 67
    4a70:	80 83       	st	Z, r24
    4a72:	91 83       	std	Z+1, r25	; 0x01
    4a74:	a2 83       	std	Z+2, r26	; 0x02
    4a76:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a78:	8e 01       	movw	r16, r28
    4a7a:	0f 55       	subi	r16, 0x5F	; 95
    4a7c:	1f 4f       	sbci	r17, 0xFF	; 255
    4a7e:	fe 01       	movw	r30, r28
    4a80:	eb 55       	subi	r30, 0x5B	; 91
    4a82:	ff 4f       	sbci	r31, 0xFF	; 255
    4a84:	60 81       	ld	r22, Z
    4a86:	71 81       	ldd	r23, Z+1	; 0x01
    4a88:	82 81       	ldd	r24, Z+2	; 0x02
    4a8a:	93 81       	ldd	r25, Z+3	; 0x03
    4a8c:	20 e0       	ldi	r18, 0x00	; 0
    4a8e:	30 e0       	ldi	r19, 0x00	; 0
    4a90:	4a ef       	ldi	r20, 0xFA	; 250
    4a92:	54 e4       	ldi	r21, 0x44	; 68
    4a94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a98:	dc 01       	movw	r26, r24
    4a9a:	cb 01       	movw	r24, r22
    4a9c:	f8 01       	movw	r30, r16
    4a9e:	80 83       	st	Z, r24
    4aa0:	91 83       	std	Z+1, r25	; 0x01
    4aa2:	a2 83       	std	Z+2, r26	; 0x02
    4aa4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4aa6:	fe 01       	movw	r30, r28
    4aa8:	ef 55       	subi	r30, 0x5F	; 95
    4aaa:	ff 4f       	sbci	r31, 0xFF	; 255
    4aac:	60 81       	ld	r22, Z
    4aae:	71 81       	ldd	r23, Z+1	; 0x01
    4ab0:	82 81       	ldd	r24, Z+2	; 0x02
    4ab2:	93 81       	ldd	r25, Z+3	; 0x03
    4ab4:	20 e0       	ldi	r18, 0x00	; 0
    4ab6:	30 e0       	ldi	r19, 0x00	; 0
    4ab8:	40 e8       	ldi	r20, 0x80	; 128
    4aba:	5f e3       	ldi	r21, 0x3F	; 63
    4abc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4ac0:	88 23       	and	r24, r24
    4ac2:	44 f4       	brge	.+16     	; 0x4ad4 <main+0x2404>
		__ticks = 1;
    4ac4:	fe 01       	movw	r30, r28
    4ac6:	e1 56       	subi	r30, 0x61	; 97
    4ac8:	ff 4f       	sbci	r31, 0xFF	; 255
    4aca:	81 e0       	ldi	r24, 0x01	; 1
    4acc:	90 e0       	ldi	r25, 0x00	; 0
    4ace:	91 83       	std	Z+1, r25	; 0x01
    4ad0:	80 83       	st	Z, r24
    4ad2:	64 c0       	rjmp	.+200    	; 0x4b9c <main+0x24cc>
	else if (__tmp > 65535)
    4ad4:	fe 01       	movw	r30, r28
    4ad6:	ef 55       	subi	r30, 0x5F	; 95
    4ad8:	ff 4f       	sbci	r31, 0xFF	; 255
    4ada:	60 81       	ld	r22, Z
    4adc:	71 81       	ldd	r23, Z+1	; 0x01
    4ade:	82 81       	ldd	r24, Z+2	; 0x02
    4ae0:	93 81       	ldd	r25, Z+3	; 0x03
    4ae2:	20 e0       	ldi	r18, 0x00	; 0
    4ae4:	3f ef       	ldi	r19, 0xFF	; 255
    4ae6:	4f e7       	ldi	r20, 0x7F	; 127
    4ae8:	57 e4       	ldi	r21, 0x47	; 71
    4aea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4aee:	18 16       	cp	r1, r24
    4af0:	0c f0       	brlt	.+2      	; 0x4af4 <main+0x2424>
    4af2:	43 c0       	rjmp	.+134    	; 0x4b7a <main+0x24aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4af4:	fe 01       	movw	r30, r28
    4af6:	eb 55       	subi	r30, 0x5B	; 91
    4af8:	ff 4f       	sbci	r31, 0xFF	; 255
    4afa:	60 81       	ld	r22, Z
    4afc:	71 81       	ldd	r23, Z+1	; 0x01
    4afe:	82 81       	ldd	r24, Z+2	; 0x02
    4b00:	93 81       	ldd	r25, Z+3	; 0x03
    4b02:	20 e0       	ldi	r18, 0x00	; 0
    4b04:	30 e0       	ldi	r19, 0x00	; 0
    4b06:	40 e2       	ldi	r20, 0x20	; 32
    4b08:	51 e4       	ldi	r21, 0x41	; 65
    4b0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b0e:	dc 01       	movw	r26, r24
    4b10:	cb 01       	movw	r24, r22
    4b12:	8e 01       	movw	r16, r28
    4b14:	01 56       	subi	r16, 0x61	; 97
    4b16:	1f 4f       	sbci	r17, 0xFF	; 255
    4b18:	bc 01       	movw	r22, r24
    4b1a:	cd 01       	movw	r24, r26
    4b1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b20:	dc 01       	movw	r26, r24
    4b22:	cb 01       	movw	r24, r22
    4b24:	f8 01       	movw	r30, r16
    4b26:	91 83       	std	Z+1, r25	; 0x01
    4b28:	80 83       	st	Z, r24
    4b2a:	1f c0       	rjmp	.+62     	; 0x4b6a <main+0x249a>
    4b2c:	fe 01       	movw	r30, r28
    4b2e:	e3 56       	subi	r30, 0x63	; 99
    4b30:	ff 4f       	sbci	r31, 0xFF	; 255
    4b32:	88 ec       	ldi	r24, 0xC8	; 200
    4b34:	90 e0       	ldi	r25, 0x00	; 0
    4b36:	91 83       	std	Z+1, r25	; 0x01
    4b38:	80 83       	st	Z, r24
    4b3a:	fe 01       	movw	r30, r28
    4b3c:	e3 56       	subi	r30, 0x63	; 99
    4b3e:	ff 4f       	sbci	r31, 0xFF	; 255
    4b40:	80 81       	ld	r24, Z
    4b42:	91 81       	ldd	r25, Z+1	; 0x01
    4b44:	01 97       	sbiw	r24, 0x01	; 1
    4b46:	f1 f7       	brne	.-4      	; 0x4b44 <main+0x2474>
    4b48:	fe 01       	movw	r30, r28
    4b4a:	e3 56       	subi	r30, 0x63	; 99
    4b4c:	ff 4f       	sbci	r31, 0xFF	; 255
    4b4e:	91 83       	std	Z+1, r25	; 0x01
    4b50:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b52:	de 01       	movw	r26, r28
    4b54:	a1 56       	subi	r26, 0x61	; 97
    4b56:	bf 4f       	sbci	r27, 0xFF	; 255
    4b58:	fe 01       	movw	r30, r28
    4b5a:	e1 56       	subi	r30, 0x61	; 97
    4b5c:	ff 4f       	sbci	r31, 0xFF	; 255
    4b5e:	80 81       	ld	r24, Z
    4b60:	91 81       	ldd	r25, Z+1	; 0x01
    4b62:	01 97       	sbiw	r24, 0x01	; 1
    4b64:	11 96       	adiw	r26, 0x01	; 1
    4b66:	9c 93       	st	X, r25
    4b68:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4b6a:	fe 01       	movw	r30, r28
    4b6c:	e1 56       	subi	r30, 0x61	; 97
    4b6e:	ff 4f       	sbci	r31, 0xFF	; 255
    4b70:	80 81       	ld	r24, Z
    4b72:	91 81       	ldd	r25, Z+1	; 0x01
    4b74:	00 97       	sbiw	r24, 0x00	; 0
    4b76:	d1 f6       	brne	.-76     	; 0x4b2c <main+0x245c>
    4b78:	27 c0       	rjmp	.+78     	; 0x4bc8 <main+0x24f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4b7a:	8e 01       	movw	r16, r28
    4b7c:	01 56       	subi	r16, 0x61	; 97
    4b7e:	1f 4f       	sbci	r17, 0xFF	; 255
    4b80:	fe 01       	movw	r30, r28
    4b82:	ef 55       	subi	r30, 0x5F	; 95
    4b84:	ff 4f       	sbci	r31, 0xFF	; 255
    4b86:	60 81       	ld	r22, Z
    4b88:	71 81       	ldd	r23, Z+1	; 0x01
    4b8a:	82 81       	ldd	r24, Z+2	; 0x02
    4b8c:	93 81       	ldd	r25, Z+3	; 0x03
    4b8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b92:	dc 01       	movw	r26, r24
    4b94:	cb 01       	movw	r24, r22
    4b96:	f8 01       	movw	r30, r16
    4b98:	91 83       	std	Z+1, r25	; 0x01
    4b9a:	80 83       	st	Z, r24
    4b9c:	de 01       	movw	r26, r28
    4b9e:	a5 56       	subi	r26, 0x65	; 101
    4ba0:	bf 4f       	sbci	r27, 0xFF	; 255
    4ba2:	fe 01       	movw	r30, r28
    4ba4:	e1 56       	subi	r30, 0x61	; 97
    4ba6:	ff 4f       	sbci	r31, 0xFF	; 255
    4ba8:	80 81       	ld	r24, Z
    4baa:	91 81       	ldd	r25, Z+1	; 0x01
    4bac:	8d 93       	st	X+, r24
    4bae:	9c 93       	st	X, r25
    4bb0:	fe 01       	movw	r30, r28
    4bb2:	e5 56       	subi	r30, 0x65	; 101
    4bb4:	ff 4f       	sbci	r31, 0xFF	; 255
    4bb6:	80 81       	ld	r24, Z
    4bb8:	91 81       	ldd	r25, Z+1	; 0x01
    4bba:	01 97       	sbiw	r24, 0x01	; 1
    4bbc:	f1 f7       	brne	.-4      	; 0x4bba <main+0x24ea>
    4bbe:	fe 01       	movw	r30, r28
    4bc0:	e5 56       	subi	r30, 0x65	; 101
    4bc2:	ff 4f       	sbci	r31, 0xFF	; 255
    4bc4:	91 83       	std	Z+1, r25	; 0x01
    4bc6:	80 83       	st	Z, r24
			_delay_ms(500);
			LCD_VoidSendCommand(LCD_ClearDisplay);
    4bc8:	81 e0       	ldi	r24, 0x01	; 1
    4bca:	0e 94 92 0b 	call	0x1724	; 0x1724 <LCD_VoidSendCommand>
    4bce:	fe 01       	movw	r30, r28
    4bd0:	e9 56       	subi	r30, 0x69	; 105
    4bd2:	ff 4f       	sbci	r31, 0xFF	; 255
    4bd4:	80 e0       	ldi	r24, 0x00	; 0
    4bd6:	90 e0       	ldi	r25, 0x00	; 0
    4bd8:	a0 e0       	ldi	r26, 0x00	; 0
    4bda:	b0 e4       	ldi	r27, 0x40	; 64
    4bdc:	80 83       	st	Z, r24
    4bde:	91 83       	std	Z+1, r25	; 0x01
    4be0:	a2 83       	std	Z+2, r26	; 0x02
    4be2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4be4:	8e 01       	movw	r16, r28
    4be6:	0d 56       	subi	r16, 0x6D	; 109
    4be8:	1f 4f       	sbci	r17, 0xFF	; 255
    4bea:	fe 01       	movw	r30, r28
    4bec:	e9 56       	subi	r30, 0x69	; 105
    4bee:	ff 4f       	sbci	r31, 0xFF	; 255
    4bf0:	60 81       	ld	r22, Z
    4bf2:	71 81       	ldd	r23, Z+1	; 0x01
    4bf4:	82 81       	ldd	r24, Z+2	; 0x02
    4bf6:	93 81       	ldd	r25, Z+3	; 0x03
    4bf8:	20 e0       	ldi	r18, 0x00	; 0
    4bfa:	30 e0       	ldi	r19, 0x00	; 0
    4bfc:	4a ef       	ldi	r20, 0xFA	; 250
    4bfe:	54 e4       	ldi	r21, 0x44	; 68
    4c00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c04:	dc 01       	movw	r26, r24
    4c06:	cb 01       	movw	r24, r22
    4c08:	f8 01       	movw	r30, r16
    4c0a:	80 83       	st	Z, r24
    4c0c:	91 83       	std	Z+1, r25	; 0x01
    4c0e:	a2 83       	std	Z+2, r26	; 0x02
    4c10:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4c12:	fe 01       	movw	r30, r28
    4c14:	ed 56       	subi	r30, 0x6D	; 109
    4c16:	ff 4f       	sbci	r31, 0xFF	; 255
    4c18:	60 81       	ld	r22, Z
    4c1a:	71 81       	ldd	r23, Z+1	; 0x01
    4c1c:	82 81       	ldd	r24, Z+2	; 0x02
    4c1e:	93 81       	ldd	r25, Z+3	; 0x03
    4c20:	20 e0       	ldi	r18, 0x00	; 0
    4c22:	30 e0       	ldi	r19, 0x00	; 0
    4c24:	40 e8       	ldi	r20, 0x80	; 128
    4c26:	5f e3       	ldi	r21, 0x3F	; 63
    4c28:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4c2c:	88 23       	and	r24, r24
    4c2e:	44 f4       	brge	.+16     	; 0x4c40 <main+0x2570>
		__ticks = 1;
    4c30:	fe 01       	movw	r30, r28
    4c32:	ef 56       	subi	r30, 0x6F	; 111
    4c34:	ff 4f       	sbci	r31, 0xFF	; 255
    4c36:	81 e0       	ldi	r24, 0x01	; 1
    4c38:	90 e0       	ldi	r25, 0x00	; 0
    4c3a:	91 83       	std	Z+1, r25	; 0x01
    4c3c:	80 83       	st	Z, r24
    4c3e:	64 c0       	rjmp	.+200    	; 0x4d08 <main+0x2638>
	else if (__tmp > 65535)
    4c40:	fe 01       	movw	r30, r28
    4c42:	ed 56       	subi	r30, 0x6D	; 109
    4c44:	ff 4f       	sbci	r31, 0xFF	; 255
    4c46:	60 81       	ld	r22, Z
    4c48:	71 81       	ldd	r23, Z+1	; 0x01
    4c4a:	82 81       	ldd	r24, Z+2	; 0x02
    4c4c:	93 81       	ldd	r25, Z+3	; 0x03
    4c4e:	20 e0       	ldi	r18, 0x00	; 0
    4c50:	3f ef       	ldi	r19, 0xFF	; 255
    4c52:	4f e7       	ldi	r20, 0x7F	; 127
    4c54:	57 e4       	ldi	r21, 0x47	; 71
    4c56:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4c5a:	18 16       	cp	r1, r24
    4c5c:	0c f0       	brlt	.+2      	; 0x4c60 <main+0x2590>
    4c5e:	43 c0       	rjmp	.+134    	; 0x4ce6 <main+0x2616>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c60:	fe 01       	movw	r30, r28
    4c62:	e9 56       	subi	r30, 0x69	; 105
    4c64:	ff 4f       	sbci	r31, 0xFF	; 255
    4c66:	60 81       	ld	r22, Z
    4c68:	71 81       	ldd	r23, Z+1	; 0x01
    4c6a:	82 81       	ldd	r24, Z+2	; 0x02
    4c6c:	93 81       	ldd	r25, Z+3	; 0x03
    4c6e:	20 e0       	ldi	r18, 0x00	; 0
    4c70:	30 e0       	ldi	r19, 0x00	; 0
    4c72:	40 e2       	ldi	r20, 0x20	; 32
    4c74:	51 e4       	ldi	r21, 0x41	; 65
    4c76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c7a:	dc 01       	movw	r26, r24
    4c7c:	cb 01       	movw	r24, r22
    4c7e:	8e 01       	movw	r16, r28
    4c80:	0f 56       	subi	r16, 0x6F	; 111
    4c82:	1f 4f       	sbci	r17, 0xFF	; 255
    4c84:	bc 01       	movw	r22, r24
    4c86:	cd 01       	movw	r24, r26
    4c88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c8c:	dc 01       	movw	r26, r24
    4c8e:	cb 01       	movw	r24, r22
    4c90:	f8 01       	movw	r30, r16
    4c92:	91 83       	std	Z+1, r25	; 0x01
    4c94:	80 83       	st	Z, r24
    4c96:	1f c0       	rjmp	.+62     	; 0x4cd6 <main+0x2606>
    4c98:	fe 01       	movw	r30, r28
    4c9a:	e1 57       	subi	r30, 0x71	; 113
    4c9c:	ff 4f       	sbci	r31, 0xFF	; 255
    4c9e:	88 ec       	ldi	r24, 0xC8	; 200
    4ca0:	90 e0       	ldi	r25, 0x00	; 0
    4ca2:	91 83       	std	Z+1, r25	; 0x01
    4ca4:	80 83       	st	Z, r24
    4ca6:	fe 01       	movw	r30, r28
    4ca8:	e1 57       	subi	r30, 0x71	; 113
    4caa:	ff 4f       	sbci	r31, 0xFF	; 255
    4cac:	80 81       	ld	r24, Z
    4cae:	91 81       	ldd	r25, Z+1	; 0x01
    4cb0:	01 97       	sbiw	r24, 0x01	; 1
    4cb2:	f1 f7       	brne	.-4      	; 0x4cb0 <main+0x25e0>
    4cb4:	fe 01       	movw	r30, r28
    4cb6:	e1 57       	subi	r30, 0x71	; 113
    4cb8:	ff 4f       	sbci	r31, 0xFF	; 255
    4cba:	91 83       	std	Z+1, r25	; 0x01
    4cbc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4cbe:	de 01       	movw	r26, r28
    4cc0:	af 56       	subi	r26, 0x6F	; 111
    4cc2:	bf 4f       	sbci	r27, 0xFF	; 255
    4cc4:	fe 01       	movw	r30, r28
    4cc6:	ef 56       	subi	r30, 0x6F	; 111
    4cc8:	ff 4f       	sbci	r31, 0xFF	; 255
    4cca:	80 81       	ld	r24, Z
    4ccc:	91 81       	ldd	r25, Z+1	; 0x01
    4cce:	01 97       	sbiw	r24, 0x01	; 1
    4cd0:	11 96       	adiw	r26, 0x01	; 1
    4cd2:	9c 93       	st	X, r25
    4cd4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4cd6:	fe 01       	movw	r30, r28
    4cd8:	ef 56       	subi	r30, 0x6F	; 111
    4cda:	ff 4f       	sbci	r31, 0xFF	; 255
    4cdc:	80 81       	ld	r24, Z
    4cde:	91 81       	ldd	r25, Z+1	; 0x01
    4ce0:	00 97       	sbiw	r24, 0x00	; 0
    4ce2:	d1 f6       	brne	.-76     	; 0x4c98 <main+0x25c8>
    4ce4:	27 c0       	rjmp	.+78     	; 0x4d34 <main+0x2664>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ce6:	8e 01       	movw	r16, r28
    4ce8:	0f 56       	subi	r16, 0x6F	; 111
    4cea:	1f 4f       	sbci	r17, 0xFF	; 255
    4cec:	fe 01       	movw	r30, r28
    4cee:	ed 56       	subi	r30, 0x6D	; 109
    4cf0:	ff 4f       	sbci	r31, 0xFF	; 255
    4cf2:	60 81       	ld	r22, Z
    4cf4:	71 81       	ldd	r23, Z+1	; 0x01
    4cf6:	82 81       	ldd	r24, Z+2	; 0x02
    4cf8:	93 81       	ldd	r25, Z+3	; 0x03
    4cfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4cfe:	dc 01       	movw	r26, r24
    4d00:	cb 01       	movw	r24, r22
    4d02:	f8 01       	movw	r30, r16
    4d04:	91 83       	std	Z+1, r25	; 0x01
    4d06:	80 83       	st	Z, r24
    4d08:	de 01       	movw	r26, r28
    4d0a:	a3 57       	subi	r26, 0x73	; 115
    4d0c:	bf 4f       	sbci	r27, 0xFF	; 255
    4d0e:	fe 01       	movw	r30, r28
    4d10:	ef 56       	subi	r30, 0x6F	; 111
    4d12:	ff 4f       	sbci	r31, 0xFF	; 255
    4d14:	80 81       	ld	r24, Z
    4d16:	91 81       	ldd	r25, Z+1	; 0x01
    4d18:	8d 93       	st	X+, r24
    4d1a:	9c 93       	st	X, r25
    4d1c:	fe 01       	movw	r30, r28
    4d1e:	e3 57       	subi	r30, 0x73	; 115
    4d20:	ff 4f       	sbci	r31, 0xFF	; 255
    4d22:	80 81       	ld	r24, Z
    4d24:	91 81       	ldd	r25, Z+1	; 0x01
    4d26:	01 97       	sbiw	r24, 0x01	; 1
    4d28:	f1 f7       	brne	.-4      	; 0x4d26 <main+0x2656>
    4d2a:	fe 01       	movw	r30, r28
    4d2c:	e3 57       	subi	r30, 0x73	; 115
    4d2e:	ff 4f       	sbci	r31, 0xFF	; 255
    4d30:	91 83       	std	Z+1, r25	; 0x01
    4d32:	80 83       	st	Z, r24
			_delay_ms(2);
			if (Saved_Pass == Comp_Pass)
    4d34:	fe 01       	movw	r30, r28
    4d36:	e0 51       	subi	r30, 0x10	; 16
    4d38:	fe 4f       	sbci	r31, 0xFE	; 254
    4d3a:	de 01       	movw	r26, r28
    4d3c:	a0 52       	subi	r26, 0x20	; 32
    4d3e:	be 4f       	sbci	r27, 0xFE	; 254
    4d40:	20 81       	ld	r18, Z
    4d42:	31 81       	ldd	r19, Z+1	; 0x01
    4d44:	42 81       	ldd	r20, Z+2	; 0x02
    4d46:	53 81       	ldd	r21, Z+3	; 0x03
    4d48:	8d 91       	ld	r24, X+
    4d4a:	9d 91       	ld	r25, X+
    4d4c:	0d 90       	ld	r0, X+
    4d4e:	bc 91       	ld	r27, X
    4d50:	a0 2d       	mov	r26, r0
    4d52:	28 17       	cp	r18, r24
    4d54:	39 07       	cpc	r19, r25
    4d56:	4a 07       	cpc	r20, r26
    4d58:	5b 07       	cpc	r21, r27
    4d5a:	09 f0       	breq	.+2      	; 0x4d5e <main+0x268e>
    4d5c:	40 c5       	rjmp	.+2688   	; 0x57de <main+0x310e>
			{
				Comp_Pass = 0;
    4d5e:	fe 01       	movw	r30, r28
    4d60:	e0 52       	subi	r30, 0x20	; 32
    4d62:	fe 4f       	sbci	r31, 0xFE	; 254
    4d64:	10 82       	st	Z, r1
    4d66:	11 82       	std	Z+1, r1	; 0x01
    4d68:	12 82       	std	Z+2, r1	; 0x02
    4d6a:	13 82       	std	Z+3, r1	; 0x03
				Saved_Pass = 0;
    4d6c:	fe 01       	movw	r30, r28
    4d6e:	e0 51       	subi	r30, 0x10	; 16
    4d70:	fe 4f       	sbci	r31, 0xFE	; 254
    4d72:	10 82       	st	Z, r1
    4d74:	11 82       	std	Z+1, r1	; 0x01
    4d76:	12 82       	std	Z+2, r1	; 0x02
    4d78:	13 82       	std	Z+3, r1	; 0x03
				Reversed_Pass = 0;
    4d7a:	fe 01       	movw	r30, r28
    4d7c:	e4 51       	subi	r30, 0x14	; 20
    4d7e:	fe 4f       	sbci	r31, 0xFE	; 254
    4d80:	10 82       	st	Z, r1
    4d82:	11 82       	std	Z+1, r1	; 0x01
    4d84:	12 82       	std	Z+2, r1	; 0x02
    4d86:	13 82       	std	Z+3, r1	; 0x03
				Get_Reversed_Pass = 0;
    4d88:	fe 01       	movw	r30, r28
    4d8a:	e8 51       	subi	r30, 0x18	; 24
    4d8c:	fe 4f       	sbci	r31, 0xFE	; 254
    4d8e:	10 82       	st	Z, r1
    4d90:	11 82       	std	Z+1, r1	; 0x01
    4d92:	12 82       	std	Z+2, r1	; 0x02
    4d94:	13 82       	std	Z+3, r1	; 0x03
				LCD_VoidSendString("New Pass : ");
    4d96:	88 ee       	ldi	r24, 0xE8	; 232
    4d98:	90 e0       	ldi	r25, 0x00	; 0
    4d9a:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <LCD_VoidSendString>
				LCD_VoidSendStringFromPos("Just Numbers",1,0);
    4d9e:	84 ef       	ldi	r24, 0xF4	; 244
    4da0:	90 e0       	ldi	r25, 0x00	; 0
    4da2:	61 e0       	ldi	r22, 0x01	; 1
    4da4:	40 e0       	ldi	r20, 0x00	; 0
    4da6:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <LCD_VoidSendStringFromPos>
				for (u8 i = 0; i<4 ;i++)
    4daa:	fe 01       	movw	r30, r28
    4dac:	e3 52       	subi	r30, 0x23	; 35
    4dae:	fe 4f       	sbci	r31, 0xFE	; 254
    4db0:	10 82       	st	Z, r1
    4db2:	d8 c1       	rjmp	.+944    	; 0x5164 <main+0x2a94>
				{
					LCD_VoidSendCommand(LCD_CursorON);
    4db4:	8e e0       	ldi	r24, 0x0E	; 14
    4db6:	0e 94 92 0b 	call	0x1724	; 0x1724 <LCD_VoidSendCommand>
    4dba:	fe 01       	movw	r30, r28
    4dbc:	e7 57       	subi	r30, 0x77	; 119
    4dbe:	ff 4f       	sbci	r31, 0xFF	; 255
    4dc0:	80 e0       	ldi	r24, 0x00	; 0
    4dc2:	90 e0       	ldi	r25, 0x00	; 0
    4dc4:	a8 e4       	ldi	r26, 0x48	; 72
    4dc6:	b3 e4       	ldi	r27, 0x43	; 67
    4dc8:	80 83       	st	Z, r24
    4dca:	91 83       	std	Z+1, r25	; 0x01
    4dcc:	a2 83       	std	Z+2, r26	; 0x02
    4dce:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4dd0:	8e 01       	movw	r16, r28
    4dd2:	0b 57       	subi	r16, 0x7B	; 123
    4dd4:	1f 4f       	sbci	r17, 0xFF	; 255
    4dd6:	fe 01       	movw	r30, r28
    4dd8:	e7 57       	subi	r30, 0x77	; 119
    4dda:	ff 4f       	sbci	r31, 0xFF	; 255
    4ddc:	60 81       	ld	r22, Z
    4dde:	71 81       	ldd	r23, Z+1	; 0x01
    4de0:	82 81       	ldd	r24, Z+2	; 0x02
    4de2:	93 81       	ldd	r25, Z+3	; 0x03
    4de4:	20 e0       	ldi	r18, 0x00	; 0
    4de6:	30 e0       	ldi	r19, 0x00	; 0
    4de8:	4a ef       	ldi	r20, 0xFA	; 250
    4dea:	54 e4       	ldi	r21, 0x44	; 68
    4dec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4df0:	dc 01       	movw	r26, r24
    4df2:	cb 01       	movw	r24, r22
    4df4:	f8 01       	movw	r30, r16
    4df6:	80 83       	st	Z, r24
    4df8:	91 83       	std	Z+1, r25	; 0x01
    4dfa:	a2 83       	std	Z+2, r26	; 0x02
    4dfc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4dfe:	fe 01       	movw	r30, r28
    4e00:	eb 57       	subi	r30, 0x7B	; 123
    4e02:	ff 4f       	sbci	r31, 0xFF	; 255
    4e04:	60 81       	ld	r22, Z
    4e06:	71 81       	ldd	r23, Z+1	; 0x01
    4e08:	82 81       	ldd	r24, Z+2	; 0x02
    4e0a:	93 81       	ldd	r25, Z+3	; 0x03
    4e0c:	20 e0       	ldi	r18, 0x00	; 0
    4e0e:	30 e0       	ldi	r19, 0x00	; 0
    4e10:	40 e8       	ldi	r20, 0x80	; 128
    4e12:	5f e3       	ldi	r21, 0x3F	; 63
    4e14:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4e18:	88 23       	and	r24, r24
    4e1a:	44 f4       	brge	.+16     	; 0x4e2c <main+0x275c>
		__ticks = 1;
    4e1c:	fe 01       	movw	r30, r28
    4e1e:	ed 57       	subi	r30, 0x7D	; 125
    4e20:	ff 4f       	sbci	r31, 0xFF	; 255
    4e22:	81 e0       	ldi	r24, 0x01	; 1
    4e24:	90 e0       	ldi	r25, 0x00	; 0
    4e26:	91 83       	std	Z+1, r25	; 0x01
    4e28:	80 83       	st	Z, r24
    4e2a:	64 c0       	rjmp	.+200    	; 0x4ef4 <main+0x2824>
	else if (__tmp > 65535)
    4e2c:	fe 01       	movw	r30, r28
    4e2e:	eb 57       	subi	r30, 0x7B	; 123
    4e30:	ff 4f       	sbci	r31, 0xFF	; 255
    4e32:	60 81       	ld	r22, Z
    4e34:	71 81       	ldd	r23, Z+1	; 0x01
    4e36:	82 81       	ldd	r24, Z+2	; 0x02
    4e38:	93 81       	ldd	r25, Z+3	; 0x03
    4e3a:	20 e0       	ldi	r18, 0x00	; 0
    4e3c:	3f ef       	ldi	r19, 0xFF	; 255
    4e3e:	4f e7       	ldi	r20, 0x7F	; 127
    4e40:	57 e4       	ldi	r21, 0x47	; 71
    4e42:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4e46:	18 16       	cp	r1, r24
    4e48:	0c f0       	brlt	.+2      	; 0x4e4c <main+0x277c>
    4e4a:	43 c0       	rjmp	.+134    	; 0x4ed2 <main+0x2802>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4e4c:	fe 01       	movw	r30, r28
    4e4e:	e7 57       	subi	r30, 0x77	; 119
    4e50:	ff 4f       	sbci	r31, 0xFF	; 255
    4e52:	60 81       	ld	r22, Z
    4e54:	71 81       	ldd	r23, Z+1	; 0x01
    4e56:	82 81       	ldd	r24, Z+2	; 0x02
    4e58:	93 81       	ldd	r25, Z+3	; 0x03
    4e5a:	20 e0       	ldi	r18, 0x00	; 0
    4e5c:	30 e0       	ldi	r19, 0x00	; 0
    4e5e:	40 e2       	ldi	r20, 0x20	; 32
    4e60:	51 e4       	ldi	r21, 0x41	; 65
    4e62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e66:	dc 01       	movw	r26, r24
    4e68:	cb 01       	movw	r24, r22
    4e6a:	8e 01       	movw	r16, r28
    4e6c:	0d 57       	subi	r16, 0x7D	; 125
    4e6e:	1f 4f       	sbci	r17, 0xFF	; 255
    4e70:	bc 01       	movw	r22, r24
    4e72:	cd 01       	movw	r24, r26
    4e74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e78:	dc 01       	movw	r26, r24
    4e7a:	cb 01       	movw	r24, r22
    4e7c:	f8 01       	movw	r30, r16
    4e7e:	91 83       	std	Z+1, r25	; 0x01
    4e80:	80 83       	st	Z, r24
    4e82:	1f c0       	rjmp	.+62     	; 0x4ec2 <main+0x27f2>
    4e84:	fe 01       	movw	r30, r28
    4e86:	ef 57       	subi	r30, 0x7F	; 127
    4e88:	ff 4f       	sbci	r31, 0xFF	; 255
    4e8a:	88 ec       	ldi	r24, 0xC8	; 200
    4e8c:	90 e0       	ldi	r25, 0x00	; 0
    4e8e:	91 83       	std	Z+1, r25	; 0x01
    4e90:	80 83       	st	Z, r24
    4e92:	fe 01       	movw	r30, r28
    4e94:	ef 57       	subi	r30, 0x7F	; 127
    4e96:	ff 4f       	sbci	r31, 0xFF	; 255
    4e98:	80 81       	ld	r24, Z
    4e9a:	91 81       	ldd	r25, Z+1	; 0x01
    4e9c:	01 97       	sbiw	r24, 0x01	; 1
    4e9e:	f1 f7       	brne	.-4      	; 0x4e9c <main+0x27cc>
    4ea0:	fe 01       	movw	r30, r28
    4ea2:	ef 57       	subi	r30, 0x7F	; 127
    4ea4:	ff 4f       	sbci	r31, 0xFF	; 255
    4ea6:	91 83       	std	Z+1, r25	; 0x01
    4ea8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4eaa:	de 01       	movw	r26, r28
    4eac:	ad 57       	subi	r26, 0x7D	; 125
    4eae:	bf 4f       	sbci	r27, 0xFF	; 255
    4eb0:	fe 01       	movw	r30, r28
    4eb2:	ed 57       	subi	r30, 0x7D	; 125
    4eb4:	ff 4f       	sbci	r31, 0xFF	; 255
    4eb6:	80 81       	ld	r24, Z
    4eb8:	91 81       	ldd	r25, Z+1	; 0x01
    4eba:	01 97       	sbiw	r24, 0x01	; 1
    4ebc:	11 96       	adiw	r26, 0x01	; 1
    4ebe:	9c 93       	st	X, r25
    4ec0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ec2:	fe 01       	movw	r30, r28
    4ec4:	ed 57       	subi	r30, 0x7D	; 125
    4ec6:	ff 4f       	sbci	r31, 0xFF	; 255
    4ec8:	80 81       	ld	r24, Z
    4eca:	91 81       	ldd	r25, Z+1	; 0x01
    4ecc:	00 97       	sbiw	r24, 0x00	; 0
    4ece:	d1 f6       	brne	.-76     	; 0x4e84 <main+0x27b4>
    4ed0:	27 c0       	rjmp	.+78     	; 0x4f20 <main+0x2850>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ed2:	8e 01       	movw	r16, r28
    4ed4:	0d 57       	subi	r16, 0x7D	; 125
    4ed6:	1f 4f       	sbci	r17, 0xFF	; 255
    4ed8:	fe 01       	movw	r30, r28
    4eda:	eb 57       	subi	r30, 0x7B	; 123
    4edc:	ff 4f       	sbci	r31, 0xFF	; 255
    4ede:	60 81       	ld	r22, Z
    4ee0:	71 81       	ldd	r23, Z+1	; 0x01
    4ee2:	82 81       	ldd	r24, Z+2	; 0x02
    4ee4:	93 81       	ldd	r25, Z+3	; 0x03
    4ee6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4eea:	dc 01       	movw	r26, r24
    4eec:	cb 01       	movw	r24, r22
    4eee:	f8 01       	movw	r30, r16
    4ef0:	91 83       	std	Z+1, r25	; 0x01
    4ef2:	80 83       	st	Z, r24
    4ef4:	de 01       	movw	r26, r28
    4ef6:	a1 58       	subi	r26, 0x81	; 129
    4ef8:	bf 4f       	sbci	r27, 0xFF	; 255
    4efa:	fe 01       	movw	r30, r28
    4efc:	ed 57       	subi	r30, 0x7D	; 125
    4efe:	ff 4f       	sbci	r31, 0xFF	; 255
    4f00:	80 81       	ld	r24, Z
    4f02:	91 81       	ldd	r25, Z+1	; 0x01
    4f04:	8d 93       	st	X+, r24
    4f06:	9c 93       	st	X, r25
    4f08:	fe 01       	movw	r30, r28
    4f0a:	e1 58       	subi	r30, 0x81	; 129
    4f0c:	ff 4f       	sbci	r31, 0xFF	; 255
    4f0e:	80 81       	ld	r24, Z
    4f10:	91 81       	ldd	r25, Z+1	; 0x01
    4f12:	01 97       	sbiw	r24, 0x01	; 1
    4f14:	f1 f7       	brne	.-4      	; 0x4f12 <main+0x2842>
    4f16:	fe 01       	movw	r30, r28
    4f18:	e1 58       	subi	r30, 0x81	; 129
    4f1a:	ff 4f       	sbci	r31, 0xFF	; 255
    4f1c:	91 83       	std	Z+1, r25	; 0x01
    4f1e:	80 83       	st	Z, r24
					_delay_ms(200);
					LCD_VoidSendCommand(LCD_CURSOROFF);
    4f20:	8c e0       	ldi	r24, 0x0C	; 12
    4f22:	0e 94 92 0b 	call	0x1724	; 0x1724 <LCD_VoidSendCommand>

					Key_Value = Keypad_GetPressedKey();
    4f26:	0e 94 67 12 	call	0x24ce	; 0x24ce <Keypad_GetPressedKey>
    4f2a:	fe 01       	movw	r30, r28
    4f2c:	eb 50       	subi	r30, 0x0B	; 11
    4f2e:	fe 4f       	sbci	r31, 0xFE	; 254
    4f30:	80 83       	st	Z, r24
					if ((Key_Value >= 0) && (Key_Value <= 9))
    4f32:	fe 01       	movw	r30, r28
    4f34:	eb 50       	subi	r30, 0x0B	; 11
    4f36:	fe 4f       	sbci	r31, 0xFE	; 254
    4f38:	80 81       	ld	r24, Z
    4f3a:	8a 30       	cpi	r24, 0x0A	; 10
    4f3c:	08 f0       	brcs	.+2      	; 0x4f40 <main+0x2870>
    4f3e:	d5 c0       	rjmp	.+426    	; 0x50ea <main+0x2a1a>
					{
						LCD_VoidStartFrom(0,11+i);
    4f40:	fe 01       	movw	r30, r28
    4f42:	e3 52       	subi	r30, 0x23	; 35
    4f44:	fe 4f       	sbci	r31, 0xFE	; 254
    4f46:	80 81       	ld	r24, Z
    4f48:	98 2f       	mov	r25, r24
    4f4a:	95 5f       	subi	r25, 0xF5	; 245
    4f4c:	80 e0       	ldi	r24, 0x00	; 0
    4f4e:	69 2f       	mov	r22, r25
    4f50:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <LCD_VoidStartFrom>
						LCD_VoidSendNumber(Key_Value);
    4f54:	fe 01       	movw	r30, r28
    4f56:	eb 50       	subi	r30, 0x0B	; 11
    4f58:	fe 4f       	sbci	r31, 0xFE	; 254
    4f5a:	80 81       	ld	r24, Z
    4f5c:	88 2f       	mov	r24, r24
    4f5e:	90 e0       	ldi	r25, 0x00	; 0
    4f60:	a0 e0       	ldi	r26, 0x00	; 0
    4f62:	b0 e0       	ldi	r27, 0x00	; 0
    4f64:	bc 01       	movw	r22, r24
    4f66:	cd 01       	movw	r24, r26
    4f68:	0e 94 77 0e 	call	0x1cee	; 0x1cee <LCD_VoidSendNumber>
    4f6c:	fe 01       	movw	r30, r28
    4f6e:	e5 58       	subi	r30, 0x85	; 133
    4f70:	ff 4f       	sbci	r31, 0xFF	; 255
    4f72:	80 e0       	ldi	r24, 0x00	; 0
    4f74:	90 e0       	ldi	r25, 0x00	; 0
    4f76:	a8 e4       	ldi	r26, 0x48	; 72
    4f78:	b3 e4       	ldi	r27, 0x43	; 67
    4f7a:	80 83       	st	Z, r24
    4f7c:	91 83       	std	Z+1, r25	; 0x01
    4f7e:	a2 83       	std	Z+2, r26	; 0x02
    4f80:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4f82:	8e 01       	movw	r16, r28
    4f84:	09 58       	subi	r16, 0x89	; 137
    4f86:	1f 4f       	sbci	r17, 0xFF	; 255
    4f88:	fe 01       	movw	r30, r28
    4f8a:	e5 58       	subi	r30, 0x85	; 133
    4f8c:	ff 4f       	sbci	r31, 0xFF	; 255
    4f8e:	60 81       	ld	r22, Z
    4f90:	71 81       	ldd	r23, Z+1	; 0x01
    4f92:	82 81       	ldd	r24, Z+2	; 0x02
    4f94:	93 81       	ldd	r25, Z+3	; 0x03
    4f96:	20 e0       	ldi	r18, 0x00	; 0
    4f98:	30 e0       	ldi	r19, 0x00	; 0
    4f9a:	4a ef       	ldi	r20, 0xFA	; 250
    4f9c:	54 e4       	ldi	r21, 0x44	; 68
    4f9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4fa2:	dc 01       	movw	r26, r24
    4fa4:	cb 01       	movw	r24, r22
    4fa6:	f8 01       	movw	r30, r16
    4fa8:	80 83       	st	Z, r24
    4faa:	91 83       	std	Z+1, r25	; 0x01
    4fac:	a2 83       	std	Z+2, r26	; 0x02
    4fae:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4fb0:	fe 01       	movw	r30, r28
    4fb2:	e9 58       	subi	r30, 0x89	; 137
    4fb4:	ff 4f       	sbci	r31, 0xFF	; 255
    4fb6:	60 81       	ld	r22, Z
    4fb8:	71 81       	ldd	r23, Z+1	; 0x01
    4fba:	82 81       	ldd	r24, Z+2	; 0x02
    4fbc:	93 81       	ldd	r25, Z+3	; 0x03
    4fbe:	20 e0       	ldi	r18, 0x00	; 0
    4fc0:	30 e0       	ldi	r19, 0x00	; 0
    4fc2:	40 e8       	ldi	r20, 0x80	; 128
    4fc4:	5f e3       	ldi	r21, 0x3F	; 63
    4fc6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4fca:	88 23       	and	r24, r24
    4fcc:	44 f4       	brge	.+16     	; 0x4fde <main+0x290e>
		__ticks = 1;
    4fce:	fe 01       	movw	r30, r28
    4fd0:	eb 58       	subi	r30, 0x8B	; 139
    4fd2:	ff 4f       	sbci	r31, 0xFF	; 255
    4fd4:	81 e0       	ldi	r24, 0x01	; 1
    4fd6:	90 e0       	ldi	r25, 0x00	; 0
    4fd8:	91 83       	std	Z+1, r25	; 0x01
    4fda:	80 83       	st	Z, r24
    4fdc:	64 c0       	rjmp	.+200    	; 0x50a6 <main+0x29d6>
	else if (__tmp > 65535)
    4fde:	fe 01       	movw	r30, r28
    4fe0:	e9 58       	subi	r30, 0x89	; 137
    4fe2:	ff 4f       	sbci	r31, 0xFF	; 255
    4fe4:	60 81       	ld	r22, Z
    4fe6:	71 81       	ldd	r23, Z+1	; 0x01
    4fe8:	82 81       	ldd	r24, Z+2	; 0x02
    4fea:	93 81       	ldd	r25, Z+3	; 0x03
    4fec:	20 e0       	ldi	r18, 0x00	; 0
    4fee:	3f ef       	ldi	r19, 0xFF	; 255
    4ff0:	4f e7       	ldi	r20, 0x7F	; 127
    4ff2:	57 e4       	ldi	r21, 0x47	; 71
    4ff4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4ff8:	18 16       	cp	r1, r24
    4ffa:	0c f0       	brlt	.+2      	; 0x4ffe <main+0x292e>
    4ffc:	43 c0       	rjmp	.+134    	; 0x5084 <main+0x29b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4ffe:	fe 01       	movw	r30, r28
    5000:	e5 58       	subi	r30, 0x85	; 133
    5002:	ff 4f       	sbci	r31, 0xFF	; 255
    5004:	60 81       	ld	r22, Z
    5006:	71 81       	ldd	r23, Z+1	; 0x01
    5008:	82 81       	ldd	r24, Z+2	; 0x02
    500a:	93 81       	ldd	r25, Z+3	; 0x03
    500c:	20 e0       	ldi	r18, 0x00	; 0
    500e:	30 e0       	ldi	r19, 0x00	; 0
    5010:	40 e2       	ldi	r20, 0x20	; 32
    5012:	51 e4       	ldi	r21, 0x41	; 65
    5014:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5018:	dc 01       	movw	r26, r24
    501a:	cb 01       	movw	r24, r22
    501c:	8e 01       	movw	r16, r28
    501e:	0b 58       	subi	r16, 0x8B	; 139
    5020:	1f 4f       	sbci	r17, 0xFF	; 255
    5022:	bc 01       	movw	r22, r24
    5024:	cd 01       	movw	r24, r26
    5026:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    502a:	dc 01       	movw	r26, r24
    502c:	cb 01       	movw	r24, r22
    502e:	f8 01       	movw	r30, r16
    5030:	91 83       	std	Z+1, r25	; 0x01
    5032:	80 83       	st	Z, r24
    5034:	1f c0       	rjmp	.+62     	; 0x5074 <main+0x29a4>
    5036:	fe 01       	movw	r30, r28
    5038:	ed 58       	subi	r30, 0x8D	; 141
    503a:	ff 4f       	sbci	r31, 0xFF	; 255
    503c:	88 ec       	ldi	r24, 0xC8	; 200
    503e:	90 e0       	ldi	r25, 0x00	; 0
    5040:	91 83       	std	Z+1, r25	; 0x01
    5042:	80 83       	st	Z, r24
    5044:	fe 01       	movw	r30, r28
    5046:	ed 58       	subi	r30, 0x8D	; 141
    5048:	ff 4f       	sbci	r31, 0xFF	; 255
    504a:	80 81       	ld	r24, Z
    504c:	91 81       	ldd	r25, Z+1	; 0x01
    504e:	01 97       	sbiw	r24, 0x01	; 1
    5050:	f1 f7       	brne	.-4      	; 0x504e <main+0x297e>
    5052:	fe 01       	movw	r30, r28
    5054:	ed 58       	subi	r30, 0x8D	; 141
    5056:	ff 4f       	sbci	r31, 0xFF	; 255
    5058:	91 83       	std	Z+1, r25	; 0x01
    505a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    505c:	de 01       	movw	r26, r28
    505e:	ab 58       	subi	r26, 0x8B	; 139
    5060:	bf 4f       	sbci	r27, 0xFF	; 255
    5062:	fe 01       	movw	r30, r28
    5064:	eb 58       	subi	r30, 0x8B	; 139
    5066:	ff 4f       	sbci	r31, 0xFF	; 255
    5068:	80 81       	ld	r24, Z
    506a:	91 81       	ldd	r25, Z+1	; 0x01
    506c:	01 97       	sbiw	r24, 0x01	; 1
    506e:	11 96       	adiw	r26, 0x01	; 1
    5070:	9c 93       	st	X, r25
    5072:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5074:	fe 01       	movw	r30, r28
    5076:	eb 58       	subi	r30, 0x8B	; 139
    5078:	ff 4f       	sbci	r31, 0xFF	; 255
    507a:	80 81       	ld	r24, Z
    507c:	91 81       	ldd	r25, Z+1	; 0x01
    507e:	00 97       	sbiw	r24, 0x00	; 0
    5080:	d1 f6       	brne	.-76     	; 0x5036 <main+0x2966>
    5082:	27 c0       	rjmp	.+78     	; 0x50d2 <main+0x2a02>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5084:	8e 01       	movw	r16, r28
    5086:	0b 58       	subi	r16, 0x8B	; 139
    5088:	1f 4f       	sbci	r17, 0xFF	; 255
    508a:	fe 01       	movw	r30, r28
    508c:	e9 58       	subi	r30, 0x89	; 137
    508e:	ff 4f       	sbci	r31, 0xFF	; 255
    5090:	60 81       	ld	r22, Z
    5092:	71 81       	ldd	r23, Z+1	; 0x01
    5094:	82 81       	ldd	r24, Z+2	; 0x02
    5096:	93 81       	ldd	r25, Z+3	; 0x03
    5098:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    509c:	dc 01       	movw	r26, r24
    509e:	cb 01       	movw	r24, r22
    50a0:	f8 01       	movw	r30, r16
    50a2:	91 83       	std	Z+1, r25	; 0x01
    50a4:	80 83       	st	Z, r24
    50a6:	de 01       	movw	r26, r28
    50a8:	af 58       	subi	r26, 0x8F	; 143
    50aa:	bf 4f       	sbci	r27, 0xFF	; 255
    50ac:	fe 01       	movw	r30, r28
    50ae:	eb 58       	subi	r30, 0x8B	; 139
    50b0:	ff 4f       	sbci	r31, 0xFF	; 255
    50b2:	80 81       	ld	r24, Z
    50b4:	91 81       	ldd	r25, Z+1	; 0x01
    50b6:	8d 93       	st	X+, r24
    50b8:	9c 93       	st	X, r25
    50ba:	fe 01       	movw	r30, r28
    50bc:	ef 58       	subi	r30, 0x8F	; 143
    50be:	ff 4f       	sbci	r31, 0xFF	; 255
    50c0:	80 81       	ld	r24, Z
    50c2:	91 81       	ldd	r25, Z+1	; 0x01
    50c4:	01 97       	sbiw	r24, 0x01	; 1
    50c6:	f1 f7       	brne	.-4      	; 0x50c4 <main+0x29f4>
    50c8:	fe 01       	movw	r30, r28
    50ca:	ef 58       	subi	r30, 0x8F	; 143
    50cc:	ff 4f       	sbci	r31, 0xFF	; 255
    50ce:	91 83       	std	Z+1, r25	; 0x01
    50d0:	80 83       	st	Z, r24
						/*Integer_TO_String (key);*/
						_delay_ms(200);
						LCD_VoidSendStringFromPos("*",0,11+i);
    50d2:	fe 01       	movw	r30, r28
    50d4:	e3 52       	subi	r30, 0x23	; 35
    50d6:	fe 4f       	sbci	r31, 0xFE	; 254
    50d8:	80 81       	ld	r24, Z
    50da:	28 2f       	mov	r18, r24
    50dc:	25 5f       	subi	r18, 0xF5	; 245
    50de:	84 ea       	ldi	r24, 0xA4	; 164
    50e0:	90 e0       	ldi	r25, 0x00	; 0
    50e2:	60 e0       	ldi	r22, 0x00	; 0
    50e4:	42 2f       	mov	r20, r18
    50e6:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <LCD_VoidSendStringFromPos>
					}

					Saved_Pass += Key_Value;
    50ea:	fe 01       	movw	r30, r28
    50ec:	eb 50       	subi	r30, 0x0B	; 11
    50ee:	fe 4f       	sbci	r31, 0xFE	; 254
    50f0:	80 81       	ld	r24, Z
    50f2:	28 2f       	mov	r18, r24
    50f4:	30 e0       	ldi	r19, 0x00	; 0
    50f6:	40 e0       	ldi	r20, 0x00	; 0
    50f8:	50 e0       	ldi	r21, 0x00	; 0
    50fa:	be 01       	movw	r22, r28
    50fc:	60 51       	subi	r22, 0x10	; 16
    50fe:	7e 4f       	sbci	r23, 0xFE	; 254
    5100:	fe 01       	movw	r30, r28
    5102:	e0 51       	subi	r30, 0x10	; 16
    5104:	fe 4f       	sbci	r31, 0xFE	; 254
    5106:	80 81       	ld	r24, Z
    5108:	91 81       	ldd	r25, Z+1	; 0x01
    510a:	a2 81       	ldd	r26, Z+2	; 0x02
    510c:	b3 81       	ldd	r27, Z+3	; 0x03
    510e:	82 0f       	add	r24, r18
    5110:	93 1f       	adc	r25, r19
    5112:	a4 1f       	adc	r26, r20
    5114:	b5 1f       	adc	r27, r21
    5116:	fb 01       	movw	r30, r22
    5118:	80 83       	st	Z, r24
    511a:	91 83       	std	Z+1, r25	; 0x01
    511c:	a2 83       	std	Z+2, r26	; 0x02
    511e:	b3 83       	std	Z+3, r27	; 0x03
					Saved_Pass = Saved_Pass * 10;
    5120:	8e 01       	movw	r16, r28
    5122:	00 51       	subi	r16, 0x10	; 16
    5124:	1e 4f       	sbci	r17, 0xFE	; 254
    5126:	fe 01       	movw	r30, r28
    5128:	e0 51       	subi	r30, 0x10	; 16
    512a:	fe 4f       	sbci	r31, 0xFE	; 254
    512c:	80 81       	ld	r24, Z
    512e:	91 81       	ldd	r25, Z+1	; 0x01
    5130:	a2 81       	ldd	r26, Z+2	; 0x02
    5132:	b3 81       	ldd	r27, Z+3	; 0x03
    5134:	2a e0       	ldi	r18, 0x0A	; 10
    5136:	30 e0       	ldi	r19, 0x00	; 0
    5138:	40 e0       	ldi	r20, 0x00	; 0
    513a:	50 e0       	ldi	r21, 0x00	; 0
    513c:	bc 01       	movw	r22, r24
    513e:	cd 01       	movw	r24, r26
    5140:	0e 94 d5 2d 	call	0x5baa	; 0x5baa <__mulsi3>
    5144:	dc 01       	movw	r26, r24
    5146:	cb 01       	movw	r24, r22
    5148:	f8 01       	movw	r30, r16
    514a:	80 83       	st	Z, r24
    514c:	91 83       	std	Z+1, r25	; 0x01
    514e:	a2 83       	std	Z+2, r26	; 0x02
    5150:	b3 83       	std	Z+3, r27	; 0x03
				Saved_Pass = 0;
				Reversed_Pass = 0;
				Get_Reversed_Pass = 0;
				LCD_VoidSendString("New Pass : ");
				LCD_VoidSendStringFromPos("Just Numbers",1,0);
				for (u8 i = 0; i<4 ;i++)
    5152:	de 01       	movw	r26, r28
    5154:	a3 52       	subi	r26, 0x23	; 35
    5156:	be 4f       	sbci	r27, 0xFE	; 254
    5158:	fe 01       	movw	r30, r28
    515a:	e3 52       	subi	r30, 0x23	; 35
    515c:	fe 4f       	sbci	r31, 0xFE	; 254
    515e:	80 81       	ld	r24, Z
    5160:	8f 5f       	subi	r24, 0xFF	; 255
    5162:	8c 93       	st	X, r24
    5164:	fe 01       	movw	r30, r28
    5166:	e3 52       	subi	r30, 0x23	; 35
    5168:	fe 4f       	sbci	r31, 0xFE	; 254
    516a:	80 81       	ld	r24, Z
    516c:	84 30       	cpi	r24, 0x04	; 4
    516e:	08 f4       	brcc	.+2      	; 0x5172 <main+0x2aa2>
    5170:	21 ce       	rjmp	.-958    	; 0x4db4 <main+0x26e4>
					}

					Saved_Pass += Key_Value;
					Saved_Pass = Saved_Pass * 10;
				}
				Saved_Pass = Saved_Pass / 10;
    5172:	8e 01       	movw	r16, r28
    5174:	00 51       	subi	r16, 0x10	; 16
    5176:	1e 4f       	sbci	r17, 0xFE	; 254
    5178:	fe 01       	movw	r30, r28
    517a:	e0 51       	subi	r30, 0x10	; 16
    517c:	fe 4f       	sbci	r31, 0xFE	; 254
    517e:	80 81       	ld	r24, Z
    5180:	91 81       	ldd	r25, Z+1	; 0x01
    5182:	a2 81       	ldd	r26, Z+2	; 0x02
    5184:	b3 81       	ldd	r27, Z+3	; 0x03
    5186:	2a e0       	ldi	r18, 0x0A	; 10
    5188:	30 e0       	ldi	r19, 0x00	; 0
    518a:	40 e0       	ldi	r20, 0x00	; 0
    518c:	50 e0       	ldi	r21, 0x00	; 0
    518e:	bc 01       	movw	r22, r24
    5190:	cd 01       	movw	r24, r26
    5192:	0e 94 f4 2d 	call	0x5be8	; 0x5be8 <__udivmodsi4>
    5196:	da 01       	movw	r26, r20
    5198:	c9 01       	movw	r24, r18
    519a:	f8 01       	movw	r30, r16
    519c:	80 83       	st	Z, r24
    519e:	91 83       	std	Z+1, r25	; 0x01
    51a0:	a2 83       	std	Z+2, r26	; 0x02
    51a2:	b3 83       	std	Z+3, r27	; 0x03
				Temp_Pass = Saved_Pass;
    51a4:	9e 01       	movw	r18, r28
    51a6:	2c 51       	subi	r18, 0x1C	; 28
    51a8:	3e 4f       	sbci	r19, 0xFE	; 254
    51aa:	fe 01       	movw	r30, r28
    51ac:	e0 51       	subi	r30, 0x10	; 16
    51ae:	fe 4f       	sbci	r31, 0xFE	; 254
    51b0:	80 81       	ld	r24, Z
    51b2:	91 81       	ldd	r25, Z+1	; 0x01
    51b4:	a2 81       	ldd	r26, Z+2	; 0x02
    51b6:	b3 81       	ldd	r27, Z+3	; 0x03
    51b8:	f9 01       	movw	r30, r18
    51ba:	80 83       	st	Z, r24
    51bc:	91 83       	std	Z+1, r25	; 0x01
    51be:	a2 83       	std	Z+2, r26	; 0x02
    51c0:	b3 83       	std	Z+3, r27	; 0x03
    51c2:	56 c0       	rjmp	.+172    	; 0x5270 <main+0x2ba0>
				while (Temp_Pass > 0)
				{
					Get_Reversed_Pass = Temp_Pass % 10;
    51c4:	8e 01       	movw	r16, r28
    51c6:	08 51       	subi	r16, 0x18	; 24
    51c8:	1e 4f       	sbci	r17, 0xFE	; 254
    51ca:	fe 01       	movw	r30, r28
    51cc:	ec 51       	subi	r30, 0x1C	; 28
    51ce:	fe 4f       	sbci	r31, 0xFE	; 254
    51d0:	80 81       	ld	r24, Z
    51d2:	91 81       	ldd	r25, Z+1	; 0x01
    51d4:	a2 81       	ldd	r26, Z+2	; 0x02
    51d6:	b3 81       	ldd	r27, Z+3	; 0x03
    51d8:	2a e0       	ldi	r18, 0x0A	; 10
    51da:	30 e0       	ldi	r19, 0x00	; 0
    51dc:	40 e0       	ldi	r20, 0x00	; 0
    51de:	50 e0       	ldi	r21, 0x00	; 0
    51e0:	bc 01       	movw	r22, r24
    51e2:	cd 01       	movw	r24, r26
    51e4:	0e 94 f4 2d 	call	0x5be8	; 0x5be8 <__udivmodsi4>
    51e8:	dc 01       	movw	r26, r24
    51ea:	cb 01       	movw	r24, r22
    51ec:	f8 01       	movw	r30, r16
    51ee:	80 83       	st	Z, r24
    51f0:	91 83       	std	Z+1, r25	; 0x01
    51f2:	a2 83       	std	Z+2, r26	; 0x02
    51f4:	b3 83       	std	Z+3, r27	; 0x03
					Reversed_Pass = (Reversed_Pass * 10) + Get_Reversed_Pass;
    51f6:	fe 01       	movw	r30, r28
    51f8:	e4 51       	subi	r30, 0x14	; 20
    51fa:	fe 4f       	sbci	r31, 0xFE	; 254
    51fc:	80 81       	ld	r24, Z
    51fe:	91 81       	ldd	r25, Z+1	; 0x01
    5200:	a2 81       	ldd	r26, Z+2	; 0x02
    5202:	b3 81       	ldd	r27, Z+3	; 0x03
    5204:	2a e0       	ldi	r18, 0x0A	; 10
    5206:	30 e0       	ldi	r19, 0x00	; 0
    5208:	40 e0       	ldi	r20, 0x00	; 0
    520a:	50 e0       	ldi	r21, 0x00	; 0
    520c:	bc 01       	movw	r22, r24
    520e:	cd 01       	movw	r24, r26
    5210:	0e 94 d5 2d 	call	0x5baa	; 0x5baa <__mulsi3>
    5214:	9b 01       	movw	r18, r22
    5216:	ac 01       	movw	r20, r24
    5218:	be 01       	movw	r22, r28
    521a:	64 51       	subi	r22, 0x14	; 20
    521c:	7e 4f       	sbci	r23, 0xFE	; 254
    521e:	fe 01       	movw	r30, r28
    5220:	e8 51       	subi	r30, 0x18	; 24
    5222:	fe 4f       	sbci	r31, 0xFE	; 254
    5224:	80 81       	ld	r24, Z
    5226:	91 81       	ldd	r25, Z+1	; 0x01
    5228:	a2 81       	ldd	r26, Z+2	; 0x02
    522a:	b3 81       	ldd	r27, Z+3	; 0x03
    522c:	82 0f       	add	r24, r18
    522e:	93 1f       	adc	r25, r19
    5230:	a4 1f       	adc	r26, r20
    5232:	b5 1f       	adc	r27, r21
    5234:	fb 01       	movw	r30, r22
    5236:	80 83       	st	Z, r24
    5238:	91 83       	std	Z+1, r25	; 0x01
    523a:	a2 83       	std	Z+2, r26	; 0x02
    523c:	b3 83       	std	Z+3, r27	; 0x03
					Temp_Pass = Temp_Pass / 10;
    523e:	8e 01       	movw	r16, r28
    5240:	0c 51       	subi	r16, 0x1C	; 28
    5242:	1e 4f       	sbci	r17, 0xFE	; 254
    5244:	fe 01       	movw	r30, r28
    5246:	ec 51       	subi	r30, 0x1C	; 28
    5248:	fe 4f       	sbci	r31, 0xFE	; 254
    524a:	80 81       	ld	r24, Z
    524c:	91 81       	ldd	r25, Z+1	; 0x01
    524e:	a2 81       	ldd	r26, Z+2	; 0x02
    5250:	b3 81       	ldd	r27, Z+3	; 0x03
    5252:	2a e0       	ldi	r18, 0x0A	; 10
    5254:	30 e0       	ldi	r19, 0x00	; 0
    5256:	40 e0       	ldi	r20, 0x00	; 0
    5258:	50 e0       	ldi	r21, 0x00	; 0
    525a:	bc 01       	movw	r22, r24
    525c:	cd 01       	movw	r24, r26
    525e:	0e 94 f4 2d 	call	0x5be8	; 0x5be8 <__udivmodsi4>
    5262:	da 01       	movw	r26, r20
    5264:	c9 01       	movw	r24, r18
    5266:	f8 01       	movw	r30, r16
    5268:	80 83       	st	Z, r24
    526a:	91 83       	std	Z+1, r25	; 0x01
    526c:	a2 83       	std	Z+2, r26	; 0x02
    526e:	b3 83       	std	Z+3, r27	; 0x03
					Saved_Pass += Key_Value;
					Saved_Pass = Saved_Pass * 10;
				}
				Saved_Pass = Saved_Pass / 10;
				Temp_Pass = Saved_Pass;
				while (Temp_Pass > 0)
    5270:	fe 01       	movw	r30, r28
    5272:	ec 51       	subi	r30, 0x1C	; 28
    5274:	fe 4f       	sbci	r31, 0xFE	; 254
    5276:	80 81       	ld	r24, Z
    5278:	91 81       	ldd	r25, Z+1	; 0x01
    527a:	a2 81       	ldd	r26, Z+2	; 0x02
    527c:	b3 81       	ldd	r27, Z+3	; 0x03
    527e:	00 97       	sbiw	r24, 0x00	; 0
    5280:	a1 05       	cpc	r26, r1
    5282:	b1 05       	cpc	r27, r1
    5284:	09 f0       	breq	.+2      	; 0x5288 <main+0x2bb8>
    5286:	9e cf       	rjmp	.-196    	; 0x51c4 <main+0x2af4>
    5288:	fe 01       	movw	r30, r28
    528a:	e3 59       	subi	r30, 0x93	; 147
    528c:	ff 4f       	sbci	r31, 0xFF	; 255
    528e:	80 e0       	ldi	r24, 0x00	; 0
    5290:	90 e0       	ldi	r25, 0x00	; 0
    5292:	aa ef       	ldi	r26, 0xFA	; 250
    5294:	b3 e4       	ldi	r27, 0x43	; 67
    5296:	80 83       	st	Z, r24
    5298:	91 83       	std	Z+1, r25	; 0x01
    529a:	a2 83       	std	Z+2, r26	; 0x02
    529c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    529e:	8e 01       	movw	r16, r28
    52a0:	07 59       	subi	r16, 0x97	; 151
    52a2:	1f 4f       	sbci	r17, 0xFF	; 255
    52a4:	fe 01       	movw	r30, r28
    52a6:	e3 59       	subi	r30, 0x93	; 147
    52a8:	ff 4f       	sbci	r31, 0xFF	; 255
    52aa:	60 81       	ld	r22, Z
    52ac:	71 81       	ldd	r23, Z+1	; 0x01
    52ae:	82 81       	ldd	r24, Z+2	; 0x02
    52b0:	93 81       	ldd	r25, Z+3	; 0x03
    52b2:	20 e0       	ldi	r18, 0x00	; 0
    52b4:	30 e0       	ldi	r19, 0x00	; 0
    52b6:	4a ef       	ldi	r20, 0xFA	; 250
    52b8:	54 e4       	ldi	r21, 0x44	; 68
    52ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    52be:	dc 01       	movw	r26, r24
    52c0:	cb 01       	movw	r24, r22
    52c2:	f8 01       	movw	r30, r16
    52c4:	80 83       	st	Z, r24
    52c6:	91 83       	std	Z+1, r25	; 0x01
    52c8:	a2 83       	std	Z+2, r26	; 0x02
    52ca:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    52cc:	fe 01       	movw	r30, r28
    52ce:	e7 59       	subi	r30, 0x97	; 151
    52d0:	ff 4f       	sbci	r31, 0xFF	; 255
    52d2:	60 81       	ld	r22, Z
    52d4:	71 81       	ldd	r23, Z+1	; 0x01
    52d6:	82 81       	ldd	r24, Z+2	; 0x02
    52d8:	93 81       	ldd	r25, Z+3	; 0x03
    52da:	20 e0       	ldi	r18, 0x00	; 0
    52dc:	30 e0       	ldi	r19, 0x00	; 0
    52de:	40 e8       	ldi	r20, 0x80	; 128
    52e0:	5f e3       	ldi	r21, 0x3F	; 63
    52e2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    52e6:	88 23       	and	r24, r24
    52e8:	44 f4       	brge	.+16     	; 0x52fa <main+0x2c2a>
		__ticks = 1;
    52ea:	fe 01       	movw	r30, r28
    52ec:	e9 59       	subi	r30, 0x99	; 153
    52ee:	ff 4f       	sbci	r31, 0xFF	; 255
    52f0:	81 e0       	ldi	r24, 0x01	; 1
    52f2:	90 e0       	ldi	r25, 0x00	; 0
    52f4:	91 83       	std	Z+1, r25	; 0x01
    52f6:	80 83       	st	Z, r24
    52f8:	64 c0       	rjmp	.+200    	; 0x53c2 <main+0x2cf2>
	else if (__tmp > 65535)
    52fa:	fe 01       	movw	r30, r28
    52fc:	e7 59       	subi	r30, 0x97	; 151
    52fe:	ff 4f       	sbci	r31, 0xFF	; 255
    5300:	60 81       	ld	r22, Z
    5302:	71 81       	ldd	r23, Z+1	; 0x01
    5304:	82 81       	ldd	r24, Z+2	; 0x02
    5306:	93 81       	ldd	r25, Z+3	; 0x03
    5308:	20 e0       	ldi	r18, 0x00	; 0
    530a:	3f ef       	ldi	r19, 0xFF	; 255
    530c:	4f e7       	ldi	r20, 0x7F	; 127
    530e:	57 e4       	ldi	r21, 0x47	; 71
    5310:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5314:	18 16       	cp	r1, r24
    5316:	0c f0       	brlt	.+2      	; 0x531a <main+0x2c4a>
    5318:	43 c0       	rjmp	.+134    	; 0x53a0 <main+0x2cd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    531a:	fe 01       	movw	r30, r28
    531c:	e3 59       	subi	r30, 0x93	; 147
    531e:	ff 4f       	sbci	r31, 0xFF	; 255
    5320:	60 81       	ld	r22, Z
    5322:	71 81       	ldd	r23, Z+1	; 0x01
    5324:	82 81       	ldd	r24, Z+2	; 0x02
    5326:	93 81       	ldd	r25, Z+3	; 0x03
    5328:	20 e0       	ldi	r18, 0x00	; 0
    532a:	30 e0       	ldi	r19, 0x00	; 0
    532c:	40 e2       	ldi	r20, 0x20	; 32
    532e:	51 e4       	ldi	r21, 0x41	; 65
    5330:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5334:	dc 01       	movw	r26, r24
    5336:	cb 01       	movw	r24, r22
    5338:	8e 01       	movw	r16, r28
    533a:	09 59       	subi	r16, 0x99	; 153
    533c:	1f 4f       	sbci	r17, 0xFF	; 255
    533e:	bc 01       	movw	r22, r24
    5340:	cd 01       	movw	r24, r26
    5342:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5346:	dc 01       	movw	r26, r24
    5348:	cb 01       	movw	r24, r22
    534a:	f8 01       	movw	r30, r16
    534c:	91 83       	std	Z+1, r25	; 0x01
    534e:	80 83       	st	Z, r24
    5350:	1f c0       	rjmp	.+62     	; 0x5390 <main+0x2cc0>
    5352:	fe 01       	movw	r30, r28
    5354:	eb 59       	subi	r30, 0x9B	; 155
    5356:	ff 4f       	sbci	r31, 0xFF	; 255
    5358:	88 ec       	ldi	r24, 0xC8	; 200
    535a:	90 e0       	ldi	r25, 0x00	; 0
    535c:	91 83       	std	Z+1, r25	; 0x01
    535e:	80 83       	st	Z, r24
    5360:	fe 01       	movw	r30, r28
    5362:	eb 59       	subi	r30, 0x9B	; 155
    5364:	ff 4f       	sbci	r31, 0xFF	; 255
    5366:	80 81       	ld	r24, Z
    5368:	91 81       	ldd	r25, Z+1	; 0x01
    536a:	01 97       	sbiw	r24, 0x01	; 1
    536c:	f1 f7       	brne	.-4      	; 0x536a <main+0x2c9a>
    536e:	fe 01       	movw	r30, r28
    5370:	eb 59       	subi	r30, 0x9B	; 155
    5372:	ff 4f       	sbci	r31, 0xFF	; 255
    5374:	91 83       	std	Z+1, r25	; 0x01
    5376:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5378:	de 01       	movw	r26, r28
    537a:	a9 59       	subi	r26, 0x99	; 153
    537c:	bf 4f       	sbci	r27, 0xFF	; 255
    537e:	fe 01       	movw	r30, r28
    5380:	e9 59       	subi	r30, 0x99	; 153
    5382:	ff 4f       	sbci	r31, 0xFF	; 255
    5384:	80 81       	ld	r24, Z
    5386:	91 81       	ldd	r25, Z+1	; 0x01
    5388:	01 97       	sbiw	r24, 0x01	; 1
    538a:	11 96       	adiw	r26, 0x01	; 1
    538c:	9c 93       	st	X, r25
    538e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5390:	fe 01       	movw	r30, r28
    5392:	e9 59       	subi	r30, 0x99	; 153
    5394:	ff 4f       	sbci	r31, 0xFF	; 255
    5396:	80 81       	ld	r24, Z
    5398:	91 81       	ldd	r25, Z+1	; 0x01
    539a:	00 97       	sbiw	r24, 0x00	; 0
    539c:	d1 f6       	brne	.-76     	; 0x5352 <main+0x2c82>
    539e:	27 c0       	rjmp	.+78     	; 0x53ee <main+0x2d1e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    53a0:	8e 01       	movw	r16, r28
    53a2:	09 59       	subi	r16, 0x99	; 153
    53a4:	1f 4f       	sbci	r17, 0xFF	; 255
    53a6:	fe 01       	movw	r30, r28
    53a8:	e7 59       	subi	r30, 0x97	; 151
    53aa:	ff 4f       	sbci	r31, 0xFF	; 255
    53ac:	60 81       	ld	r22, Z
    53ae:	71 81       	ldd	r23, Z+1	; 0x01
    53b0:	82 81       	ldd	r24, Z+2	; 0x02
    53b2:	93 81       	ldd	r25, Z+3	; 0x03
    53b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    53b8:	dc 01       	movw	r26, r24
    53ba:	cb 01       	movw	r24, r22
    53bc:	f8 01       	movw	r30, r16
    53be:	91 83       	std	Z+1, r25	; 0x01
    53c0:	80 83       	st	Z, r24
    53c2:	de 01       	movw	r26, r28
    53c4:	ad 59       	subi	r26, 0x9D	; 157
    53c6:	bf 4f       	sbci	r27, 0xFF	; 255
    53c8:	fe 01       	movw	r30, r28
    53ca:	e9 59       	subi	r30, 0x99	; 153
    53cc:	ff 4f       	sbci	r31, 0xFF	; 255
    53ce:	80 81       	ld	r24, Z
    53d0:	91 81       	ldd	r25, Z+1	; 0x01
    53d2:	8d 93       	st	X+, r24
    53d4:	9c 93       	st	X, r25
    53d6:	fe 01       	movw	r30, r28
    53d8:	ed 59       	subi	r30, 0x9D	; 157
    53da:	ff 4f       	sbci	r31, 0xFF	; 255
    53dc:	80 81       	ld	r24, Z
    53de:	91 81       	ldd	r25, Z+1	; 0x01
    53e0:	01 97       	sbiw	r24, 0x01	; 1
    53e2:	f1 f7       	brne	.-4      	; 0x53e0 <main+0x2d10>
    53e4:	fe 01       	movw	r30, r28
    53e6:	ed 59       	subi	r30, 0x9D	; 157
    53e8:	ff 4f       	sbci	r31, 0xFF	; 255
    53ea:	91 83       	std	Z+1, r25	; 0x01
    53ec:	80 83       	st	Z, r24
					Get_Reversed_Pass = Temp_Pass % 10;
					Reversed_Pass = (Reversed_Pass * 10) + Get_Reversed_Pass;
					Temp_Pass = Temp_Pass / 10;
				}
				_delay_ms(500);
				LCD_VoidSendCommand(LCD_ClearDisplay);
    53ee:	81 e0       	ldi	r24, 0x01	; 1
    53f0:	0e 94 92 0b 	call	0x1724	; 0x1724 <LCD_VoidSendCommand>
    53f4:	fe 01       	movw	r30, r28
    53f6:	e1 5a       	subi	r30, 0xA1	; 161
    53f8:	ff 4f       	sbci	r31, 0xFF	; 255
    53fa:	80 e0       	ldi	r24, 0x00	; 0
    53fc:	90 e0       	ldi	r25, 0x00	; 0
    53fe:	a0 e0       	ldi	r26, 0x00	; 0
    5400:	b0 e4       	ldi	r27, 0x40	; 64
    5402:	80 83       	st	Z, r24
    5404:	91 83       	std	Z+1, r25	; 0x01
    5406:	a2 83       	std	Z+2, r26	; 0x02
    5408:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    540a:	8e 01       	movw	r16, r28
    540c:	05 5a       	subi	r16, 0xA5	; 165
    540e:	1f 4f       	sbci	r17, 0xFF	; 255
    5410:	fe 01       	movw	r30, r28
    5412:	e1 5a       	subi	r30, 0xA1	; 161
    5414:	ff 4f       	sbci	r31, 0xFF	; 255
    5416:	60 81       	ld	r22, Z
    5418:	71 81       	ldd	r23, Z+1	; 0x01
    541a:	82 81       	ldd	r24, Z+2	; 0x02
    541c:	93 81       	ldd	r25, Z+3	; 0x03
    541e:	20 e0       	ldi	r18, 0x00	; 0
    5420:	30 e0       	ldi	r19, 0x00	; 0
    5422:	4a ef       	ldi	r20, 0xFA	; 250
    5424:	54 e4       	ldi	r21, 0x44	; 68
    5426:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    542a:	dc 01       	movw	r26, r24
    542c:	cb 01       	movw	r24, r22
    542e:	f8 01       	movw	r30, r16
    5430:	80 83       	st	Z, r24
    5432:	91 83       	std	Z+1, r25	; 0x01
    5434:	a2 83       	std	Z+2, r26	; 0x02
    5436:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5438:	fe 01       	movw	r30, r28
    543a:	e5 5a       	subi	r30, 0xA5	; 165
    543c:	ff 4f       	sbci	r31, 0xFF	; 255
    543e:	60 81       	ld	r22, Z
    5440:	71 81       	ldd	r23, Z+1	; 0x01
    5442:	82 81       	ldd	r24, Z+2	; 0x02
    5444:	93 81       	ldd	r25, Z+3	; 0x03
    5446:	20 e0       	ldi	r18, 0x00	; 0
    5448:	30 e0       	ldi	r19, 0x00	; 0
    544a:	40 e8       	ldi	r20, 0x80	; 128
    544c:	5f e3       	ldi	r21, 0x3F	; 63
    544e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5452:	88 23       	and	r24, r24
    5454:	44 f4       	brge	.+16     	; 0x5466 <main+0x2d96>
		__ticks = 1;
    5456:	fe 01       	movw	r30, r28
    5458:	e7 5a       	subi	r30, 0xA7	; 167
    545a:	ff 4f       	sbci	r31, 0xFF	; 255
    545c:	81 e0       	ldi	r24, 0x01	; 1
    545e:	90 e0       	ldi	r25, 0x00	; 0
    5460:	91 83       	std	Z+1, r25	; 0x01
    5462:	80 83       	st	Z, r24
    5464:	64 c0       	rjmp	.+200    	; 0x552e <main+0x2e5e>
	else if (__tmp > 65535)
    5466:	fe 01       	movw	r30, r28
    5468:	e5 5a       	subi	r30, 0xA5	; 165
    546a:	ff 4f       	sbci	r31, 0xFF	; 255
    546c:	60 81       	ld	r22, Z
    546e:	71 81       	ldd	r23, Z+1	; 0x01
    5470:	82 81       	ldd	r24, Z+2	; 0x02
    5472:	93 81       	ldd	r25, Z+3	; 0x03
    5474:	20 e0       	ldi	r18, 0x00	; 0
    5476:	3f ef       	ldi	r19, 0xFF	; 255
    5478:	4f e7       	ldi	r20, 0x7F	; 127
    547a:	57 e4       	ldi	r21, 0x47	; 71
    547c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5480:	18 16       	cp	r1, r24
    5482:	0c f0       	brlt	.+2      	; 0x5486 <main+0x2db6>
    5484:	43 c0       	rjmp	.+134    	; 0x550c <main+0x2e3c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5486:	fe 01       	movw	r30, r28
    5488:	e1 5a       	subi	r30, 0xA1	; 161
    548a:	ff 4f       	sbci	r31, 0xFF	; 255
    548c:	60 81       	ld	r22, Z
    548e:	71 81       	ldd	r23, Z+1	; 0x01
    5490:	82 81       	ldd	r24, Z+2	; 0x02
    5492:	93 81       	ldd	r25, Z+3	; 0x03
    5494:	20 e0       	ldi	r18, 0x00	; 0
    5496:	30 e0       	ldi	r19, 0x00	; 0
    5498:	40 e2       	ldi	r20, 0x20	; 32
    549a:	51 e4       	ldi	r21, 0x41	; 65
    549c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    54a0:	dc 01       	movw	r26, r24
    54a2:	cb 01       	movw	r24, r22
    54a4:	8e 01       	movw	r16, r28
    54a6:	07 5a       	subi	r16, 0xA7	; 167
    54a8:	1f 4f       	sbci	r17, 0xFF	; 255
    54aa:	bc 01       	movw	r22, r24
    54ac:	cd 01       	movw	r24, r26
    54ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    54b2:	dc 01       	movw	r26, r24
    54b4:	cb 01       	movw	r24, r22
    54b6:	f8 01       	movw	r30, r16
    54b8:	91 83       	std	Z+1, r25	; 0x01
    54ba:	80 83       	st	Z, r24
    54bc:	1f c0       	rjmp	.+62     	; 0x54fc <main+0x2e2c>
    54be:	fe 01       	movw	r30, r28
    54c0:	e9 5a       	subi	r30, 0xA9	; 169
    54c2:	ff 4f       	sbci	r31, 0xFF	; 255
    54c4:	88 ec       	ldi	r24, 0xC8	; 200
    54c6:	90 e0       	ldi	r25, 0x00	; 0
    54c8:	91 83       	std	Z+1, r25	; 0x01
    54ca:	80 83       	st	Z, r24
    54cc:	fe 01       	movw	r30, r28
    54ce:	e9 5a       	subi	r30, 0xA9	; 169
    54d0:	ff 4f       	sbci	r31, 0xFF	; 255
    54d2:	80 81       	ld	r24, Z
    54d4:	91 81       	ldd	r25, Z+1	; 0x01
    54d6:	01 97       	sbiw	r24, 0x01	; 1
    54d8:	f1 f7       	brne	.-4      	; 0x54d6 <main+0x2e06>
    54da:	fe 01       	movw	r30, r28
    54dc:	e9 5a       	subi	r30, 0xA9	; 169
    54de:	ff 4f       	sbci	r31, 0xFF	; 255
    54e0:	91 83       	std	Z+1, r25	; 0x01
    54e2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    54e4:	de 01       	movw	r26, r28
    54e6:	a7 5a       	subi	r26, 0xA7	; 167
    54e8:	bf 4f       	sbci	r27, 0xFF	; 255
    54ea:	fe 01       	movw	r30, r28
    54ec:	e7 5a       	subi	r30, 0xA7	; 167
    54ee:	ff 4f       	sbci	r31, 0xFF	; 255
    54f0:	80 81       	ld	r24, Z
    54f2:	91 81       	ldd	r25, Z+1	; 0x01
    54f4:	01 97       	sbiw	r24, 0x01	; 1
    54f6:	11 96       	adiw	r26, 0x01	; 1
    54f8:	9c 93       	st	X, r25
    54fa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    54fc:	fe 01       	movw	r30, r28
    54fe:	e7 5a       	subi	r30, 0xA7	; 167
    5500:	ff 4f       	sbci	r31, 0xFF	; 255
    5502:	80 81       	ld	r24, Z
    5504:	91 81       	ldd	r25, Z+1	; 0x01
    5506:	00 97       	sbiw	r24, 0x00	; 0
    5508:	d1 f6       	brne	.-76     	; 0x54be <main+0x2dee>
    550a:	27 c0       	rjmp	.+78     	; 0x555a <main+0x2e8a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    550c:	8e 01       	movw	r16, r28
    550e:	07 5a       	subi	r16, 0xA7	; 167
    5510:	1f 4f       	sbci	r17, 0xFF	; 255
    5512:	fe 01       	movw	r30, r28
    5514:	e5 5a       	subi	r30, 0xA5	; 165
    5516:	ff 4f       	sbci	r31, 0xFF	; 255
    5518:	60 81       	ld	r22, Z
    551a:	71 81       	ldd	r23, Z+1	; 0x01
    551c:	82 81       	ldd	r24, Z+2	; 0x02
    551e:	93 81       	ldd	r25, Z+3	; 0x03
    5520:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5524:	dc 01       	movw	r26, r24
    5526:	cb 01       	movw	r24, r22
    5528:	f8 01       	movw	r30, r16
    552a:	91 83       	std	Z+1, r25	; 0x01
    552c:	80 83       	st	Z, r24
    552e:	de 01       	movw	r26, r28
    5530:	ab 5a       	subi	r26, 0xAB	; 171
    5532:	bf 4f       	sbci	r27, 0xFF	; 255
    5534:	fe 01       	movw	r30, r28
    5536:	e7 5a       	subi	r30, 0xA7	; 167
    5538:	ff 4f       	sbci	r31, 0xFF	; 255
    553a:	80 81       	ld	r24, Z
    553c:	91 81       	ldd	r25, Z+1	; 0x01
    553e:	8d 93       	st	X+, r24
    5540:	9c 93       	st	X, r25
    5542:	fe 01       	movw	r30, r28
    5544:	eb 5a       	subi	r30, 0xAB	; 171
    5546:	ff 4f       	sbci	r31, 0xFF	; 255
    5548:	80 81       	ld	r24, Z
    554a:	91 81       	ldd	r25, Z+1	; 0x01
    554c:	01 97       	sbiw	r24, 0x01	; 1
    554e:	f1 f7       	brne	.-4      	; 0x554c <main+0x2e7c>
    5550:	fe 01       	movw	r30, r28
    5552:	eb 5a       	subi	r30, 0xAB	; 171
    5554:	ff 4f       	sbci	r31, 0xFF	; 255
    5556:	91 83       	std	Z+1, r25	; 0x01
    5558:	80 83       	st	Z, r24
				_delay_ms(2);
				LCD_VoidSendString("Password changed");
    555a:	81 e0       	ldi	r24, 0x01	; 1
    555c:	91 e0       	ldi	r25, 0x01	; 1
    555e:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <LCD_VoidSendString>
    5562:	fe 01       	movw	r30, r28
    5564:	ef 5a       	subi	r30, 0xAF	; 175
    5566:	ff 4f       	sbci	r31, 0xFF	; 255
    5568:	80 e0       	ldi	r24, 0x00	; 0
    556a:	90 e0       	ldi	r25, 0x00	; 0
    556c:	aa ef       	ldi	r26, 0xFA	; 250
    556e:	b3 e4       	ldi	r27, 0x43	; 67
    5570:	80 83       	st	Z, r24
    5572:	91 83       	std	Z+1, r25	; 0x01
    5574:	a2 83       	std	Z+2, r26	; 0x02
    5576:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5578:	8e 01       	movw	r16, r28
    557a:	03 5b       	subi	r16, 0xB3	; 179
    557c:	1f 4f       	sbci	r17, 0xFF	; 255
    557e:	fe 01       	movw	r30, r28
    5580:	ef 5a       	subi	r30, 0xAF	; 175
    5582:	ff 4f       	sbci	r31, 0xFF	; 255
    5584:	60 81       	ld	r22, Z
    5586:	71 81       	ldd	r23, Z+1	; 0x01
    5588:	82 81       	ldd	r24, Z+2	; 0x02
    558a:	93 81       	ldd	r25, Z+3	; 0x03
    558c:	20 e0       	ldi	r18, 0x00	; 0
    558e:	30 e0       	ldi	r19, 0x00	; 0
    5590:	4a ef       	ldi	r20, 0xFA	; 250
    5592:	54 e4       	ldi	r21, 0x44	; 68
    5594:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5598:	dc 01       	movw	r26, r24
    559a:	cb 01       	movw	r24, r22
    559c:	f8 01       	movw	r30, r16
    559e:	80 83       	st	Z, r24
    55a0:	91 83       	std	Z+1, r25	; 0x01
    55a2:	a2 83       	std	Z+2, r26	; 0x02
    55a4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    55a6:	fe 01       	movw	r30, r28
    55a8:	e3 5b       	subi	r30, 0xB3	; 179
    55aa:	ff 4f       	sbci	r31, 0xFF	; 255
    55ac:	60 81       	ld	r22, Z
    55ae:	71 81       	ldd	r23, Z+1	; 0x01
    55b0:	82 81       	ldd	r24, Z+2	; 0x02
    55b2:	93 81       	ldd	r25, Z+3	; 0x03
    55b4:	20 e0       	ldi	r18, 0x00	; 0
    55b6:	30 e0       	ldi	r19, 0x00	; 0
    55b8:	40 e8       	ldi	r20, 0x80	; 128
    55ba:	5f e3       	ldi	r21, 0x3F	; 63
    55bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    55c0:	88 23       	and	r24, r24
    55c2:	44 f4       	brge	.+16     	; 0x55d4 <main+0x2f04>
		__ticks = 1;
    55c4:	fe 01       	movw	r30, r28
    55c6:	e5 5b       	subi	r30, 0xB5	; 181
    55c8:	ff 4f       	sbci	r31, 0xFF	; 255
    55ca:	81 e0       	ldi	r24, 0x01	; 1
    55cc:	90 e0       	ldi	r25, 0x00	; 0
    55ce:	91 83       	std	Z+1, r25	; 0x01
    55d0:	80 83       	st	Z, r24
    55d2:	64 c0       	rjmp	.+200    	; 0x569c <main+0x2fcc>
	else if (__tmp > 65535)
    55d4:	fe 01       	movw	r30, r28
    55d6:	e3 5b       	subi	r30, 0xB3	; 179
    55d8:	ff 4f       	sbci	r31, 0xFF	; 255
    55da:	60 81       	ld	r22, Z
    55dc:	71 81       	ldd	r23, Z+1	; 0x01
    55de:	82 81       	ldd	r24, Z+2	; 0x02
    55e0:	93 81       	ldd	r25, Z+3	; 0x03
    55e2:	20 e0       	ldi	r18, 0x00	; 0
    55e4:	3f ef       	ldi	r19, 0xFF	; 255
    55e6:	4f e7       	ldi	r20, 0x7F	; 127
    55e8:	57 e4       	ldi	r21, 0x47	; 71
    55ea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    55ee:	18 16       	cp	r1, r24
    55f0:	0c f0       	brlt	.+2      	; 0x55f4 <main+0x2f24>
    55f2:	43 c0       	rjmp	.+134    	; 0x567a <main+0x2faa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    55f4:	fe 01       	movw	r30, r28
    55f6:	ef 5a       	subi	r30, 0xAF	; 175
    55f8:	ff 4f       	sbci	r31, 0xFF	; 255
    55fa:	60 81       	ld	r22, Z
    55fc:	71 81       	ldd	r23, Z+1	; 0x01
    55fe:	82 81       	ldd	r24, Z+2	; 0x02
    5600:	93 81       	ldd	r25, Z+3	; 0x03
    5602:	20 e0       	ldi	r18, 0x00	; 0
    5604:	30 e0       	ldi	r19, 0x00	; 0
    5606:	40 e2       	ldi	r20, 0x20	; 32
    5608:	51 e4       	ldi	r21, 0x41	; 65
    560a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    560e:	dc 01       	movw	r26, r24
    5610:	cb 01       	movw	r24, r22
    5612:	8e 01       	movw	r16, r28
    5614:	05 5b       	subi	r16, 0xB5	; 181
    5616:	1f 4f       	sbci	r17, 0xFF	; 255
    5618:	bc 01       	movw	r22, r24
    561a:	cd 01       	movw	r24, r26
    561c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5620:	dc 01       	movw	r26, r24
    5622:	cb 01       	movw	r24, r22
    5624:	f8 01       	movw	r30, r16
    5626:	91 83       	std	Z+1, r25	; 0x01
    5628:	80 83       	st	Z, r24
    562a:	1f c0       	rjmp	.+62     	; 0x566a <main+0x2f9a>
    562c:	fe 01       	movw	r30, r28
    562e:	e7 5b       	subi	r30, 0xB7	; 183
    5630:	ff 4f       	sbci	r31, 0xFF	; 255
    5632:	88 ec       	ldi	r24, 0xC8	; 200
    5634:	90 e0       	ldi	r25, 0x00	; 0
    5636:	91 83       	std	Z+1, r25	; 0x01
    5638:	80 83       	st	Z, r24
    563a:	fe 01       	movw	r30, r28
    563c:	e7 5b       	subi	r30, 0xB7	; 183
    563e:	ff 4f       	sbci	r31, 0xFF	; 255
    5640:	80 81       	ld	r24, Z
    5642:	91 81       	ldd	r25, Z+1	; 0x01
    5644:	01 97       	sbiw	r24, 0x01	; 1
    5646:	f1 f7       	brne	.-4      	; 0x5644 <main+0x2f74>
    5648:	fe 01       	movw	r30, r28
    564a:	e7 5b       	subi	r30, 0xB7	; 183
    564c:	ff 4f       	sbci	r31, 0xFF	; 255
    564e:	91 83       	std	Z+1, r25	; 0x01
    5650:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5652:	de 01       	movw	r26, r28
    5654:	a5 5b       	subi	r26, 0xB5	; 181
    5656:	bf 4f       	sbci	r27, 0xFF	; 255
    5658:	fe 01       	movw	r30, r28
    565a:	e5 5b       	subi	r30, 0xB5	; 181
    565c:	ff 4f       	sbci	r31, 0xFF	; 255
    565e:	80 81       	ld	r24, Z
    5660:	91 81       	ldd	r25, Z+1	; 0x01
    5662:	01 97       	sbiw	r24, 0x01	; 1
    5664:	11 96       	adiw	r26, 0x01	; 1
    5666:	9c 93       	st	X, r25
    5668:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    566a:	fe 01       	movw	r30, r28
    566c:	e5 5b       	subi	r30, 0xB5	; 181
    566e:	ff 4f       	sbci	r31, 0xFF	; 255
    5670:	80 81       	ld	r24, Z
    5672:	91 81       	ldd	r25, Z+1	; 0x01
    5674:	00 97       	sbiw	r24, 0x00	; 0
    5676:	d1 f6       	brne	.-76     	; 0x562c <main+0x2f5c>
    5678:	27 c0       	rjmp	.+78     	; 0x56c8 <main+0x2ff8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    567a:	8e 01       	movw	r16, r28
    567c:	05 5b       	subi	r16, 0xB5	; 181
    567e:	1f 4f       	sbci	r17, 0xFF	; 255
    5680:	fe 01       	movw	r30, r28
    5682:	e3 5b       	subi	r30, 0xB3	; 179
    5684:	ff 4f       	sbci	r31, 0xFF	; 255
    5686:	60 81       	ld	r22, Z
    5688:	71 81       	ldd	r23, Z+1	; 0x01
    568a:	82 81       	ldd	r24, Z+2	; 0x02
    568c:	93 81       	ldd	r25, Z+3	; 0x03
    568e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5692:	dc 01       	movw	r26, r24
    5694:	cb 01       	movw	r24, r22
    5696:	f8 01       	movw	r30, r16
    5698:	91 83       	std	Z+1, r25	; 0x01
    569a:	80 83       	st	Z, r24
    569c:	de 01       	movw	r26, r28
    569e:	a9 5b       	subi	r26, 0xB9	; 185
    56a0:	bf 4f       	sbci	r27, 0xFF	; 255
    56a2:	fe 01       	movw	r30, r28
    56a4:	e5 5b       	subi	r30, 0xB5	; 181
    56a6:	ff 4f       	sbci	r31, 0xFF	; 255
    56a8:	80 81       	ld	r24, Z
    56aa:	91 81       	ldd	r25, Z+1	; 0x01
    56ac:	8d 93       	st	X+, r24
    56ae:	9c 93       	st	X, r25
    56b0:	fe 01       	movw	r30, r28
    56b2:	e9 5b       	subi	r30, 0xB9	; 185
    56b4:	ff 4f       	sbci	r31, 0xFF	; 255
    56b6:	80 81       	ld	r24, Z
    56b8:	91 81       	ldd	r25, Z+1	; 0x01
    56ba:	01 97       	sbiw	r24, 0x01	; 1
    56bc:	f1 f7       	brne	.-4      	; 0x56ba <main+0x2fea>
    56be:	fe 01       	movw	r30, r28
    56c0:	e9 5b       	subi	r30, 0xB9	; 185
    56c2:	ff 4f       	sbci	r31, 0xFF	; 255
    56c4:	91 83       	std	Z+1, r25	; 0x01
    56c6:	80 83       	st	Z, r24
				_delay_ms(500);
				LCD_VoidSendCommand(LCD_ClearDisplay);
    56c8:	81 e0       	ldi	r24, 0x01	; 1
    56ca:	0e 94 92 0b 	call	0x1724	; 0x1724 <LCD_VoidSendCommand>
    56ce:	fe 01       	movw	r30, r28
    56d0:	ed 5b       	subi	r30, 0xBD	; 189
    56d2:	ff 4f       	sbci	r31, 0xFF	; 255
    56d4:	80 e0       	ldi	r24, 0x00	; 0
    56d6:	90 e0       	ldi	r25, 0x00	; 0
    56d8:	a0 e0       	ldi	r26, 0x00	; 0
    56da:	b0 e4       	ldi	r27, 0x40	; 64
    56dc:	80 83       	st	Z, r24
    56de:	91 83       	std	Z+1, r25	; 0x01
    56e0:	a2 83       	std	Z+2, r26	; 0x02
    56e2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    56e4:	8e 01       	movw	r16, r28
    56e6:	01 5c       	subi	r16, 0xC1	; 193
    56e8:	1f 4f       	sbci	r17, 0xFF	; 255
    56ea:	fe 01       	movw	r30, r28
    56ec:	ed 5b       	subi	r30, 0xBD	; 189
    56ee:	ff 4f       	sbci	r31, 0xFF	; 255
    56f0:	60 81       	ld	r22, Z
    56f2:	71 81       	ldd	r23, Z+1	; 0x01
    56f4:	82 81       	ldd	r24, Z+2	; 0x02
    56f6:	93 81       	ldd	r25, Z+3	; 0x03
    56f8:	20 e0       	ldi	r18, 0x00	; 0
    56fa:	30 e0       	ldi	r19, 0x00	; 0
    56fc:	4a ef       	ldi	r20, 0xFA	; 250
    56fe:	54 e4       	ldi	r21, 0x44	; 68
    5700:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5704:	dc 01       	movw	r26, r24
    5706:	cb 01       	movw	r24, r22
    5708:	f8 01       	movw	r30, r16
    570a:	80 83       	st	Z, r24
    570c:	91 83       	std	Z+1, r25	; 0x01
    570e:	a2 83       	std	Z+2, r26	; 0x02
    5710:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5712:	fe 01       	movw	r30, r28
    5714:	ff 96       	adiw	r30, 0x3f	; 63
    5716:	60 81       	ld	r22, Z
    5718:	71 81       	ldd	r23, Z+1	; 0x01
    571a:	82 81       	ldd	r24, Z+2	; 0x02
    571c:	93 81       	ldd	r25, Z+3	; 0x03
    571e:	20 e0       	ldi	r18, 0x00	; 0
    5720:	30 e0       	ldi	r19, 0x00	; 0
    5722:	40 e8       	ldi	r20, 0x80	; 128
    5724:	5f e3       	ldi	r21, 0x3F	; 63
    5726:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    572a:	88 23       	and	r24, r24
    572c:	2c f4       	brge	.+10     	; 0x5738 <main+0x3068>
		__ticks = 1;
    572e:	81 e0       	ldi	r24, 0x01	; 1
    5730:	90 e0       	ldi	r25, 0x00	; 0
    5732:	9e af       	std	Y+62, r25	; 0x3e
    5734:	8d af       	std	Y+61, r24	; 0x3d
    5736:	47 c0       	rjmp	.+142    	; 0x57c6 <main+0x30f6>
	else if (__tmp > 65535)
    5738:	fe 01       	movw	r30, r28
    573a:	ff 96       	adiw	r30, 0x3f	; 63
    573c:	60 81       	ld	r22, Z
    573e:	71 81       	ldd	r23, Z+1	; 0x01
    5740:	82 81       	ldd	r24, Z+2	; 0x02
    5742:	93 81       	ldd	r25, Z+3	; 0x03
    5744:	20 e0       	ldi	r18, 0x00	; 0
    5746:	3f ef       	ldi	r19, 0xFF	; 255
    5748:	4f e7       	ldi	r20, 0x7F	; 127
    574a:	57 e4       	ldi	r21, 0x47	; 71
    574c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5750:	18 16       	cp	r1, r24
    5752:	6c f5       	brge	.+90     	; 0x57ae <main+0x30de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5754:	fe 01       	movw	r30, r28
    5756:	ed 5b       	subi	r30, 0xBD	; 189
    5758:	ff 4f       	sbci	r31, 0xFF	; 255
    575a:	60 81       	ld	r22, Z
    575c:	71 81       	ldd	r23, Z+1	; 0x01
    575e:	82 81       	ldd	r24, Z+2	; 0x02
    5760:	93 81       	ldd	r25, Z+3	; 0x03
    5762:	20 e0       	ldi	r18, 0x00	; 0
    5764:	30 e0       	ldi	r19, 0x00	; 0
    5766:	40 e2       	ldi	r20, 0x20	; 32
    5768:	51 e4       	ldi	r21, 0x41	; 65
    576a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    576e:	dc 01       	movw	r26, r24
    5770:	cb 01       	movw	r24, r22
    5772:	bc 01       	movw	r22, r24
    5774:	cd 01       	movw	r24, r26
    5776:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    577a:	dc 01       	movw	r26, r24
    577c:	cb 01       	movw	r24, r22
    577e:	9e af       	std	Y+62, r25	; 0x3e
    5780:	8d af       	std	Y+61, r24	; 0x3d
    5782:	0f c0       	rjmp	.+30     	; 0x57a2 <main+0x30d2>
    5784:	88 ec       	ldi	r24, 0xC8	; 200
    5786:	90 e0       	ldi	r25, 0x00	; 0
    5788:	9c af       	std	Y+60, r25	; 0x3c
    578a:	8b af       	std	Y+59, r24	; 0x3b
    578c:	8b ad       	ldd	r24, Y+59	; 0x3b
    578e:	9c ad       	ldd	r25, Y+60	; 0x3c
    5790:	01 97       	sbiw	r24, 0x01	; 1
    5792:	f1 f7       	brne	.-4      	; 0x5790 <main+0x30c0>
    5794:	9c af       	std	Y+60, r25	; 0x3c
    5796:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5798:	8d ad       	ldd	r24, Y+61	; 0x3d
    579a:	9e ad       	ldd	r25, Y+62	; 0x3e
    579c:	01 97       	sbiw	r24, 0x01	; 1
    579e:	9e af       	std	Y+62, r25	; 0x3e
    57a0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    57a2:	8d ad       	ldd	r24, Y+61	; 0x3d
    57a4:	9e ad       	ldd	r25, Y+62	; 0x3e
    57a6:	00 97       	sbiw	r24, 0x00	; 0
    57a8:	69 f7       	brne	.-38     	; 0x5784 <main+0x30b4>
    57aa:	0c 94 91 14 	jmp	0x2922	; 0x2922 <main+0x252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    57ae:	fe 01       	movw	r30, r28
    57b0:	ff 96       	adiw	r30, 0x3f	; 63
    57b2:	60 81       	ld	r22, Z
    57b4:	71 81       	ldd	r23, Z+1	; 0x01
    57b6:	82 81       	ldd	r24, Z+2	; 0x02
    57b8:	93 81       	ldd	r25, Z+3	; 0x03
    57ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    57be:	dc 01       	movw	r26, r24
    57c0:	cb 01       	movw	r24, r22
    57c2:	9e af       	std	Y+62, r25	; 0x3e
    57c4:	8d af       	std	Y+61, r24	; 0x3d
    57c6:	8d ad       	ldd	r24, Y+61	; 0x3d
    57c8:	9e ad       	ldd	r25, Y+62	; 0x3e
    57ca:	9a af       	std	Y+58, r25	; 0x3a
    57cc:	89 af       	std	Y+57, r24	; 0x39
    57ce:	89 ad       	ldd	r24, Y+57	; 0x39
    57d0:	9a ad       	ldd	r25, Y+58	; 0x3a
    57d2:	01 97       	sbiw	r24, 0x01	; 1
    57d4:	f1 f7       	brne	.-4      	; 0x57d2 <main+0x3102>
    57d6:	9a af       	std	Y+58, r25	; 0x3a
    57d8:	89 af       	std	Y+57, r24	; 0x39
    57da:	0c 94 91 14 	jmp	0x2922	; 0x2922 <main+0x252>
				_delay_ms(2);
			}
			else
			{
				LCD_VoidSendStringFromPos("Wrong Password",0,1);
    57de:	8d ec       	ldi	r24, 0xCD	; 205
    57e0:	90 e0       	ldi	r25, 0x00	; 0
    57e2:	60 e0       	ldi	r22, 0x00	; 0
    57e4:	41 e0       	ldi	r20, 0x01	; 1
    57e6:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <LCD_VoidSendStringFromPos>
    57ea:	80 e0       	ldi	r24, 0x00	; 0
    57ec:	90 e0       	ldi	r25, 0x00	; 0
    57ee:	aa ef       	ldi	r26, 0xFA	; 250
    57f0:	b3 e4       	ldi	r27, 0x43	; 67
    57f2:	8d ab       	std	Y+53, r24	; 0x35
    57f4:	9e ab       	std	Y+54, r25	; 0x36
    57f6:	af ab       	std	Y+55, r26	; 0x37
    57f8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    57fa:	6d a9       	ldd	r22, Y+53	; 0x35
    57fc:	7e a9       	ldd	r23, Y+54	; 0x36
    57fe:	8f a9       	ldd	r24, Y+55	; 0x37
    5800:	98 ad       	ldd	r25, Y+56	; 0x38
    5802:	20 e0       	ldi	r18, 0x00	; 0
    5804:	30 e0       	ldi	r19, 0x00	; 0
    5806:	4a ef       	ldi	r20, 0xFA	; 250
    5808:	54 e4       	ldi	r21, 0x44	; 68
    580a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    580e:	dc 01       	movw	r26, r24
    5810:	cb 01       	movw	r24, r22
    5812:	89 ab       	std	Y+49, r24	; 0x31
    5814:	9a ab       	std	Y+50, r25	; 0x32
    5816:	ab ab       	std	Y+51, r26	; 0x33
    5818:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    581a:	69 a9       	ldd	r22, Y+49	; 0x31
    581c:	7a a9       	ldd	r23, Y+50	; 0x32
    581e:	8b a9       	ldd	r24, Y+51	; 0x33
    5820:	9c a9       	ldd	r25, Y+52	; 0x34
    5822:	20 e0       	ldi	r18, 0x00	; 0
    5824:	30 e0       	ldi	r19, 0x00	; 0
    5826:	40 e8       	ldi	r20, 0x80	; 128
    5828:	5f e3       	ldi	r21, 0x3F	; 63
    582a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    582e:	88 23       	and	r24, r24
    5830:	2c f4       	brge	.+10     	; 0x583c <main+0x316c>
		__ticks = 1;
    5832:	81 e0       	ldi	r24, 0x01	; 1
    5834:	90 e0       	ldi	r25, 0x00	; 0
    5836:	98 ab       	std	Y+48, r25	; 0x30
    5838:	8f a7       	std	Y+47, r24	; 0x2f
    583a:	3f c0       	rjmp	.+126    	; 0x58ba <main+0x31ea>
	else if (__tmp > 65535)
    583c:	69 a9       	ldd	r22, Y+49	; 0x31
    583e:	7a a9       	ldd	r23, Y+50	; 0x32
    5840:	8b a9       	ldd	r24, Y+51	; 0x33
    5842:	9c a9       	ldd	r25, Y+52	; 0x34
    5844:	20 e0       	ldi	r18, 0x00	; 0
    5846:	3f ef       	ldi	r19, 0xFF	; 255
    5848:	4f e7       	ldi	r20, 0x7F	; 127
    584a:	57 e4       	ldi	r21, 0x47	; 71
    584c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5850:	18 16       	cp	r1, r24
    5852:	4c f5       	brge	.+82     	; 0x58a6 <main+0x31d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5854:	6d a9       	ldd	r22, Y+53	; 0x35
    5856:	7e a9       	ldd	r23, Y+54	; 0x36
    5858:	8f a9       	ldd	r24, Y+55	; 0x37
    585a:	98 ad       	ldd	r25, Y+56	; 0x38
    585c:	20 e0       	ldi	r18, 0x00	; 0
    585e:	30 e0       	ldi	r19, 0x00	; 0
    5860:	40 e2       	ldi	r20, 0x20	; 32
    5862:	51 e4       	ldi	r21, 0x41	; 65
    5864:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5868:	dc 01       	movw	r26, r24
    586a:	cb 01       	movw	r24, r22
    586c:	bc 01       	movw	r22, r24
    586e:	cd 01       	movw	r24, r26
    5870:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5874:	dc 01       	movw	r26, r24
    5876:	cb 01       	movw	r24, r22
    5878:	98 ab       	std	Y+48, r25	; 0x30
    587a:	8f a7       	std	Y+47, r24	; 0x2f
    587c:	0f c0       	rjmp	.+30     	; 0x589c <main+0x31cc>
    587e:	88 ec       	ldi	r24, 0xC8	; 200
    5880:	90 e0       	ldi	r25, 0x00	; 0
    5882:	9e a7       	std	Y+46, r25	; 0x2e
    5884:	8d a7       	std	Y+45, r24	; 0x2d
    5886:	8d a5       	ldd	r24, Y+45	; 0x2d
    5888:	9e a5       	ldd	r25, Y+46	; 0x2e
    588a:	01 97       	sbiw	r24, 0x01	; 1
    588c:	f1 f7       	brne	.-4      	; 0x588a <main+0x31ba>
    588e:	9e a7       	std	Y+46, r25	; 0x2e
    5890:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5892:	8f a5       	ldd	r24, Y+47	; 0x2f
    5894:	98 a9       	ldd	r25, Y+48	; 0x30
    5896:	01 97       	sbiw	r24, 0x01	; 1
    5898:	98 ab       	std	Y+48, r25	; 0x30
    589a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    589c:	8f a5       	ldd	r24, Y+47	; 0x2f
    589e:	98 a9       	ldd	r25, Y+48	; 0x30
    58a0:	00 97       	sbiw	r24, 0x00	; 0
    58a2:	69 f7       	brne	.-38     	; 0x587e <main+0x31ae>
    58a4:	14 c0       	rjmp	.+40     	; 0x58ce <main+0x31fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    58a6:	69 a9       	ldd	r22, Y+49	; 0x31
    58a8:	7a a9       	ldd	r23, Y+50	; 0x32
    58aa:	8b a9       	ldd	r24, Y+51	; 0x33
    58ac:	9c a9       	ldd	r25, Y+52	; 0x34
    58ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    58b2:	dc 01       	movw	r26, r24
    58b4:	cb 01       	movw	r24, r22
    58b6:	98 ab       	std	Y+48, r25	; 0x30
    58b8:	8f a7       	std	Y+47, r24	; 0x2f
    58ba:	8f a5       	ldd	r24, Y+47	; 0x2f
    58bc:	98 a9       	ldd	r25, Y+48	; 0x30
    58be:	9c a7       	std	Y+44, r25	; 0x2c
    58c0:	8b a7       	std	Y+43, r24	; 0x2b
    58c2:	8b a5       	ldd	r24, Y+43	; 0x2b
    58c4:	9c a5       	ldd	r25, Y+44	; 0x2c
    58c6:	01 97       	sbiw	r24, 0x01	; 1
    58c8:	f1 f7       	brne	.-4      	; 0x58c6 <main+0x31f6>
    58ca:	9c a7       	std	Y+44, r25	; 0x2c
    58cc:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(500);
				LCD_VoidSendCommand(LCD_ClearDisplay);
    58ce:	81 e0       	ldi	r24, 0x01	; 1
    58d0:	0e 94 92 0b 	call	0x1724	; 0x1724 <LCD_VoidSendCommand>
    58d4:	80 e0       	ldi	r24, 0x00	; 0
    58d6:	90 e0       	ldi	r25, 0x00	; 0
    58d8:	a0 e0       	ldi	r26, 0x00	; 0
    58da:	b0 e4       	ldi	r27, 0x40	; 64
    58dc:	8f a3       	std	Y+39, r24	; 0x27
    58de:	98 a7       	std	Y+40, r25	; 0x28
    58e0:	a9 a7       	std	Y+41, r26	; 0x29
    58e2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    58e4:	6f a1       	ldd	r22, Y+39	; 0x27
    58e6:	78 a5       	ldd	r23, Y+40	; 0x28
    58e8:	89 a5       	ldd	r24, Y+41	; 0x29
    58ea:	9a a5       	ldd	r25, Y+42	; 0x2a
    58ec:	20 e0       	ldi	r18, 0x00	; 0
    58ee:	30 e0       	ldi	r19, 0x00	; 0
    58f0:	4a ef       	ldi	r20, 0xFA	; 250
    58f2:	54 e4       	ldi	r21, 0x44	; 68
    58f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    58f8:	dc 01       	movw	r26, r24
    58fa:	cb 01       	movw	r24, r22
    58fc:	8b a3       	std	Y+35, r24	; 0x23
    58fe:	9c a3       	std	Y+36, r25	; 0x24
    5900:	ad a3       	std	Y+37, r26	; 0x25
    5902:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5904:	6b a1       	ldd	r22, Y+35	; 0x23
    5906:	7c a1       	ldd	r23, Y+36	; 0x24
    5908:	8d a1       	ldd	r24, Y+37	; 0x25
    590a:	9e a1       	ldd	r25, Y+38	; 0x26
    590c:	20 e0       	ldi	r18, 0x00	; 0
    590e:	30 e0       	ldi	r19, 0x00	; 0
    5910:	40 e8       	ldi	r20, 0x80	; 128
    5912:	5f e3       	ldi	r21, 0x3F	; 63
    5914:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5918:	88 23       	and	r24, r24
    591a:	2c f4       	brge	.+10     	; 0x5926 <main+0x3256>
		__ticks = 1;
    591c:	81 e0       	ldi	r24, 0x01	; 1
    591e:	90 e0       	ldi	r25, 0x00	; 0
    5920:	9a a3       	std	Y+34, r25	; 0x22
    5922:	89 a3       	std	Y+33, r24	; 0x21
    5924:	3f c0       	rjmp	.+126    	; 0x59a4 <main+0x32d4>
	else if (__tmp > 65535)
    5926:	6b a1       	ldd	r22, Y+35	; 0x23
    5928:	7c a1       	ldd	r23, Y+36	; 0x24
    592a:	8d a1       	ldd	r24, Y+37	; 0x25
    592c:	9e a1       	ldd	r25, Y+38	; 0x26
    592e:	20 e0       	ldi	r18, 0x00	; 0
    5930:	3f ef       	ldi	r19, 0xFF	; 255
    5932:	4f e7       	ldi	r20, 0x7F	; 127
    5934:	57 e4       	ldi	r21, 0x47	; 71
    5936:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    593a:	18 16       	cp	r1, r24
    593c:	4c f5       	brge	.+82     	; 0x5990 <main+0x32c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    593e:	6f a1       	ldd	r22, Y+39	; 0x27
    5940:	78 a5       	ldd	r23, Y+40	; 0x28
    5942:	89 a5       	ldd	r24, Y+41	; 0x29
    5944:	9a a5       	ldd	r25, Y+42	; 0x2a
    5946:	20 e0       	ldi	r18, 0x00	; 0
    5948:	30 e0       	ldi	r19, 0x00	; 0
    594a:	40 e2       	ldi	r20, 0x20	; 32
    594c:	51 e4       	ldi	r21, 0x41	; 65
    594e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5952:	dc 01       	movw	r26, r24
    5954:	cb 01       	movw	r24, r22
    5956:	bc 01       	movw	r22, r24
    5958:	cd 01       	movw	r24, r26
    595a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    595e:	dc 01       	movw	r26, r24
    5960:	cb 01       	movw	r24, r22
    5962:	9a a3       	std	Y+34, r25	; 0x22
    5964:	89 a3       	std	Y+33, r24	; 0x21
    5966:	0f c0       	rjmp	.+30     	; 0x5986 <main+0x32b6>
    5968:	88 ec       	ldi	r24, 0xC8	; 200
    596a:	90 e0       	ldi	r25, 0x00	; 0
    596c:	98 a3       	std	Y+32, r25	; 0x20
    596e:	8f 8f       	std	Y+31, r24	; 0x1f
    5970:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5972:	98 a1       	ldd	r25, Y+32	; 0x20
    5974:	01 97       	sbiw	r24, 0x01	; 1
    5976:	f1 f7       	brne	.-4      	; 0x5974 <main+0x32a4>
    5978:	98 a3       	std	Y+32, r25	; 0x20
    597a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    597c:	89 a1       	ldd	r24, Y+33	; 0x21
    597e:	9a a1       	ldd	r25, Y+34	; 0x22
    5980:	01 97       	sbiw	r24, 0x01	; 1
    5982:	9a a3       	std	Y+34, r25	; 0x22
    5984:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5986:	89 a1       	ldd	r24, Y+33	; 0x21
    5988:	9a a1       	ldd	r25, Y+34	; 0x22
    598a:	00 97       	sbiw	r24, 0x00	; 0
    598c:	69 f7       	brne	.-38     	; 0x5968 <main+0x3298>
    598e:	14 c0       	rjmp	.+40     	; 0x59b8 <main+0x32e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5990:	6b a1       	ldd	r22, Y+35	; 0x23
    5992:	7c a1       	ldd	r23, Y+36	; 0x24
    5994:	8d a1       	ldd	r24, Y+37	; 0x25
    5996:	9e a1       	ldd	r25, Y+38	; 0x26
    5998:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    599c:	dc 01       	movw	r26, r24
    599e:	cb 01       	movw	r24, r22
    59a0:	9a a3       	std	Y+34, r25	; 0x22
    59a2:	89 a3       	std	Y+33, r24	; 0x21
    59a4:	89 a1       	ldd	r24, Y+33	; 0x21
    59a6:	9a a1       	ldd	r25, Y+34	; 0x22
    59a8:	9e 8f       	std	Y+30, r25	; 0x1e
    59aa:	8d 8f       	std	Y+29, r24	; 0x1d
    59ac:	8d 8d       	ldd	r24, Y+29	; 0x1d
    59ae:	9e 8d       	ldd	r25, Y+30	; 0x1e
    59b0:	01 97       	sbiw	r24, 0x01	; 1
    59b2:	f1 f7       	brne	.-4      	; 0x59b0 <main+0x32e0>
    59b4:	9e 8f       	std	Y+30, r25	; 0x1e
    59b6:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(2);
				Comp_Pass = 0;
    59b8:	fe 01       	movw	r30, r28
    59ba:	e0 52       	subi	r30, 0x20	; 32
    59bc:	fe 4f       	sbci	r31, 0xFE	; 254
    59be:	10 82       	st	Z, r1
    59c0:	11 82       	std	Z+1, r1	; 0x01
    59c2:	12 82       	std	Z+2, r1	; 0x02
    59c4:	13 82       	std	Z+3, r1	; 0x03
    59c6:	0c 94 91 14 	jmp	0x2922	; 0x2922 <main+0x252>
			}
		}
		else
		{
			LCD_VoidSendCommand(LCD_ClearDisplay);
    59ca:	81 e0       	ldi	r24, 0x01	; 1
    59cc:	0e 94 92 0b 	call	0x1724	; 0x1724 <LCD_VoidSendCommand>
    59d0:	80 e0       	ldi	r24, 0x00	; 0
    59d2:	90 e0       	ldi	r25, 0x00	; 0
    59d4:	a0 e0       	ldi	r26, 0x00	; 0
    59d6:	b0 e4       	ldi	r27, 0x40	; 64
    59d8:	89 8f       	std	Y+25, r24	; 0x19
    59da:	9a 8f       	std	Y+26, r25	; 0x1a
    59dc:	ab 8f       	std	Y+27, r26	; 0x1b
    59de:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    59e0:	69 8d       	ldd	r22, Y+25	; 0x19
    59e2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    59e4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    59e6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    59e8:	20 e0       	ldi	r18, 0x00	; 0
    59ea:	30 e0       	ldi	r19, 0x00	; 0
    59ec:	4a ef       	ldi	r20, 0xFA	; 250
    59ee:	54 e4       	ldi	r21, 0x44	; 68
    59f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    59f4:	dc 01       	movw	r26, r24
    59f6:	cb 01       	movw	r24, r22
    59f8:	8d 8b       	std	Y+21, r24	; 0x15
    59fa:	9e 8b       	std	Y+22, r25	; 0x16
    59fc:	af 8b       	std	Y+23, r26	; 0x17
    59fe:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5a00:	6d 89       	ldd	r22, Y+21	; 0x15
    5a02:	7e 89       	ldd	r23, Y+22	; 0x16
    5a04:	8f 89       	ldd	r24, Y+23	; 0x17
    5a06:	98 8d       	ldd	r25, Y+24	; 0x18
    5a08:	20 e0       	ldi	r18, 0x00	; 0
    5a0a:	30 e0       	ldi	r19, 0x00	; 0
    5a0c:	40 e8       	ldi	r20, 0x80	; 128
    5a0e:	5f e3       	ldi	r21, 0x3F	; 63
    5a10:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5a14:	88 23       	and	r24, r24
    5a16:	2c f4       	brge	.+10     	; 0x5a22 <main+0x3352>
		__ticks = 1;
    5a18:	81 e0       	ldi	r24, 0x01	; 1
    5a1a:	90 e0       	ldi	r25, 0x00	; 0
    5a1c:	9c 8b       	std	Y+20, r25	; 0x14
    5a1e:	8b 8b       	std	Y+19, r24	; 0x13
    5a20:	3f c0       	rjmp	.+126    	; 0x5aa0 <main+0x33d0>
	else if (__tmp > 65535)
    5a22:	6d 89       	ldd	r22, Y+21	; 0x15
    5a24:	7e 89       	ldd	r23, Y+22	; 0x16
    5a26:	8f 89       	ldd	r24, Y+23	; 0x17
    5a28:	98 8d       	ldd	r25, Y+24	; 0x18
    5a2a:	20 e0       	ldi	r18, 0x00	; 0
    5a2c:	3f ef       	ldi	r19, 0xFF	; 255
    5a2e:	4f e7       	ldi	r20, 0x7F	; 127
    5a30:	57 e4       	ldi	r21, 0x47	; 71
    5a32:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5a36:	18 16       	cp	r1, r24
    5a38:	4c f5       	brge	.+82     	; 0x5a8c <main+0x33bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5a3a:	69 8d       	ldd	r22, Y+25	; 0x19
    5a3c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5a3e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5a40:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5a42:	20 e0       	ldi	r18, 0x00	; 0
    5a44:	30 e0       	ldi	r19, 0x00	; 0
    5a46:	40 e2       	ldi	r20, 0x20	; 32
    5a48:	51 e4       	ldi	r21, 0x41	; 65
    5a4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5a4e:	dc 01       	movw	r26, r24
    5a50:	cb 01       	movw	r24, r22
    5a52:	bc 01       	movw	r22, r24
    5a54:	cd 01       	movw	r24, r26
    5a56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5a5a:	dc 01       	movw	r26, r24
    5a5c:	cb 01       	movw	r24, r22
    5a5e:	9c 8b       	std	Y+20, r25	; 0x14
    5a60:	8b 8b       	std	Y+19, r24	; 0x13
    5a62:	0f c0       	rjmp	.+30     	; 0x5a82 <main+0x33b2>
    5a64:	88 ec       	ldi	r24, 0xC8	; 200
    5a66:	90 e0       	ldi	r25, 0x00	; 0
    5a68:	9a 8b       	std	Y+18, r25	; 0x12
    5a6a:	89 8b       	std	Y+17, r24	; 0x11
    5a6c:	89 89       	ldd	r24, Y+17	; 0x11
    5a6e:	9a 89       	ldd	r25, Y+18	; 0x12
    5a70:	01 97       	sbiw	r24, 0x01	; 1
    5a72:	f1 f7       	brne	.-4      	; 0x5a70 <main+0x33a0>
    5a74:	9a 8b       	std	Y+18, r25	; 0x12
    5a76:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5a78:	8b 89       	ldd	r24, Y+19	; 0x13
    5a7a:	9c 89       	ldd	r25, Y+20	; 0x14
    5a7c:	01 97       	sbiw	r24, 0x01	; 1
    5a7e:	9c 8b       	std	Y+20, r25	; 0x14
    5a80:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5a82:	8b 89       	ldd	r24, Y+19	; 0x13
    5a84:	9c 89       	ldd	r25, Y+20	; 0x14
    5a86:	00 97       	sbiw	r24, 0x00	; 0
    5a88:	69 f7       	brne	.-38     	; 0x5a64 <main+0x3394>
    5a8a:	14 c0       	rjmp	.+40     	; 0x5ab4 <main+0x33e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5a8c:	6d 89       	ldd	r22, Y+21	; 0x15
    5a8e:	7e 89       	ldd	r23, Y+22	; 0x16
    5a90:	8f 89       	ldd	r24, Y+23	; 0x17
    5a92:	98 8d       	ldd	r25, Y+24	; 0x18
    5a94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5a98:	dc 01       	movw	r26, r24
    5a9a:	cb 01       	movw	r24, r22
    5a9c:	9c 8b       	std	Y+20, r25	; 0x14
    5a9e:	8b 8b       	std	Y+19, r24	; 0x13
    5aa0:	8b 89       	ldd	r24, Y+19	; 0x13
    5aa2:	9c 89       	ldd	r25, Y+20	; 0x14
    5aa4:	98 8b       	std	Y+16, r25	; 0x10
    5aa6:	8f 87       	std	Y+15, r24	; 0x0f
    5aa8:	8f 85       	ldd	r24, Y+15	; 0x0f
    5aaa:	98 89       	ldd	r25, Y+16	; 0x10
    5aac:	01 97       	sbiw	r24, 0x01	; 1
    5aae:	f1 f7       	brne	.-4      	; 0x5aac <main+0x33dc>
    5ab0:	98 8b       	std	Y+16, r25	; 0x10
    5ab2:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(2);
			LCD_VoidSendStringFromPos("Invalid Input",0,1);
    5ab4:	86 ea       	ldi	r24, 0xA6	; 166
    5ab6:	90 e0       	ldi	r25, 0x00	; 0
    5ab8:	60 e0       	ldi	r22, 0x00	; 0
    5aba:	41 e0       	ldi	r20, 0x01	; 1
    5abc:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <LCD_VoidSendStringFromPos>
    5ac0:	80 e0       	ldi	r24, 0x00	; 0
    5ac2:	90 e0       	ldi	r25, 0x00	; 0
    5ac4:	aa ef       	ldi	r26, 0xFA	; 250
    5ac6:	b3 e4       	ldi	r27, 0x43	; 67
    5ac8:	8b 87       	std	Y+11, r24	; 0x0b
    5aca:	9c 87       	std	Y+12, r25	; 0x0c
    5acc:	ad 87       	std	Y+13, r26	; 0x0d
    5ace:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5ad0:	6b 85       	ldd	r22, Y+11	; 0x0b
    5ad2:	7c 85       	ldd	r23, Y+12	; 0x0c
    5ad4:	8d 85       	ldd	r24, Y+13	; 0x0d
    5ad6:	9e 85       	ldd	r25, Y+14	; 0x0e
    5ad8:	20 e0       	ldi	r18, 0x00	; 0
    5ada:	30 e0       	ldi	r19, 0x00	; 0
    5adc:	4a ef       	ldi	r20, 0xFA	; 250
    5ade:	54 e4       	ldi	r21, 0x44	; 68
    5ae0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5ae4:	dc 01       	movw	r26, r24
    5ae6:	cb 01       	movw	r24, r22
    5ae8:	8f 83       	std	Y+7, r24	; 0x07
    5aea:	98 87       	std	Y+8, r25	; 0x08
    5aec:	a9 87       	std	Y+9, r26	; 0x09
    5aee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5af0:	6f 81       	ldd	r22, Y+7	; 0x07
    5af2:	78 85       	ldd	r23, Y+8	; 0x08
    5af4:	89 85       	ldd	r24, Y+9	; 0x09
    5af6:	9a 85       	ldd	r25, Y+10	; 0x0a
    5af8:	20 e0       	ldi	r18, 0x00	; 0
    5afa:	30 e0       	ldi	r19, 0x00	; 0
    5afc:	40 e8       	ldi	r20, 0x80	; 128
    5afe:	5f e3       	ldi	r21, 0x3F	; 63
    5b00:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5b04:	88 23       	and	r24, r24
    5b06:	2c f4       	brge	.+10     	; 0x5b12 <main+0x3442>
		__ticks = 1;
    5b08:	81 e0       	ldi	r24, 0x01	; 1
    5b0a:	90 e0       	ldi	r25, 0x00	; 0
    5b0c:	9e 83       	std	Y+6, r25	; 0x06
    5b0e:	8d 83       	std	Y+5, r24	; 0x05
    5b10:	40 c0       	rjmp	.+128    	; 0x5b92 <main+0x34c2>
	else if (__tmp > 65535)
    5b12:	6f 81       	ldd	r22, Y+7	; 0x07
    5b14:	78 85       	ldd	r23, Y+8	; 0x08
    5b16:	89 85       	ldd	r24, Y+9	; 0x09
    5b18:	9a 85       	ldd	r25, Y+10	; 0x0a
    5b1a:	20 e0       	ldi	r18, 0x00	; 0
    5b1c:	3f ef       	ldi	r19, 0xFF	; 255
    5b1e:	4f e7       	ldi	r20, 0x7F	; 127
    5b20:	57 e4       	ldi	r21, 0x47	; 71
    5b22:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5b26:	18 16       	cp	r1, r24
    5b28:	54 f5       	brge	.+84     	; 0x5b7e <main+0x34ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5b2a:	6b 85       	ldd	r22, Y+11	; 0x0b
    5b2c:	7c 85       	ldd	r23, Y+12	; 0x0c
    5b2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5b30:	9e 85       	ldd	r25, Y+14	; 0x0e
    5b32:	20 e0       	ldi	r18, 0x00	; 0
    5b34:	30 e0       	ldi	r19, 0x00	; 0
    5b36:	40 e2       	ldi	r20, 0x20	; 32
    5b38:	51 e4       	ldi	r21, 0x41	; 65
    5b3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5b3e:	dc 01       	movw	r26, r24
    5b40:	cb 01       	movw	r24, r22
    5b42:	bc 01       	movw	r22, r24
    5b44:	cd 01       	movw	r24, r26
    5b46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5b4a:	dc 01       	movw	r26, r24
    5b4c:	cb 01       	movw	r24, r22
    5b4e:	9e 83       	std	Y+6, r25	; 0x06
    5b50:	8d 83       	std	Y+5, r24	; 0x05
    5b52:	0f c0       	rjmp	.+30     	; 0x5b72 <main+0x34a2>
    5b54:	88 ec       	ldi	r24, 0xC8	; 200
    5b56:	90 e0       	ldi	r25, 0x00	; 0
    5b58:	9c 83       	std	Y+4, r25	; 0x04
    5b5a:	8b 83       	std	Y+3, r24	; 0x03
    5b5c:	8b 81       	ldd	r24, Y+3	; 0x03
    5b5e:	9c 81       	ldd	r25, Y+4	; 0x04
    5b60:	01 97       	sbiw	r24, 0x01	; 1
    5b62:	f1 f7       	brne	.-4      	; 0x5b60 <main+0x3490>
    5b64:	9c 83       	std	Y+4, r25	; 0x04
    5b66:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5b68:	8d 81       	ldd	r24, Y+5	; 0x05
    5b6a:	9e 81       	ldd	r25, Y+6	; 0x06
    5b6c:	01 97       	sbiw	r24, 0x01	; 1
    5b6e:	9e 83       	std	Y+6, r25	; 0x06
    5b70:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5b72:	8d 81       	ldd	r24, Y+5	; 0x05
    5b74:	9e 81       	ldd	r25, Y+6	; 0x06
    5b76:	00 97       	sbiw	r24, 0x00	; 0
    5b78:	69 f7       	brne	.-38     	; 0x5b54 <main+0x3484>
    5b7a:	0c 94 91 14 	jmp	0x2922	; 0x2922 <main+0x252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5b7e:	6f 81       	ldd	r22, Y+7	; 0x07
    5b80:	78 85       	ldd	r23, Y+8	; 0x08
    5b82:	89 85       	ldd	r24, Y+9	; 0x09
    5b84:	9a 85       	ldd	r25, Y+10	; 0x0a
    5b86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5b8a:	dc 01       	movw	r26, r24
    5b8c:	cb 01       	movw	r24, r22
    5b8e:	9e 83       	std	Y+6, r25	; 0x06
    5b90:	8d 83       	std	Y+5, r24	; 0x05
    5b92:	8d 81       	ldd	r24, Y+5	; 0x05
    5b94:	9e 81       	ldd	r25, Y+6	; 0x06
    5b96:	9a 83       	std	Y+2, r25	; 0x02
    5b98:	89 83       	std	Y+1, r24	; 0x01
    5b9a:	89 81       	ldd	r24, Y+1	; 0x01
    5b9c:	9a 81       	ldd	r25, Y+2	; 0x02
    5b9e:	01 97       	sbiw	r24, 0x01	; 1
    5ba0:	f1 f7       	brne	.-4      	; 0x5b9e <main+0x34ce>
    5ba2:	9a 83       	std	Y+2, r25	; 0x02
    5ba4:	89 83       	std	Y+1, r24	; 0x01
    5ba6:	0c 94 91 14 	jmp	0x2922	; 0x2922 <main+0x252>

00005baa <__mulsi3>:
    5baa:	62 9f       	mul	r22, r18
    5bac:	d0 01       	movw	r26, r0
    5bae:	73 9f       	mul	r23, r19
    5bb0:	f0 01       	movw	r30, r0
    5bb2:	82 9f       	mul	r24, r18
    5bb4:	e0 0d       	add	r30, r0
    5bb6:	f1 1d       	adc	r31, r1
    5bb8:	64 9f       	mul	r22, r20
    5bba:	e0 0d       	add	r30, r0
    5bbc:	f1 1d       	adc	r31, r1
    5bbe:	92 9f       	mul	r25, r18
    5bc0:	f0 0d       	add	r31, r0
    5bc2:	83 9f       	mul	r24, r19
    5bc4:	f0 0d       	add	r31, r0
    5bc6:	74 9f       	mul	r23, r20
    5bc8:	f0 0d       	add	r31, r0
    5bca:	65 9f       	mul	r22, r21
    5bcc:	f0 0d       	add	r31, r0
    5bce:	99 27       	eor	r25, r25
    5bd0:	72 9f       	mul	r23, r18
    5bd2:	b0 0d       	add	r27, r0
    5bd4:	e1 1d       	adc	r30, r1
    5bd6:	f9 1f       	adc	r31, r25
    5bd8:	63 9f       	mul	r22, r19
    5bda:	b0 0d       	add	r27, r0
    5bdc:	e1 1d       	adc	r30, r1
    5bde:	f9 1f       	adc	r31, r25
    5be0:	bd 01       	movw	r22, r26
    5be2:	cf 01       	movw	r24, r30
    5be4:	11 24       	eor	r1, r1
    5be6:	08 95       	ret

00005be8 <__udivmodsi4>:
    5be8:	a1 e2       	ldi	r26, 0x21	; 33
    5bea:	1a 2e       	mov	r1, r26
    5bec:	aa 1b       	sub	r26, r26
    5bee:	bb 1b       	sub	r27, r27
    5bf0:	fd 01       	movw	r30, r26
    5bf2:	0d c0       	rjmp	.+26     	; 0x5c0e <__udivmodsi4_ep>

00005bf4 <__udivmodsi4_loop>:
    5bf4:	aa 1f       	adc	r26, r26
    5bf6:	bb 1f       	adc	r27, r27
    5bf8:	ee 1f       	adc	r30, r30
    5bfa:	ff 1f       	adc	r31, r31
    5bfc:	a2 17       	cp	r26, r18
    5bfe:	b3 07       	cpc	r27, r19
    5c00:	e4 07       	cpc	r30, r20
    5c02:	f5 07       	cpc	r31, r21
    5c04:	20 f0       	brcs	.+8      	; 0x5c0e <__udivmodsi4_ep>
    5c06:	a2 1b       	sub	r26, r18
    5c08:	b3 0b       	sbc	r27, r19
    5c0a:	e4 0b       	sbc	r30, r20
    5c0c:	f5 0b       	sbc	r31, r21

00005c0e <__udivmodsi4_ep>:
    5c0e:	66 1f       	adc	r22, r22
    5c10:	77 1f       	adc	r23, r23
    5c12:	88 1f       	adc	r24, r24
    5c14:	99 1f       	adc	r25, r25
    5c16:	1a 94       	dec	r1
    5c18:	69 f7       	brne	.-38     	; 0x5bf4 <__udivmodsi4_loop>
    5c1a:	60 95       	com	r22
    5c1c:	70 95       	com	r23
    5c1e:	80 95       	com	r24
    5c20:	90 95       	com	r25
    5c22:	9b 01       	movw	r18, r22
    5c24:	ac 01       	movw	r20, r24
    5c26:	bd 01       	movw	r22, r26
    5c28:	cf 01       	movw	r24, r30
    5c2a:	08 95       	ret

00005c2c <__prologue_saves__>:
    5c2c:	2f 92       	push	r2
    5c2e:	3f 92       	push	r3
    5c30:	4f 92       	push	r4
    5c32:	5f 92       	push	r5
    5c34:	6f 92       	push	r6
    5c36:	7f 92       	push	r7
    5c38:	8f 92       	push	r8
    5c3a:	9f 92       	push	r9
    5c3c:	af 92       	push	r10
    5c3e:	bf 92       	push	r11
    5c40:	cf 92       	push	r12
    5c42:	df 92       	push	r13
    5c44:	ef 92       	push	r14
    5c46:	ff 92       	push	r15
    5c48:	0f 93       	push	r16
    5c4a:	1f 93       	push	r17
    5c4c:	cf 93       	push	r28
    5c4e:	df 93       	push	r29
    5c50:	cd b7       	in	r28, 0x3d	; 61
    5c52:	de b7       	in	r29, 0x3e	; 62
    5c54:	ca 1b       	sub	r28, r26
    5c56:	db 0b       	sbc	r29, r27
    5c58:	0f b6       	in	r0, 0x3f	; 63
    5c5a:	f8 94       	cli
    5c5c:	de bf       	out	0x3e, r29	; 62
    5c5e:	0f be       	out	0x3f, r0	; 63
    5c60:	cd bf       	out	0x3d, r28	; 61
    5c62:	09 94       	ijmp

00005c64 <__epilogue_restores__>:
    5c64:	2a 88       	ldd	r2, Y+18	; 0x12
    5c66:	39 88       	ldd	r3, Y+17	; 0x11
    5c68:	48 88       	ldd	r4, Y+16	; 0x10
    5c6a:	5f 84       	ldd	r5, Y+15	; 0x0f
    5c6c:	6e 84       	ldd	r6, Y+14	; 0x0e
    5c6e:	7d 84       	ldd	r7, Y+13	; 0x0d
    5c70:	8c 84       	ldd	r8, Y+12	; 0x0c
    5c72:	9b 84       	ldd	r9, Y+11	; 0x0b
    5c74:	aa 84       	ldd	r10, Y+10	; 0x0a
    5c76:	b9 84       	ldd	r11, Y+9	; 0x09
    5c78:	c8 84       	ldd	r12, Y+8	; 0x08
    5c7a:	df 80       	ldd	r13, Y+7	; 0x07
    5c7c:	ee 80       	ldd	r14, Y+6	; 0x06
    5c7e:	fd 80       	ldd	r15, Y+5	; 0x05
    5c80:	0c 81       	ldd	r16, Y+4	; 0x04
    5c82:	1b 81       	ldd	r17, Y+3	; 0x03
    5c84:	aa 81       	ldd	r26, Y+2	; 0x02
    5c86:	b9 81       	ldd	r27, Y+1	; 0x01
    5c88:	ce 0f       	add	r28, r30
    5c8a:	d1 1d       	adc	r29, r1
    5c8c:	0f b6       	in	r0, 0x3f	; 63
    5c8e:	f8 94       	cli
    5c90:	de bf       	out	0x3e, r29	; 62
    5c92:	0f be       	out	0x3f, r0	; 63
    5c94:	cd bf       	out	0x3d, r28	; 61
    5c96:	ed 01       	movw	r28, r26
    5c98:	08 95       	ret

00005c9a <_exit>:
    5c9a:	f8 94       	cli

00005c9c <__stop_program>:
    5c9c:	ff cf       	rjmp	.-2      	; 0x5c9c <__stop_program>
