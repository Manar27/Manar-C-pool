
ITI_Room.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000038be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  000038be  00003952  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800082  00800082  00003974  2**0
                  ALLOC
  3 .stab         00003c6c  00000000  00000000  00003974  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000017b4  00000000  00000000  000075e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00008d94  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00008ed4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00009044  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000ac8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000bb78  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000c928  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000ca88  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000cd15  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d4e3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 78 07 	jmp	0xef0	; 0xef0 <__vector_10>
      2c:	0c 94 4b 07 	jmp	0xe96	; 0xe96 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee eb       	ldi	r30, 0xBE	; 190
      68:	f8 e3       	ldi	r31, 0x38	; 56
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 38       	cpi	r26, 0x82	; 130
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 e8       	ldi	r26, 0x82	; 130
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 38       	cpi	r26, 0x88	; 136
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 4f 16 	call	0x2c9e	; 0x2c9e <main>
      8a:	0c 94 5d 1c 	jmp	0x38ba	; 0x38ba <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 26 1c 	jmp	0x384c	; 0x384c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa e7       	ldi	r26, 0x7A	; 122
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 42 1c 	jmp	0x3884	; 0x3884 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 32 1c 	jmp	0x3864	; 0x3864 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 4e 1c 	jmp	0x389c	; 0x389c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 32 1c 	jmp	0x3864	; 0x3864 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 4e 1c 	jmp	0x389c	; 0x389c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 26 1c 	jmp	0x384c	; 0x384c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8a e7       	ldi	r24, 0x7A	; 122
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 42 1c 	jmp	0x3884	; 0x3884 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 32 1c 	jmp	0x3864	; 0x3864 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 4e 1c 	jmp	0x389c	; 0x389c <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 32 1c 	jmp	0x3864	; 0x3864 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 4e 1c 	jmp	0x389c	; 0x389c <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 32 1c 	jmp	0x3864	; 0x3864 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 4e 1c 	jmp	0x389c	; 0x389c <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 36 1c 	jmp	0x386c	; 0x386c <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 52 1c 	jmp	0x38a4	; 0x38a4 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <UART_enuInit>:

#include "../Header/UART_int.h"
#include "../Header/UART_prv.h"

UART_tenuErrorStatus  UART_enuInit(UART_tstrConfiguration* Add_pstrConfigue)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <UART_enuInit+0x6>
     b4c:	0f 92       	push	r0
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	9b 83       	std	Y+3, r25	; 0x03
     b54:	8a 83       	std	Y+2, r24	; 0x02
	UART_tenuErrorStatus Local_enuErrorStatus= UART_OK;
     b56:	19 82       	std	Y+1, r1	; 0x01

	if(Add_pstrConfigue== NULL)
     b58:	8a 81       	ldd	r24, Y+2	; 0x02
     b5a:	9b 81       	ldd	r25, Y+3	; 0x03
     b5c:	00 97       	sbiw	r24, 0x00	; 0
     b5e:	19 f4       	brne	.+6      	; 0xb66 <UART_enuInit+0x20>
	{
		Local_enuErrorStatus= UART_NOK;
     b60:	81 e0       	ldi	r24, 0x01	; 1
     b62:	89 83       	std	Y+1, r24	; 0x01
     b64:	5a c0       	rjmp	.+180    	; 0xc1a <UART_enuInit+0xd4>
	}
	else
	{
        UART_u8_UCSRC_REG |=(1<<7);   //URSEL Set to 1
     b66:	a0 e4       	ldi	r26, 0x40	; 64
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	e0 e4       	ldi	r30, 0x40	; 64
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	80 81       	ld	r24, Z
     b70:	80 68       	ori	r24, 0x80	; 128
     b72:	8c 93       	st	X, r24
		// Set Parity bits
         UART_u8_UCSRC_REG |=Add_pstrConfigue->UART_u8ParityBits;
     b74:	a0 e4       	ldi	r26, 0x40	; 64
     b76:	b0 e0       	ldi	r27, 0x00	; 0
     b78:	e0 e4       	ldi	r30, 0x40	; 64
     b7a:	f0 e0       	ldi	r31, 0x00	; 0
     b7c:	90 81       	ld	r25, Z
     b7e:	ea 81       	ldd	r30, Y+2	; 0x02
     b80:	fb 81       	ldd	r31, Y+3	; 0x03
     b82:	80 81       	ld	r24, Z
     b84:	89 2b       	or	r24, r25
     b86:	8c 93       	st	X, r24

         // Set Stop bit
         UART_u8_UCSRC_REG |=Add_pstrConfigue->UART_u8PStopBit;
     b88:	a0 e4       	ldi	r26, 0x40	; 64
     b8a:	b0 e0       	ldi	r27, 0x00	; 0
     b8c:	e0 e4       	ldi	r30, 0x40	; 64
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	90 81       	ld	r25, Z
     b92:	ea 81       	ldd	r30, Y+2	; 0x02
     b94:	fb 81       	ldd	r31, Y+3	; 0x03
     b96:	81 81       	ldd	r24, Z+1	; 0x01
     b98:	89 2b       	or	r24, r25
     b9a:	8c 93       	st	X, r24

         //check 9 bit
         if(Add_pstrConfigue->UART_u8DataBits == UART_u8_NINE_DATA_BITS)
     b9c:	ea 81       	ldd	r30, Y+2	; 0x02
     b9e:	fb 81       	ldd	r31, Y+3	; 0x03
     ba0:	82 81       	ldd	r24, Z+2	; 0x02
     ba2:	86 30       	cpi	r24, 0x06	; 6
     ba4:	39 f4       	brne	.+14     	; 0xbb4 <UART_enuInit+0x6e>
         {
        	 UART_u8_UCSRB_REG |=0x04;
     ba6:	aa e2       	ldi	r26, 0x2A	; 42
     ba8:	b0 e0       	ldi	r27, 0x00	; 0
     baa:	ea e2       	ldi	r30, 0x2A	; 42
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	80 81       	ld	r24, Z
     bb0:	84 60       	ori	r24, 0x04	; 4
     bb2:	8c 93       	st	X, r24
         }

         // Set Character Size
         UART_u8_UCSRC_REG |=Add_pstrConfigue->UART_u8DataBits;
     bb4:	a0 e4       	ldi	r26, 0x40	; 64
     bb6:	b0 e0       	ldi	r27, 0x00	; 0
     bb8:	e0 e4       	ldi	r30, 0x40	; 64
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	90 81       	ld	r25, Z
     bbe:	ea 81       	ldd	r30, Y+2	; 0x02
     bc0:	fb 81       	ldd	r31, Y+3	; 0x03
     bc2:	82 81       	ldd	r24, Z+2	; 0x02
     bc4:	89 2b       	or	r24, r25
     bc6:	8c 93       	st	X, r24

         //Choose Transmite or Receive
         UART_u8_UCSRB_REG |=Add_pstrConfigue->UART_u8Mode;
     bc8:	aa e2       	ldi	r26, 0x2A	; 42
     bca:	b0 e0       	ldi	r27, 0x00	; 0
     bcc:	ea e2       	ldi	r30, 0x2A	; 42
     bce:	f0 e0       	ldi	r31, 0x00	; 0
     bd0:	90 81       	ld	r25, Z
     bd2:	ea 81       	ldd	r30, Y+2	; 0x02
     bd4:	fb 81       	ldd	r31, Y+3	; 0x03
     bd6:	83 81       	ldd	r24, Z+3	; 0x03
     bd8:	89 2b       	or	r24, r25
     bda:	8c 93       	st	X, r24

         // set Baud Rate
         UART_u8_UCSRC_REG &=~(1<<7);   //URSEL Set to 0
     bdc:	a0 e4       	ldi	r26, 0x40	; 64
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	e0 e4       	ldi	r30, 0x40	; 64
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	8f 77       	andi	r24, 0x7F	; 127
     be8:	8c 93       	st	X, r24
         UART_u8_UBRRL_REG |= (u8)(Add_pstrConfigue->UART_u16BaudRate);
     bea:	a9 e2       	ldi	r26, 0x29	; 41
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	e9 e2       	ldi	r30, 0x29	; 41
     bf0:	f0 e0       	ldi	r31, 0x00	; 0
     bf2:	20 81       	ld	r18, Z
     bf4:	ea 81       	ldd	r30, Y+2	; 0x02
     bf6:	fb 81       	ldd	r31, Y+3	; 0x03
     bf8:	84 81       	ldd	r24, Z+4	; 0x04
     bfa:	95 81       	ldd	r25, Z+5	; 0x05
     bfc:	82 2b       	or	r24, r18
     bfe:	8c 93       	st	X, r24
         UART_u8_UBRRH_REG |= (u8)((Add_pstrConfigue->UART_u16BaudRate)>>8);
     c00:	a0 e4       	ldi	r26, 0x40	; 64
     c02:	b0 e0       	ldi	r27, 0x00	; 0
     c04:	e0 e4       	ldi	r30, 0x40	; 64
     c06:	f0 e0       	ldi	r31, 0x00	; 0
     c08:	20 81       	ld	r18, Z
     c0a:	ea 81       	ldd	r30, Y+2	; 0x02
     c0c:	fb 81       	ldd	r31, Y+3	; 0x03
     c0e:	84 81       	ldd	r24, Z+4	; 0x04
     c10:	95 81       	ldd	r25, Z+5	; 0x05
     c12:	89 2f       	mov	r24, r25
     c14:	99 27       	eor	r25, r25
     c16:	82 2b       	or	r24, r18
     c18:	8c 93       	st	X, r24

	}

	return Local_enuErrorStatus;
     c1a:	89 81       	ldd	r24, Y+1	; 0x01
}
     c1c:	0f 90       	pop	r0
     c1e:	0f 90       	pop	r0
     c20:	0f 90       	pop	r0
     c22:	cf 91       	pop	r28
     c24:	df 91       	pop	r29
     c26:	08 95       	ret

00000c28 <UART_enuTransmite>:

UART_tenuErrorStatus  UART_enuTransmite(u16 Copy_pu16Data)
{
     c28:	df 93       	push	r29
     c2a:	cf 93       	push	r28
     c2c:	00 d0       	rcall	.+0      	; 0xc2e <UART_enuTransmite+0x6>
     c2e:	0f 92       	push	r0
     c30:	cd b7       	in	r28, 0x3d	; 61
     c32:	de b7       	in	r29, 0x3e	; 62
     c34:	9b 83       	std	Y+3, r25	; 0x03
     c36:	8a 83       	std	Y+2, r24	; 0x02
	UART_tenuErrorStatus Local_enuErrorStatus= UART_OK;
     c38:	19 82       	std	Y+1, r1	; 0x01
	}
	else
	{

	       // poling on the flag >>> wait for UDR to be empty
     while(((UART_u8_UCSRA_REG >> 5) & 0x01 )== 0);
     c3a:	eb e2       	ldi	r30, 0x2B	; 43
     c3c:	f0 e0       	ldi	r31, 0x00	; 0
     c3e:	80 81       	ld	r24, Z
     c40:	82 95       	swap	r24
     c42:	86 95       	lsr	r24
     c44:	87 70       	andi	r24, 0x07	; 7
     c46:	88 2f       	mov	r24, r24
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	81 70       	andi	r24, 0x01	; 1
     c4c:	90 70       	andi	r25, 0x00	; 0
     c4e:	00 97       	sbiw	r24, 0x00	; 0
     c50:	a1 f3       	breq	.-24     	; 0xc3a <UART_enuTransmite+0x12>

     UART_u8_UCSRB_REG &= ~(1<<0);  // Clear TXB8
     c52:	aa e2       	ldi	r26, 0x2A	; 42
     c54:	b0 e0       	ldi	r27, 0x00	; 0
     c56:	ea e2       	ldi	r30, 0x2A	; 42
     c58:	f0 e0       	ldi	r31, 0x00	; 0
     c5a:	80 81       	ld	r24, Z
     c5c:	8e 7f       	andi	r24, 0xFE	; 254
     c5e:	8c 93       	st	X, r24
     if ( Copy_pu16Data & 0x0100 )
     c60:	8a 81       	ldd	r24, Y+2	; 0x02
     c62:	9b 81       	ldd	r25, Y+3	; 0x03
     c64:	80 70       	andi	r24, 0x00	; 0
     c66:	91 70       	andi	r25, 0x01	; 1
     c68:	00 97       	sbiw	r24, 0x00	; 0
     c6a:	39 f0       	breq	.+14     	; 0xc7a <UART_enuTransmite+0x52>
     {
    	 UART_u8_UCSRB_REG |= 0x01; //Set TXB8
     c6c:	aa e2       	ldi	r26, 0x2A	; 42
     c6e:	b0 e0       	ldi	r27, 0x00	; 0
     c70:	ea e2       	ldi	r30, 0x2A	; 42
     c72:	f0 e0       	ldi	r31, 0x00	; 0
     c74:	80 81       	ld	r24, Z
     c76:	81 60       	ori	r24, 0x01	; 1
     c78:	8c 93       	st	X, r24
     }
     /* Put data into UDR Register */
     UART_u8_UDR_REG = (u8)(Copy_pu16Data);
     c7a:	ec e2       	ldi	r30, 0x2C	; 44
     c7c:	f0 e0       	ldi	r31, 0x00	; 0
     c7e:	8a 81       	ldd	r24, Y+2	; 0x02
     c80:	80 83       	st	Z, r24


	}

	return Local_enuErrorStatus;
     c82:	89 81       	ldd	r24, Y+1	; 0x01
}
     c84:	0f 90       	pop	r0
     c86:	0f 90       	pop	r0
     c88:	0f 90       	pop	r0
     c8a:	cf 91       	pop	r28
     c8c:	df 91       	pop	r29
     c8e:	08 95       	ret

00000c90 <UART_enuReceive>:

UART_tenuErrorStatus  UART_enuReceive(u16* Add_pu16Data)
{
     c90:	df 93       	push	r29
     c92:	cf 93       	push	r28
     c94:	00 d0       	rcall	.+0      	; 0xc96 <UART_enuReceive+0x6>
     c96:	0f 92       	push	r0
     c98:	cd b7       	in	r28, 0x3d	; 61
     c9a:	de b7       	in	r29, 0x3e	; 62
     c9c:	9b 83       	std	Y+3, r25	; 0x03
     c9e:	8a 83       	std	Y+2, r24	; 0x02
	UART_tenuErrorStatus Local_enuErrorStatus= UART_OK;
     ca0:	19 82       	std	Y+1, r1	; 0x01

	if(Add_pu16Data==NULL)
     ca2:	8a 81       	ldd	r24, Y+2	; 0x02
     ca4:	9b 81       	ldd	r25, Y+3	; 0x03
     ca6:	00 97       	sbiw	r24, 0x00	; 0
     ca8:	19 f4       	brne	.+6      	; 0xcb0 <UART_enuReceive+0x20>
	{
		Local_enuErrorStatus= UART_NOK;
     caa:	81 e0       	ldi	r24, 0x01	; 1
     cac:	89 83       	std	Y+1, r24	; 0x01
     cae:	3c c0       	rjmp	.+120    	; 0xd28 <UART_enuReceive+0x98>
	}
	else
	{

	       // poling on the flag >>> wait for data to be received
	     while(((UART_u8_UCSRA_REG >> 7) & 0x01 )== 0);
     cb0:	eb e2       	ldi	r30, 0x2B	; 43
     cb2:	f0 e0       	ldi	r31, 0x00	; 0
     cb4:	80 81       	ld	r24, Z
     cb6:	88 23       	and	r24, r24
     cb8:	dc f7       	brge	.-10     	; 0xcb0 <UART_enuReceive+0x20>

	      // check frame error and Data over Run error
	     if(((UART_u8_UCSRA_REG>>3) & 0x01) || ((UART_u8_UCSRA_REG>>4) & 0x01))
     cba:	eb e2       	ldi	r30, 0x2B	; 43
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	80 81       	ld	r24, Z
     cc0:	86 95       	lsr	r24
     cc2:	86 95       	lsr	r24
     cc4:	86 95       	lsr	r24
     cc6:	88 2f       	mov	r24, r24
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	81 70       	andi	r24, 0x01	; 1
     ccc:	90 70       	andi	r25, 0x00	; 0
     cce:	88 23       	and	r24, r24
     cd0:	59 f4       	brne	.+22     	; 0xce8 <UART_enuReceive+0x58>
     cd2:	eb e2       	ldi	r30, 0x2B	; 43
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	80 81       	ld	r24, Z
     cd8:	82 95       	swap	r24
     cda:	8f 70       	andi	r24, 0x0F	; 15
     cdc:	88 2f       	mov	r24, r24
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	81 70       	andi	r24, 0x01	; 1
     ce2:	90 70       	andi	r25, 0x00	; 0
     ce4:	88 23       	and	r24, r24
     ce6:	19 f0       	breq	.+6      	; 0xcee <UART_enuReceive+0x5e>
	     {
	    	 Local_enuErrorStatus= UART_NOK;
     ce8:	81 e0       	ldi	r24, 0x01	; 1
     cea:	89 83       	std	Y+1, r24	; 0x01
     cec:	1d c0       	rjmp	.+58     	; 0xd28 <UART_enuReceive+0x98>
	     }
	     else
	     {
	    	 *Add_pu16Data =(((UART_u8_UCSRB_REG>>1) & 0X01) << 8); // get bit number 9
     cee:	ea e2       	ldi	r30, 0x2A	; 42
     cf0:	f0 e0       	ldi	r31, 0x00	; 0
     cf2:	80 81       	ld	r24, Z
     cf4:	86 95       	lsr	r24
     cf6:	88 2f       	mov	r24, r24
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	81 70       	andi	r24, 0x01	; 1
     cfc:	90 70       	andi	r25, 0x00	; 0
     cfe:	98 2f       	mov	r25, r24
     d00:	88 27       	eor	r24, r24
     d02:	ea 81       	ldd	r30, Y+2	; 0x02
     d04:	fb 81       	ldd	r31, Y+3	; 0x03
     d06:	91 83       	std	Z+1, r25	; 0x01
     d08:	80 83       	st	Z, r24
	    	 	    	 *Add_pu16Data |= UART_u8_UDR_REG;     // get Lowbyte
     d0a:	ea 81       	ldd	r30, Y+2	; 0x02
     d0c:	fb 81       	ldd	r31, Y+3	; 0x03
     d0e:	20 81       	ld	r18, Z
     d10:	31 81       	ldd	r19, Z+1	; 0x01
     d12:	ec e2       	ldi	r30, 0x2C	; 44
     d14:	f0 e0       	ldi	r31, 0x00	; 0
     d16:	80 81       	ld	r24, Z
     d18:	88 2f       	mov	r24, r24
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	82 2b       	or	r24, r18
     d1e:	93 2b       	or	r25, r19
     d20:	ea 81       	ldd	r30, Y+2	; 0x02
     d22:	fb 81       	ldd	r31, Y+3	; 0x03
     d24:	91 83       	std	Z+1, r25	; 0x01
     d26:	80 83       	st	Z, r24
	     }
	}

	return Local_enuErrorStatus;
     d28:	89 81       	ldd	r24, Y+1	; 0x01
}
     d2a:	0f 90       	pop	r0
     d2c:	0f 90       	pop	r0
     d2e:	0f 90       	pop	r0
     d30:	cf 91       	pop	r28
     d32:	df 91       	pop	r29
     d34:	08 95       	ret

00000d36 <Timer0_VoidInitNormal>:

static void (*GPTF_Normal) (void) = NULL;
static void (*GPTF_CTC) (void) = NULL;

void Timer0_VoidInitNormal (u8 Local_PreLoad)
{
     d36:	df 93       	push	r29
     d38:	cf 93       	push	r28
     d3a:	0f 92       	push	r0
     d3c:	cd b7       	in	r28, 0x3d	; 61
     d3e:	de b7       	in	r29, 0x3e	; 62
     d40:	89 83       	std	Y+1, r24	; 0x01
	Timer0_TCNT0 = Local_PreLoad;
     d42:	e2 e5       	ldi	r30, 0x52	; 82
     d44:	f0 e0       	ldi	r31, 0x00	; 0
     d46:	89 81       	ldd	r24, Y+1	; 0x01
     d48:	80 83       	st	Z, r24
	/*select normal mode*/
	clear_Bit(Timer0_TCCR0,Timer0_WGM01);
     d4a:	a3 e5       	ldi	r26, 0x53	; 83
     d4c:	b0 e0       	ldi	r27, 0x00	; 0
     d4e:	e3 e5       	ldi	r30, 0x53	; 83
     d50:	f0 e0       	ldi	r31, 0x00	; 0
     d52:	80 81       	ld	r24, Z
     d54:	87 7f       	andi	r24, 0xF7	; 247
     d56:	8c 93       	st	X, r24
	clear_Bit(Timer0_TCCR0,Timer0_WGM00);
     d58:	a3 e5       	ldi	r26, 0x53	; 83
     d5a:	b0 e0       	ldi	r27, 0x00	; 0
     d5c:	e3 e5       	ldi	r30, 0x53	; 83
     d5e:	f0 e0       	ldi	r31, 0x00	; 0
     d60:	80 81       	ld	r24, Z
     d62:	8f 7b       	andi	r24, 0xBF	; 191
     d64:	8c 93       	st	X, r24
	/*Enable overflow interrupt*/
	Set_Bit(Timer0_TIMSK,Timer0_TOIE0);
     d66:	a9 e5       	ldi	r26, 0x59	; 89
     d68:	b0 e0       	ldi	r27, 0x00	; 0
     d6a:	e9 e5       	ldi	r30, 0x59	; 89
     d6c:	f0 e0       	ldi	r31, 0x00	; 0
     d6e:	80 81       	ld	r24, Z
     d70:	81 60       	ori	r24, 0x01	; 1
     d72:	8c 93       	st	X, r24
#elif Timer0_Prescaler == Prescaler256
	Set_Bit(Timer0_TCCR0,Timer0_CS02);
	clear_Bit(Timer0_TCCR0,Timer0_CS01);
	clear_Bit(Timer0_TCCR0,Timer0_CS00);
#elif Timer0_Prescaler == Prescaler1024
	Set_Bit(Timer0_TCCR0,Timer0_CS02);
     d74:	a3 e5       	ldi	r26, 0x53	; 83
     d76:	b0 e0       	ldi	r27, 0x00	; 0
     d78:	e3 e5       	ldi	r30, 0x53	; 83
     d7a:	f0 e0       	ldi	r31, 0x00	; 0
     d7c:	80 81       	ld	r24, Z
     d7e:	84 60       	ori	r24, 0x04	; 4
     d80:	8c 93       	st	X, r24
	clear_Bit(Timer0_TCCR0,Timer0_CS01);
     d82:	a3 e5       	ldi	r26, 0x53	; 83
     d84:	b0 e0       	ldi	r27, 0x00	; 0
     d86:	e3 e5       	ldi	r30, 0x53	; 83
     d88:	f0 e0       	ldi	r31, 0x00	; 0
     d8a:	80 81       	ld	r24, Z
     d8c:	8d 7f       	andi	r24, 0xFD	; 253
     d8e:	8c 93       	st	X, r24
	Set_Bit(Timer0_TCCR0,Timer0_CS00);
     d90:	a3 e5       	ldi	r26, 0x53	; 83
     d92:	b0 e0       	ldi	r27, 0x00	; 0
     d94:	e3 e5       	ldi	r30, 0x53	; 83
     d96:	f0 e0       	ldi	r31, 0x00	; 0
     d98:	80 81       	ld	r24, Z
     d9a:	81 60       	ori	r24, 0x01	; 1
     d9c:	8c 93       	st	X, r24
	Set_Bit(Timer0_TCCR0,Timer0_CS00);

#endif

#if OC0_Mode == OC0_Toggle
	Set_Bit(Timer0_TCCR0,Timer0_COM00);
     d9e:	a3 e5       	ldi	r26, 0x53	; 83
     da0:	b0 e0       	ldi	r27, 0x00	; 0
     da2:	e3 e5       	ldi	r30, 0x53	; 83
     da4:	f0 e0       	ldi	r31, 0x00	; 0
     da6:	80 81       	ld	r24, Z
     da8:	80 61       	ori	r24, 0x10	; 16
     daa:	8c 93       	st	X, r24
	clear_Bit(Timer0_TCCR0,Timer0_COM01);
     dac:	a3 e5       	ldi	r26, 0x53	; 83
     dae:	b0 e0       	ldi	r27, 0x00	; 0
     db0:	e3 e5       	ldi	r30, 0x53	; 83
     db2:	f0 e0       	ldi	r31, 0x00	; 0
     db4:	80 81       	ld	r24, Z
     db6:	8f 7d       	andi	r24, 0xDF	; 223
     db8:	8c 93       	st	X, r24
	Set_Bit(Timer0_TCCR0,Timer0_COM01);
#elif OC0_Mode == OC0_Toggle
	Set_Bit(Timer0_TCCR0,Timer0_COM00);
	clear_Bit(Timer0_TCCR0,Timer0_COM01);
#endif
}
     dba:	0f 90       	pop	r0
     dbc:	cf 91       	pop	r28
     dbe:	df 91       	pop	r29
     dc0:	08 95       	ret

00000dc2 <Timer0_VoidInitCTC>:
void Timer0_VoidInitCTC (u8 Local_CompareValue)
{
     dc2:	df 93       	push	r29
     dc4:	cf 93       	push	r28
     dc6:	0f 92       	push	r0
     dc8:	cd b7       	in	r28, 0x3d	; 61
     dca:	de b7       	in	r29, 0x3e	; 62
     dcc:	89 83       	std	Y+1, r24	; 0x01
	Timer0_OCR0 = Local_CompareValue;
     dce:	ec e5       	ldi	r30, 0x5C	; 92
     dd0:	f0 e0       	ldi	r31, 0x00	; 0
     dd2:	89 81       	ldd	r24, Y+1	; 0x01
     dd4:	80 83       	st	Z, r24
	/*Select CTC mode*/
	Set_Bit(Timer0_TCCR0,Timer0_WGM01);
     dd6:	a3 e5       	ldi	r26, 0x53	; 83
     dd8:	b0 e0       	ldi	r27, 0x00	; 0
     dda:	e3 e5       	ldi	r30, 0x53	; 83
     ddc:	f0 e0       	ldi	r31, 0x00	; 0
     dde:	80 81       	ld	r24, Z
     de0:	88 60       	ori	r24, 0x08	; 8
     de2:	8c 93       	st	X, r24
	clear_Bit(Timer0_TCCR0,Timer0_WGM00);
     de4:	a3 e5       	ldi	r26, 0x53	; 83
     de6:	b0 e0       	ldi	r27, 0x00	; 0
     de8:	e3 e5       	ldi	r30, 0x53	; 83
     dea:	f0 e0       	ldi	r31, 0x00	; 0
     dec:	80 81       	ld	r24, Z
     dee:	8f 7b       	andi	r24, 0xBF	; 191
     df0:	8c 93       	st	X, r24
	/*Enable interrupt on compare match*/
	Set_Bit(Timer0_TIMSK,Timer0_OCIE0);
     df2:	a9 e5       	ldi	r26, 0x59	; 89
     df4:	b0 e0       	ldi	r27, 0x00	; 0
     df6:	e9 e5       	ldi	r30, 0x59	; 89
     df8:	f0 e0       	ldi	r31, 0x00	; 0
     dfa:	80 81       	ld	r24, Z
     dfc:	82 60       	ori	r24, 0x02	; 2
     dfe:	8c 93       	st	X, r24
#elif Timer0_Prescaler == Prescaler256
	Set_Bit(Timer0_TCCR0,Timer0_CS02);
	clear_Bit(Timer0_TCCR0,Timer0_CS01);
	clear_Bit(Timer0_TCCR0,Timer0_CS00);
#elif Timer0_Prescaler == Prescaler1024
	Set_Bit(Timer0_TCCR0,Timer0_CS02);
     e00:	a3 e5       	ldi	r26, 0x53	; 83
     e02:	b0 e0       	ldi	r27, 0x00	; 0
     e04:	e3 e5       	ldi	r30, 0x53	; 83
     e06:	f0 e0       	ldi	r31, 0x00	; 0
     e08:	80 81       	ld	r24, Z
     e0a:	84 60       	ori	r24, 0x04	; 4
     e0c:	8c 93       	st	X, r24
	clear_Bit(Timer0_TCCR0,Timer0_CS01);
     e0e:	a3 e5       	ldi	r26, 0x53	; 83
     e10:	b0 e0       	ldi	r27, 0x00	; 0
     e12:	e3 e5       	ldi	r30, 0x53	; 83
     e14:	f0 e0       	ldi	r31, 0x00	; 0
     e16:	80 81       	ld	r24, Z
     e18:	8d 7f       	andi	r24, 0xFD	; 253
     e1a:	8c 93       	st	X, r24
	Set_Bit(Timer0_TCCR0,Timer0_CS00);
     e1c:	a3 e5       	ldi	r26, 0x53	; 83
     e1e:	b0 e0       	ldi	r27, 0x00	; 0
     e20:	e3 e5       	ldi	r30, 0x53	; 83
     e22:	f0 e0       	ldi	r31, 0x00	; 0
     e24:	80 81       	ld	r24, Z
     e26:	81 60       	ori	r24, 0x01	; 1
     e28:	8c 93       	st	X, r24
	Set_Bit(Timer0_TCCR0,Timer0_CS02);
	Set_Bit(Timer0_TCCR0,Timer0_CS01);
	Set_Bit(Timer0_TCCR0,Timer0_CS00);

#endif
}
     e2a:	0f 90       	pop	r0
     e2c:	cf 91       	pop	r28
     e2e:	df 91       	pop	r29
     e30:	08 95       	ret

00000e32 <Timer0_VoidSetPreload>:
void Timer0_VoidSetPreload(u8 Local_Preload)
{
     e32:	df 93       	push	r29
     e34:	cf 93       	push	r28
     e36:	0f 92       	push	r0
     e38:	cd b7       	in	r28, 0x3d	; 61
     e3a:	de b7       	in	r29, 0x3e	; 62
     e3c:	89 83       	std	Y+1, r24	; 0x01
	Timer0_TCNT0 = Local_Preload;
     e3e:	e2 e5       	ldi	r30, 0x52	; 82
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	89 81       	ldd	r24, Y+1	; 0x01
     e44:	80 83       	st	Z, r24
}
     e46:	0f 90       	pop	r0
     e48:	cf 91       	pop	r28
     e4a:	df 91       	pop	r29
     e4c:	08 95       	ret

00000e4e <Timer0_CallBackFunctionNormal>:
void Timer0_CallBackFunctionNormal(void (*PTF)(void))
{
     e4e:	df 93       	push	r29
     e50:	cf 93       	push	r28
     e52:	00 d0       	rcall	.+0      	; 0xe54 <Timer0_CallBackFunctionNormal+0x6>
     e54:	cd b7       	in	r28, 0x3d	; 61
     e56:	de b7       	in	r29, 0x3e	; 62
     e58:	9a 83       	std	Y+2, r25	; 0x02
     e5a:	89 83       	std	Y+1, r24	; 0x01
	GPTF_Normal = PTF;
     e5c:	89 81       	ldd	r24, Y+1	; 0x01
     e5e:	9a 81       	ldd	r25, Y+2	; 0x02
     e60:	90 93 83 00 	sts	0x0083, r25
     e64:	80 93 82 00 	sts	0x0082, r24
}
     e68:	0f 90       	pop	r0
     e6a:	0f 90       	pop	r0
     e6c:	cf 91       	pop	r28
     e6e:	df 91       	pop	r29
     e70:	08 95       	ret

00000e72 <Timer0_CallBackFunctionCTC>:
void Timer0_CallBackFunctionCTC(void (*PTF)(void))
{
     e72:	df 93       	push	r29
     e74:	cf 93       	push	r28
     e76:	00 d0       	rcall	.+0      	; 0xe78 <Timer0_CallBackFunctionCTC+0x6>
     e78:	cd b7       	in	r28, 0x3d	; 61
     e7a:	de b7       	in	r29, 0x3e	; 62
     e7c:	9a 83       	std	Y+2, r25	; 0x02
     e7e:	89 83       	std	Y+1, r24	; 0x01
	GPTF_CTC = PTF;
     e80:	89 81       	ldd	r24, Y+1	; 0x01
     e82:	9a 81       	ldd	r25, Y+2	; 0x02
     e84:	90 93 85 00 	sts	0x0085, r25
     e88:	80 93 84 00 	sts	0x0084, r24
}
     e8c:	0f 90       	pop	r0
     e8e:	0f 90       	pop	r0
     e90:	cf 91       	pop	r28
     e92:	df 91       	pop	r29
     e94:	08 95       	ret

00000e96 <__vector_11>:

void __vector_11(void)
{
     e96:	1f 92       	push	r1
     e98:	0f 92       	push	r0
     e9a:	0f b6       	in	r0, 0x3f	; 63
     e9c:	0f 92       	push	r0
     e9e:	11 24       	eor	r1, r1
     ea0:	2f 93       	push	r18
     ea2:	3f 93       	push	r19
     ea4:	4f 93       	push	r20
     ea6:	5f 93       	push	r21
     ea8:	6f 93       	push	r22
     eaa:	7f 93       	push	r23
     eac:	8f 93       	push	r24
     eae:	9f 93       	push	r25
     eb0:	af 93       	push	r26
     eb2:	bf 93       	push	r27
     eb4:	ef 93       	push	r30
     eb6:	ff 93       	push	r31
     eb8:	df 93       	push	r29
     eba:	cf 93       	push	r28
     ebc:	cd b7       	in	r28, 0x3d	; 61
     ebe:	de b7       	in	r29, 0x3e	; 62
	GPTF_Normal();
     ec0:	e0 91 82 00 	lds	r30, 0x0082
     ec4:	f0 91 83 00 	lds	r31, 0x0083
     ec8:	09 95       	icall
}
     eca:	cf 91       	pop	r28
     ecc:	df 91       	pop	r29
     ece:	ff 91       	pop	r31
     ed0:	ef 91       	pop	r30
     ed2:	bf 91       	pop	r27
     ed4:	af 91       	pop	r26
     ed6:	9f 91       	pop	r25
     ed8:	8f 91       	pop	r24
     eda:	7f 91       	pop	r23
     edc:	6f 91       	pop	r22
     ede:	5f 91       	pop	r21
     ee0:	4f 91       	pop	r20
     ee2:	3f 91       	pop	r19
     ee4:	2f 91       	pop	r18
     ee6:	0f 90       	pop	r0
     ee8:	0f be       	out	0x3f, r0	; 63
     eea:	0f 90       	pop	r0
     eec:	1f 90       	pop	r1
     eee:	18 95       	reti

00000ef0 <__vector_10>:
void __vector_10(void)
{
     ef0:	1f 92       	push	r1
     ef2:	0f 92       	push	r0
     ef4:	0f b6       	in	r0, 0x3f	; 63
     ef6:	0f 92       	push	r0
     ef8:	11 24       	eor	r1, r1
     efa:	2f 93       	push	r18
     efc:	3f 93       	push	r19
     efe:	4f 93       	push	r20
     f00:	5f 93       	push	r21
     f02:	6f 93       	push	r22
     f04:	7f 93       	push	r23
     f06:	8f 93       	push	r24
     f08:	9f 93       	push	r25
     f0a:	af 93       	push	r26
     f0c:	bf 93       	push	r27
     f0e:	ef 93       	push	r30
     f10:	ff 93       	push	r31
     f12:	df 93       	push	r29
     f14:	cf 93       	push	r28
     f16:	cd b7       	in	r28, 0x3d	; 61
     f18:	de b7       	in	r29, 0x3e	; 62
	GPTF_CTC();
     f1a:	e0 91 84 00 	lds	r30, 0x0084
     f1e:	f0 91 85 00 	lds	r31, 0x0085
     f22:	09 95       	icall
}
     f24:	cf 91       	pop	r28
     f26:	df 91       	pop	r29
     f28:	ff 91       	pop	r31
     f2a:	ef 91       	pop	r30
     f2c:	bf 91       	pop	r27
     f2e:	af 91       	pop	r26
     f30:	9f 91       	pop	r25
     f32:	8f 91       	pop	r24
     f34:	7f 91       	pop	r23
     f36:	6f 91       	pop	r22
     f38:	5f 91       	pop	r21
     f3a:	4f 91       	pop	r20
     f3c:	3f 91       	pop	r19
     f3e:	2f 91       	pop	r18
     f40:	0f 90       	pop	r0
     f42:	0f be       	out	0x3f, r0	; 63
     f44:	0f 90       	pop	r0
     f46:	1f 90       	pop	r1
     f48:	18 95       	reti

00000f4a <GIE_VoidEnable>:

#include "../Header/GIE_Register.h"
#include "../Header/GIE_interface.h"

void GIE_VoidEnable (void)
{
     f4a:	df 93       	push	r29
     f4c:	cf 93       	push	r28
     f4e:	cd b7       	in	r28, 0x3d	; 61
     f50:	de b7       	in	r29, 0x3e	; 62
	Set_Bit(GIE_SREG,GIE_SREG_I);
     f52:	af e5       	ldi	r26, 0x5F	; 95
     f54:	b0 e0       	ldi	r27, 0x00	; 0
     f56:	ef e5       	ldi	r30, 0x5F	; 95
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	80 81       	ld	r24, Z
     f5c:	80 68       	ori	r24, 0x80	; 128
     f5e:	8c 93       	st	X, r24
}
     f60:	cf 91       	pop	r28
     f62:	df 91       	pop	r29
     f64:	08 95       	ret

00000f66 <GIE_VoidDisable>:

void GIE_VoidDisable (void)
{
     f66:	df 93       	push	r29
     f68:	cf 93       	push	r28
     f6a:	cd b7       	in	r28, 0x3d	; 61
     f6c:	de b7       	in	r29, 0x3e	; 62
	clear_Bit(GIE_SREG,GIE_SREG_I);
     f6e:	af e5       	ldi	r26, 0x5F	; 95
     f70:	b0 e0       	ldi	r27, 0x00	; 0
     f72:	ef e5       	ldi	r30, 0x5F	; 95
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	80 81       	ld	r24, Z
     f78:	8f 77       	andi	r24, 0x7F	; 127
     f7a:	8c 93       	st	X, r24
}
     f7c:	cf 91       	pop	r28
     f7e:	df 91       	pop	r29
     f80:	08 95       	ret

00000f82 <DIO_VoidSetPinDir>:
#include "../Header/DIO_interface.h"
#include "../Header/DIO_Private.h"
#include "../Header/DIO_Register.h"

void DIO_VoidSetPinDir(u8 Local_Groupname, u8 Local_PinNumber, u8 Local_DirectionState)
{
     f82:	df 93       	push	r29
     f84:	cf 93       	push	r28
     f86:	cd b7       	in	r28, 0x3d	; 61
     f88:	de b7       	in	r29, 0x3e	; 62
     f8a:	27 97       	sbiw	r28, 0x07	; 7
     f8c:	0f b6       	in	r0, 0x3f	; 63
     f8e:	f8 94       	cli
     f90:	de bf       	out	0x3e, r29	; 62
     f92:	0f be       	out	0x3f, r0	; 63
     f94:	cd bf       	out	0x3d, r28	; 61
     f96:	89 83       	std	Y+1, r24	; 0x01
     f98:	6a 83       	std	Y+2, r22	; 0x02
     f9a:	4b 83       	std	Y+3, r20	; 0x03
	if (Local_Groupname <= Group_D && Local_PinNumber <= Pin_D7)
     f9c:	89 81       	ldd	r24, Y+1	; 0x01
     f9e:	85 30       	cpi	r24, 0x05	; 5
     fa0:	08 f0       	brcs	.+2      	; 0xfa4 <DIO_VoidSetPinDir+0x22>
     fa2:	f0 c0       	rjmp	.+480    	; 0x1184 <DIO_VoidSetPinDir+0x202>
     fa4:	8a 81       	ldd	r24, Y+2	; 0x02
     fa6:	88 30       	cpi	r24, 0x08	; 8
     fa8:	08 f0       	brcs	.+2      	; 0xfac <DIO_VoidSetPinDir+0x2a>
     faa:	ec c0       	rjmp	.+472    	; 0x1184 <DIO_VoidSetPinDir+0x202>
	{
		if (Local_DirectionState == Input)
     fac:	8b 81       	ldd	r24, Y+3	; 0x03
     fae:	88 23       	and	r24, r24
     fb0:	09 f0       	breq	.+2      	; 0xfb4 <DIO_VoidSetPinDir+0x32>
     fb2:	75 c0       	rjmp	.+234    	; 0x109e <DIO_VoidSetPinDir+0x11c>
		{
			switch (Local_Groupname)
     fb4:	89 81       	ldd	r24, Y+1	; 0x01
     fb6:	28 2f       	mov	r18, r24
     fb8:	30 e0       	ldi	r19, 0x00	; 0
     fba:	3f 83       	std	Y+7, r19	; 0x07
     fbc:	2e 83       	std	Y+6, r18	; 0x06
     fbe:	8e 81       	ldd	r24, Y+6	; 0x06
     fc0:	9f 81       	ldd	r25, Y+7	; 0x07
     fc2:	82 30       	cpi	r24, 0x02	; 2
     fc4:	91 05       	cpc	r25, r1
     fc6:	61 f1       	breq	.+88     	; 0x1020 <DIO_VoidSetPinDir+0x9e>
     fc8:	2e 81       	ldd	r18, Y+6	; 0x06
     fca:	3f 81       	ldd	r19, Y+7	; 0x07
     fcc:	23 30       	cpi	r18, 0x03	; 3
     fce:	31 05       	cpc	r19, r1
     fd0:	34 f4       	brge	.+12     	; 0xfde <DIO_VoidSetPinDir+0x5c>
     fd2:	8e 81       	ldd	r24, Y+6	; 0x06
     fd4:	9f 81       	ldd	r25, Y+7	; 0x07
     fd6:	81 30       	cpi	r24, 0x01	; 1
     fd8:	91 05       	cpc	r25, r1
     fda:	69 f0       	breq	.+26     	; 0xff6 <DIO_VoidSetPinDir+0x74>
     fdc:	d3 c0       	rjmp	.+422    	; 0x1184 <DIO_VoidSetPinDir+0x202>
     fde:	2e 81       	ldd	r18, Y+6	; 0x06
     fe0:	3f 81       	ldd	r19, Y+7	; 0x07
     fe2:	23 30       	cpi	r18, 0x03	; 3
     fe4:	31 05       	cpc	r19, r1
     fe6:	89 f1       	breq	.+98     	; 0x104a <DIO_VoidSetPinDir+0xc8>
     fe8:	8e 81       	ldd	r24, Y+6	; 0x06
     fea:	9f 81       	ldd	r25, Y+7	; 0x07
     fec:	84 30       	cpi	r24, 0x04	; 4
     fee:	91 05       	cpc	r25, r1
     ff0:	09 f4       	brne	.+2      	; 0xff4 <DIO_VoidSetPinDir+0x72>
     ff2:	40 c0       	rjmp	.+128    	; 0x1074 <DIO_VoidSetPinDir+0xf2>
     ff4:	c7 c0       	rjmp	.+398    	; 0x1184 <DIO_VoidSetPinDir+0x202>
			{
				case Group_A :
					clear_Bit(DIO_DDRA, Local_PinNumber);
     ff6:	aa e3       	ldi	r26, 0x3A	; 58
     ff8:	b0 e0       	ldi	r27, 0x00	; 0
     ffa:	ea e3       	ldi	r30, 0x3A	; 58
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	80 81       	ld	r24, Z
    1000:	48 2f       	mov	r20, r24
    1002:	8a 81       	ldd	r24, Y+2	; 0x02
    1004:	28 2f       	mov	r18, r24
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	02 2e       	mov	r0, r18
    100e:	02 c0       	rjmp	.+4      	; 0x1014 <DIO_VoidSetPinDir+0x92>
    1010:	88 0f       	add	r24, r24
    1012:	99 1f       	adc	r25, r25
    1014:	0a 94       	dec	r0
    1016:	e2 f7       	brpl	.-8      	; 0x1010 <DIO_VoidSetPinDir+0x8e>
    1018:	80 95       	com	r24
    101a:	84 23       	and	r24, r20
    101c:	8c 93       	st	X, r24
    101e:	b2 c0       	rjmp	.+356    	; 0x1184 <DIO_VoidSetPinDir+0x202>
					break;
				case Group_B :
					clear_Bit (DIO_DDRB, Local_PinNumber);
    1020:	a7 e3       	ldi	r26, 0x37	; 55
    1022:	b0 e0       	ldi	r27, 0x00	; 0
    1024:	e7 e3       	ldi	r30, 0x37	; 55
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	80 81       	ld	r24, Z
    102a:	48 2f       	mov	r20, r24
    102c:	8a 81       	ldd	r24, Y+2	; 0x02
    102e:	28 2f       	mov	r18, r24
    1030:	30 e0       	ldi	r19, 0x00	; 0
    1032:	81 e0       	ldi	r24, 0x01	; 1
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	02 2e       	mov	r0, r18
    1038:	02 c0       	rjmp	.+4      	; 0x103e <DIO_VoidSetPinDir+0xbc>
    103a:	88 0f       	add	r24, r24
    103c:	99 1f       	adc	r25, r25
    103e:	0a 94       	dec	r0
    1040:	e2 f7       	brpl	.-8      	; 0x103a <DIO_VoidSetPinDir+0xb8>
    1042:	80 95       	com	r24
    1044:	84 23       	and	r24, r20
    1046:	8c 93       	st	X, r24
    1048:	9d c0       	rjmp	.+314    	; 0x1184 <DIO_VoidSetPinDir+0x202>
					break;
				case Group_C :
					clear_Bit (DIO_DDRC, Local_PinNumber);
    104a:	a4 e3       	ldi	r26, 0x34	; 52
    104c:	b0 e0       	ldi	r27, 0x00	; 0
    104e:	e4 e3       	ldi	r30, 0x34	; 52
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	80 81       	ld	r24, Z
    1054:	48 2f       	mov	r20, r24
    1056:	8a 81       	ldd	r24, Y+2	; 0x02
    1058:	28 2f       	mov	r18, r24
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	81 e0       	ldi	r24, 0x01	; 1
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	02 2e       	mov	r0, r18
    1062:	02 c0       	rjmp	.+4      	; 0x1068 <DIO_VoidSetPinDir+0xe6>
    1064:	88 0f       	add	r24, r24
    1066:	99 1f       	adc	r25, r25
    1068:	0a 94       	dec	r0
    106a:	e2 f7       	brpl	.-8      	; 0x1064 <DIO_VoidSetPinDir+0xe2>
    106c:	80 95       	com	r24
    106e:	84 23       	and	r24, r20
    1070:	8c 93       	st	X, r24
    1072:	88 c0       	rjmp	.+272    	; 0x1184 <DIO_VoidSetPinDir+0x202>
					break;
				case Group_D :
					clear_Bit (DIO_DDRD, Local_PinNumber);
    1074:	a1 e3       	ldi	r26, 0x31	; 49
    1076:	b0 e0       	ldi	r27, 0x00	; 0
    1078:	e1 e3       	ldi	r30, 0x31	; 49
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	80 81       	ld	r24, Z
    107e:	48 2f       	mov	r20, r24
    1080:	8a 81       	ldd	r24, Y+2	; 0x02
    1082:	28 2f       	mov	r18, r24
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	81 e0       	ldi	r24, 0x01	; 1
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	02 2e       	mov	r0, r18
    108c:	02 c0       	rjmp	.+4      	; 0x1092 <DIO_VoidSetPinDir+0x110>
    108e:	88 0f       	add	r24, r24
    1090:	99 1f       	adc	r25, r25
    1092:	0a 94       	dec	r0
    1094:	e2 f7       	brpl	.-8      	; 0x108e <DIO_VoidSetPinDir+0x10c>
    1096:	80 95       	com	r24
    1098:	84 23       	and	r24, r20
    109a:	8c 93       	st	X, r24
    109c:	73 c0       	rjmp	.+230    	; 0x1184 <DIO_VoidSetPinDir+0x202>
					break;
			}
		}
		else if (Local_DirectionState == Output)
    109e:	8b 81       	ldd	r24, Y+3	; 0x03
    10a0:	81 30       	cpi	r24, 0x01	; 1
    10a2:	09 f0       	breq	.+2      	; 0x10a6 <DIO_VoidSetPinDir+0x124>
    10a4:	6f c0       	rjmp	.+222    	; 0x1184 <DIO_VoidSetPinDir+0x202>
		{
			switch (Local_Groupname)
    10a6:	89 81       	ldd	r24, Y+1	; 0x01
    10a8:	28 2f       	mov	r18, r24
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	3d 83       	std	Y+5, r19	; 0x05
    10ae:	2c 83       	std	Y+4, r18	; 0x04
    10b0:	8c 81       	ldd	r24, Y+4	; 0x04
    10b2:	9d 81       	ldd	r25, Y+5	; 0x05
    10b4:	82 30       	cpi	r24, 0x02	; 2
    10b6:	91 05       	cpc	r25, r1
    10b8:	51 f1       	breq	.+84     	; 0x110e <DIO_VoidSetPinDir+0x18c>
    10ba:	2c 81       	ldd	r18, Y+4	; 0x04
    10bc:	3d 81       	ldd	r19, Y+5	; 0x05
    10be:	23 30       	cpi	r18, 0x03	; 3
    10c0:	31 05       	cpc	r19, r1
    10c2:	34 f4       	brge	.+12     	; 0x10d0 <DIO_VoidSetPinDir+0x14e>
    10c4:	8c 81       	ldd	r24, Y+4	; 0x04
    10c6:	9d 81       	ldd	r25, Y+5	; 0x05
    10c8:	81 30       	cpi	r24, 0x01	; 1
    10ca:	91 05       	cpc	r25, r1
    10cc:	61 f0       	breq	.+24     	; 0x10e6 <DIO_VoidSetPinDir+0x164>
    10ce:	5a c0       	rjmp	.+180    	; 0x1184 <DIO_VoidSetPinDir+0x202>
    10d0:	2c 81       	ldd	r18, Y+4	; 0x04
    10d2:	3d 81       	ldd	r19, Y+5	; 0x05
    10d4:	23 30       	cpi	r18, 0x03	; 3
    10d6:	31 05       	cpc	r19, r1
    10d8:	71 f1       	breq	.+92     	; 0x1136 <DIO_VoidSetPinDir+0x1b4>
    10da:	8c 81       	ldd	r24, Y+4	; 0x04
    10dc:	9d 81       	ldd	r25, Y+5	; 0x05
    10de:	84 30       	cpi	r24, 0x04	; 4
    10e0:	91 05       	cpc	r25, r1
    10e2:	e9 f1       	breq	.+122    	; 0x115e <DIO_VoidSetPinDir+0x1dc>
    10e4:	4f c0       	rjmp	.+158    	; 0x1184 <DIO_VoidSetPinDir+0x202>
			{
				case Group_A :
					Set_Bit(DIO_DDRA, Local_PinNumber);
    10e6:	aa e3       	ldi	r26, 0x3A	; 58
    10e8:	b0 e0       	ldi	r27, 0x00	; 0
    10ea:	ea e3       	ldi	r30, 0x3A	; 58
    10ec:	f0 e0       	ldi	r31, 0x00	; 0
    10ee:	80 81       	ld	r24, Z
    10f0:	48 2f       	mov	r20, r24
    10f2:	8a 81       	ldd	r24, Y+2	; 0x02
    10f4:	28 2f       	mov	r18, r24
    10f6:	30 e0       	ldi	r19, 0x00	; 0
    10f8:	81 e0       	ldi	r24, 0x01	; 1
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	02 2e       	mov	r0, r18
    10fe:	02 c0       	rjmp	.+4      	; 0x1104 <DIO_VoidSetPinDir+0x182>
    1100:	88 0f       	add	r24, r24
    1102:	99 1f       	adc	r25, r25
    1104:	0a 94       	dec	r0
    1106:	e2 f7       	brpl	.-8      	; 0x1100 <DIO_VoidSetPinDir+0x17e>
    1108:	84 2b       	or	r24, r20
    110a:	8c 93       	st	X, r24
    110c:	3b c0       	rjmp	.+118    	; 0x1184 <DIO_VoidSetPinDir+0x202>
					break;
				case Group_B :
					Set_Bit(DIO_DDRB, Local_PinNumber);
    110e:	a7 e3       	ldi	r26, 0x37	; 55
    1110:	b0 e0       	ldi	r27, 0x00	; 0
    1112:	e7 e3       	ldi	r30, 0x37	; 55
    1114:	f0 e0       	ldi	r31, 0x00	; 0
    1116:	80 81       	ld	r24, Z
    1118:	48 2f       	mov	r20, r24
    111a:	8a 81       	ldd	r24, Y+2	; 0x02
    111c:	28 2f       	mov	r18, r24
    111e:	30 e0       	ldi	r19, 0x00	; 0
    1120:	81 e0       	ldi	r24, 0x01	; 1
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	02 2e       	mov	r0, r18
    1126:	02 c0       	rjmp	.+4      	; 0x112c <DIO_VoidSetPinDir+0x1aa>
    1128:	88 0f       	add	r24, r24
    112a:	99 1f       	adc	r25, r25
    112c:	0a 94       	dec	r0
    112e:	e2 f7       	brpl	.-8      	; 0x1128 <DIO_VoidSetPinDir+0x1a6>
    1130:	84 2b       	or	r24, r20
    1132:	8c 93       	st	X, r24
    1134:	27 c0       	rjmp	.+78     	; 0x1184 <DIO_VoidSetPinDir+0x202>
					break;
				case Group_C :
					Set_Bit(DIO_DDRC, Local_PinNumber);
    1136:	a4 e3       	ldi	r26, 0x34	; 52
    1138:	b0 e0       	ldi	r27, 0x00	; 0
    113a:	e4 e3       	ldi	r30, 0x34	; 52
    113c:	f0 e0       	ldi	r31, 0x00	; 0
    113e:	80 81       	ld	r24, Z
    1140:	48 2f       	mov	r20, r24
    1142:	8a 81       	ldd	r24, Y+2	; 0x02
    1144:	28 2f       	mov	r18, r24
    1146:	30 e0       	ldi	r19, 0x00	; 0
    1148:	81 e0       	ldi	r24, 0x01	; 1
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	02 2e       	mov	r0, r18
    114e:	02 c0       	rjmp	.+4      	; 0x1154 <DIO_VoidSetPinDir+0x1d2>
    1150:	88 0f       	add	r24, r24
    1152:	99 1f       	adc	r25, r25
    1154:	0a 94       	dec	r0
    1156:	e2 f7       	brpl	.-8      	; 0x1150 <DIO_VoidSetPinDir+0x1ce>
    1158:	84 2b       	or	r24, r20
    115a:	8c 93       	st	X, r24
    115c:	13 c0       	rjmp	.+38     	; 0x1184 <DIO_VoidSetPinDir+0x202>
					break;
				case Group_D :
					Set_Bit(DIO_DDRD, Local_PinNumber);
    115e:	a1 e3       	ldi	r26, 0x31	; 49
    1160:	b0 e0       	ldi	r27, 0x00	; 0
    1162:	e1 e3       	ldi	r30, 0x31	; 49
    1164:	f0 e0       	ldi	r31, 0x00	; 0
    1166:	80 81       	ld	r24, Z
    1168:	48 2f       	mov	r20, r24
    116a:	8a 81       	ldd	r24, Y+2	; 0x02
    116c:	28 2f       	mov	r18, r24
    116e:	30 e0       	ldi	r19, 0x00	; 0
    1170:	81 e0       	ldi	r24, 0x01	; 1
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	02 2e       	mov	r0, r18
    1176:	02 c0       	rjmp	.+4      	; 0x117c <DIO_VoidSetPinDir+0x1fa>
    1178:	88 0f       	add	r24, r24
    117a:	99 1f       	adc	r25, r25
    117c:	0a 94       	dec	r0
    117e:	e2 f7       	brpl	.-8      	; 0x1178 <DIO_VoidSetPinDir+0x1f6>
    1180:	84 2b       	or	r24, r20
    1182:	8c 93       	st	X, r24
					break;
			}
		}
	}
}
    1184:	27 96       	adiw	r28, 0x07	; 7
    1186:	0f b6       	in	r0, 0x3f	; 63
    1188:	f8 94       	cli
    118a:	de bf       	out	0x3e, r29	; 62
    118c:	0f be       	out	0x3f, r0	; 63
    118e:	cd bf       	out	0x3d, r28	; 61
    1190:	cf 91       	pop	r28
    1192:	df 91       	pop	r29
    1194:	08 95       	ret

00001196 <DIO_VoidSetPinValue>:
void DIO_VoidSetPinValue(u8 Local_Groupname, u8 Local_PinNumber, u8 Local_valueState)
{
    1196:	df 93       	push	r29
    1198:	cf 93       	push	r28
    119a:	cd b7       	in	r28, 0x3d	; 61
    119c:	de b7       	in	r29, 0x3e	; 62
    119e:	27 97       	sbiw	r28, 0x07	; 7
    11a0:	0f b6       	in	r0, 0x3f	; 63
    11a2:	f8 94       	cli
    11a4:	de bf       	out	0x3e, r29	; 62
    11a6:	0f be       	out	0x3f, r0	; 63
    11a8:	cd bf       	out	0x3d, r28	; 61
    11aa:	89 83       	std	Y+1, r24	; 0x01
    11ac:	6a 83       	std	Y+2, r22	; 0x02
    11ae:	4b 83       	std	Y+3, r20	; 0x03
	if (Local_Groupname <= Group_D && Local_PinNumber <= Pin_D7)
    11b0:	89 81       	ldd	r24, Y+1	; 0x01
    11b2:	85 30       	cpi	r24, 0x05	; 5
    11b4:	08 f0       	brcs	.+2      	; 0x11b8 <DIO_VoidSetPinValue+0x22>
    11b6:	f0 c0       	rjmp	.+480    	; 0x1398 <DIO_VoidSetPinValue+0x202>
    11b8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ba:	88 30       	cpi	r24, 0x08	; 8
    11bc:	08 f0       	brcs	.+2      	; 0x11c0 <DIO_VoidSetPinValue+0x2a>
    11be:	ec c0       	rjmp	.+472    	; 0x1398 <DIO_VoidSetPinValue+0x202>
	{
		if (Local_valueState == Low)
    11c0:	8b 81       	ldd	r24, Y+3	; 0x03
    11c2:	88 23       	and	r24, r24
    11c4:	09 f0       	breq	.+2      	; 0x11c8 <DIO_VoidSetPinValue+0x32>
    11c6:	75 c0       	rjmp	.+234    	; 0x12b2 <DIO_VoidSetPinValue+0x11c>
		{
			switch (Local_Groupname)
    11c8:	89 81       	ldd	r24, Y+1	; 0x01
    11ca:	28 2f       	mov	r18, r24
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	3f 83       	std	Y+7, r19	; 0x07
    11d0:	2e 83       	std	Y+6, r18	; 0x06
    11d2:	8e 81       	ldd	r24, Y+6	; 0x06
    11d4:	9f 81       	ldd	r25, Y+7	; 0x07
    11d6:	82 30       	cpi	r24, 0x02	; 2
    11d8:	91 05       	cpc	r25, r1
    11da:	61 f1       	breq	.+88     	; 0x1234 <DIO_VoidSetPinValue+0x9e>
    11dc:	2e 81       	ldd	r18, Y+6	; 0x06
    11de:	3f 81       	ldd	r19, Y+7	; 0x07
    11e0:	23 30       	cpi	r18, 0x03	; 3
    11e2:	31 05       	cpc	r19, r1
    11e4:	34 f4       	brge	.+12     	; 0x11f2 <DIO_VoidSetPinValue+0x5c>
    11e6:	8e 81       	ldd	r24, Y+6	; 0x06
    11e8:	9f 81       	ldd	r25, Y+7	; 0x07
    11ea:	81 30       	cpi	r24, 0x01	; 1
    11ec:	91 05       	cpc	r25, r1
    11ee:	69 f0       	breq	.+26     	; 0x120a <DIO_VoidSetPinValue+0x74>
    11f0:	d3 c0       	rjmp	.+422    	; 0x1398 <DIO_VoidSetPinValue+0x202>
    11f2:	2e 81       	ldd	r18, Y+6	; 0x06
    11f4:	3f 81       	ldd	r19, Y+7	; 0x07
    11f6:	23 30       	cpi	r18, 0x03	; 3
    11f8:	31 05       	cpc	r19, r1
    11fa:	89 f1       	breq	.+98     	; 0x125e <DIO_VoidSetPinValue+0xc8>
    11fc:	8e 81       	ldd	r24, Y+6	; 0x06
    11fe:	9f 81       	ldd	r25, Y+7	; 0x07
    1200:	84 30       	cpi	r24, 0x04	; 4
    1202:	91 05       	cpc	r25, r1
    1204:	09 f4       	brne	.+2      	; 0x1208 <DIO_VoidSetPinValue+0x72>
    1206:	40 c0       	rjmp	.+128    	; 0x1288 <DIO_VoidSetPinValue+0xf2>
    1208:	c7 c0       	rjmp	.+398    	; 0x1398 <DIO_VoidSetPinValue+0x202>
			{
				case Group_A:
					clear_Bit(DIO_PORTA, Local_PinNumber);
    120a:	ab e3       	ldi	r26, 0x3B	; 59
    120c:	b0 e0       	ldi	r27, 0x00	; 0
    120e:	eb e3       	ldi	r30, 0x3B	; 59
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	80 81       	ld	r24, Z
    1214:	48 2f       	mov	r20, r24
    1216:	8a 81       	ldd	r24, Y+2	; 0x02
    1218:	28 2f       	mov	r18, r24
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	81 e0       	ldi	r24, 0x01	; 1
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	02 2e       	mov	r0, r18
    1222:	02 c0       	rjmp	.+4      	; 0x1228 <DIO_VoidSetPinValue+0x92>
    1224:	88 0f       	add	r24, r24
    1226:	99 1f       	adc	r25, r25
    1228:	0a 94       	dec	r0
    122a:	e2 f7       	brpl	.-8      	; 0x1224 <DIO_VoidSetPinValue+0x8e>
    122c:	80 95       	com	r24
    122e:	84 23       	and	r24, r20
    1230:	8c 93       	st	X, r24
    1232:	b2 c0       	rjmp	.+356    	; 0x1398 <DIO_VoidSetPinValue+0x202>
					break;
				case Group_B:
					clear_Bit(DIO_PORTB, Local_PinNumber);
    1234:	a8 e3       	ldi	r26, 0x38	; 56
    1236:	b0 e0       	ldi	r27, 0x00	; 0
    1238:	e8 e3       	ldi	r30, 0x38	; 56
    123a:	f0 e0       	ldi	r31, 0x00	; 0
    123c:	80 81       	ld	r24, Z
    123e:	48 2f       	mov	r20, r24
    1240:	8a 81       	ldd	r24, Y+2	; 0x02
    1242:	28 2f       	mov	r18, r24
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	81 e0       	ldi	r24, 0x01	; 1
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	02 2e       	mov	r0, r18
    124c:	02 c0       	rjmp	.+4      	; 0x1252 <DIO_VoidSetPinValue+0xbc>
    124e:	88 0f       	add	r24, r24
    1250:	99 1f       	adc	r25, r25
    1252:	0a 94       	dec	r0
    1254:	e2 f7       	brpl	.-8      	; 0x124e <DIO_VoidSetPinValue+0xb8>
    1256:	80 95       	com	r24
    1258:	84 23       	and	r24, r20
    125a:	8c 93       	st	X, r24
    125c:	9d c0       	rjmp	.+314    	; 0x1398 <DIO_VoidSetPinValue+0x202>
					break;
				case Group_C:
					clear_Bit(DIO_PORTC, Local_PinNumber);
    125e:	a5 e3       	ldi	r26, 0x35	; 53
    1260:	b0 e0       	ldi	r27, 0x00	; 0
    1262:	e5 e3       	ldi	r30, 0x35	; 53
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	80 81       	ld	r24, Z
    1268:	48 2f       	mov	r20, r24
    126a:	8a 81       	ldd	r24, Y+2	; 0x02
    126c:	28 2f       	mov	r18, r24
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	81 e0       	ldi	r24, 0x01	; 1
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	02 2e       	mov	r0, r18
    1276:	02 c0       	rjmp	.+4      	; 0x127c <DIO_VoidSetPinValue+0xe6>
    1278:	88 0f       	add	r24, r24
    127a:	99 1f       	adc	r25, r25
    127c:	0a 94       	dec	r0
    127e:	e2 f7       	brpl	.-8      	; 0x1278 <DIO_VoidSetPinValue+0xe2>
    1280:	80 95       	com	r24
    1282:	84 23       	and	r24, r20
    1284:	8c 93       	st	X, r24
    1286:	88 c0       	rjmp	.+272    	; 0x1398 <DIO_VoidSetPinValue+0x202>
					break;
				case Group_D:
					clear_Bit(DIO_PORTD, Local_PinNumber);
    1288:	a2 e3       	ldi	r26, 0x32	; 50
    128a:	b0 e0       	ldi	r27, 0x00	; 0
    128c:	e2 e3       	ldi	r30, 0x32	; 50
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	80 81       	ld	r24, Z
    1292:	48 2f       	mov	r20, r24
    1294:	8a 81       	ldd	r24, Y+2	; 0x02
    1296:	28 2f       	mov	r18, r24
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	81 e0       	ldi	r24, 0x01	; 1
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	02 2e       	mov	r0, r18
    12a0:	02 c0       	rjmp	.+4      	; 0x12a6 <DIO_VoidSetPinValue+0x110>
    12a2:	88 0f       	add	r24, r24
    12a4:	99 1f       	adc	r25, r25
    12a6:	0a 94       	dec	r0
    12a8:	e2 f7       	brpl	.-8      	; 0x12a2 <DIO_VoidSetPinValue+0x10c>
    12aa:	80 95       	com	r24
    12ac:	84 23       	and	r24, r20
    12ae:	8c 93       	st	X, r24
    12b0:	73 c0       	rjmp	.+230    	; 0x1398 <DIO_VoidSetPinValue+0x202>
					break;
			}
		}
		else if (Local_valueState == High)
    12b2:	8b 81       	ldd	r24, Y+3	; 0x03
    12b4:	81 30       	cpi	r24, 0x01	; 1
    12b6:	09 f0       	breq	.+2      	; 0x12ba <DIO_VoidSetPinValue+0x124>
    12b8:	6f c0       	rjmp	.+222    	; 0x1398 <DIO_VoidSetPinValue+0x202>
		{
			switch (Local_Groupname)
    12ba:	89 81       	ldd	r24, Y+1	; 0x01
    12bc:	28 2f       	mov	r18, r24
    12be:	30 e0       	ldi	r19, 0x00	; 0
    12c0:	3d 83       	std	Y+5, r19	; 0x05
    12c2:	2c 83       	std	Y+4, r18	; 0x04
    12c4:	8c 81       	ldd	r24, Y+4	; 0x04
    12c6:	9d 81       	ldd	r25, Y+5	; 0x05
    12c8:	82 30       	cpi	r24, 0x02	; 2
    12ca:	91 05       	cpc	r25, r1
    12cc:	51 f1       	breq	.+84     	; 0x1322 <DIO_VoidSetPinValue+0x18c>
    12ce:	2c 81       	ldd	r18, Y+4	; 0x04
    12d0:	3d 81       	ldd	r19, Y+5	; 0x05
    12d2:	23 30       	cpi	r18, 0x03	; 3
    12d4:	31 05       	cpc	r19, r1
    12d6:	34 f4       	brge	.+12     	; 0x12e4 <DIO_VoidSetPinValue+0x14e>
    12d8:	8c 81       	ldd	r24, Y+4	; 0x04
    12da:	9d 81       	ldd	r25, Y+5	; 0x05
    12dc:	81 30       	cpi	r24, 0x01	; 1
    12de:	91 05       	cpc	r25, r1
    12e0:	61 f0       	breq	.+24     	; 0x12fa <DIO_VoidSetPinValue+0x164>
    12e2:	5a c0       	rjmp	.+180    	; 0x1398 <DIO_VoidSetPinValue+0x202>
    12e4:	2c 81       	ldd	r18, Y+4	; 0x04
    12e6:	3d 81       	ldd	r19, Y+5	; 0x05
    12e8:	23 30       	cpi	r18, 0x03	; 3
    12ea:	31 05       	cpc	r19, r1
    12ec:	71 f1       	breq	.+92     	; 0x134a <DIO_VoidSetPinValue+0x1b4>
    12ee:	8c 81       	ldd	r24, Y+4	; 0x04
    12f0:	9d 81       	ldd	r25, Y+5	; 0x05
    12f2:	84 30       	cpi	r24, 0x04	; 4
    12f4:	91 05       	cpc	r25, r1
    12f6:	e9 f1       	breq	.+122    	; 0x1372 <DIO_VoidSetPinValue+0x1dc>
    12f8:	4f c0       	rjmp	.+158    	; 0x1398 <DIO_VoidSetPinValue+0x202>
			{
				case Group_A:
					Set_Bit(DIO_PORTA, Local_PinNumber);
    12fa:	ab e3       	ldi	r26, 0x3B	; 59
    12fc:	b0 e0       	ldi	r27, 0x00	; 0
    12fe:	eb e3       	ldi	r30, 0x3B	; 59
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	80 81       	ld	r24, Z
    1304:	48 2f       	mov	r20, r24
    1306:	8a 81       	ldd	r24, Y+2	; 0x02
    1308:	28 2f       	mov	r18, r24
    130a:	30 e0       	ldi	r19, 0x00	; 0
    130c:	81 e0       	ldi	r24, 0x01	; 1
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	02 2e       	mov	r0, r18
    1312:	02 c0       	rjmp	.+4      	; 0x1318 <DIO_VoidSetPinValue+0x182>
    1314:	88 0f       	add	r24, r24
    1316:	99 1f       	adc	r25, r25
    1318:	0a 94       	dec	r0
    131a:	e2 f7       	brpl	.-8      	; 0x1314 <DIO_VoidSetPinValue+0x17e>
    131c:	84 2b       	or	r24, r20
    131e:	8c 93       	st	X, r24
    1320:	3b c0       	rjmp	.+118    	; 0x1398 <DIO_VoidSetPinValue+0x202>
					break;
				case Group_B:
					Set_Bit(DIO_PORTB, Local_PinNumber);
    1322:	a8 e3       	ldi	r26, 0x38	; 56
    1324:	b0 e0       	ldi	r27, 0x00	; 0
    1326:	e8 e3       	ldi	r30, 0x38	; 56
    1328:	f0 e0       	ldi	r31, 0x00	; 0
    132a:	80 81       	ld	r24, Z
    132c:	48 2f       	mov	r20, r24
    132e:	8a 81       	ldd	r24, Y+2	; 0x02
    1330:	28 2f       	mov	r18, r24
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	81 e0       	ldi	r24, 0x01	; 1
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	02 2e       	mov	r0, r18
    133a:	02 c0       	rjmp	.+4      	; 0x1340 <DIO_VoidSetPinValue+0x1aa>
    133c:	88 0f       	add	r24, r24
    133e:	99 1f       	adc	r25, r25
    1340:	0a 94       	dec	r0
    1342:	e2 f7       	brpl	.-8      	; 0x133c <DIO_VoidSetPinValue+0x1a6>
    1344:	84 2b       	or	r24, r20
    1346:	8c 93       	st	X, r24
    1348:	27 c0       	rjmp	.+78     	; 0x1398 <DIO_VoidSetPinValue+0x202>
					break;
				case Group_C:
					Set_Bit(DIO_PORTC, Local_PinNumber);
    134a:	a5 e3       	ldi	r26, 0x35	; 53
    134c:	b0 e0       	ldi	r27, 0x00	; 0
    134e:	e5 e3       	ldi	r30, 0x35	; 53
    1350:	f0 e0       	ldi	r31, 0x00	; 0
    1352:	80 81       	ld	r24, Z
    1354:	48 2f       	mov	r20, r24
    1356:	8a 81       	ldd	r24, Y+2	; 0x02
    1358:	28 2f       	mov	r18, r24
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	81 e0       	ldi	r24, 0x01	; 1
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	02 2e       	mov	r0, r18
    1362:	02 c0       	rjmp	.+4      	; 0x1368 <DIO_VoidSetPinValue+0x1d2>
    1364:	88 0f       	add	r24, r24
    1366:	99 1f       	adc	r25, r25
    1368:	0a 94       	dec	r0
    136a:	e2 f7       	brpl	.-8      	; 0x1364 <DIO_VoidSetPinValue+0x1ce>
    136c:	84 2b       	or	r24, r20
    136e:	8c 93       	st	X, r24
    1370:	13 c0       	rjmp	.+38     	; 0x1398 <DIO_VoidSetPinValue+0x202>
					break;
				case Group_D:
					Set_Bit(DIO_PORTD, Local_PinNumber);
    1372:	a2 e3       	ldi	r26, 0x32	; 50
    1374:	b0 e0       	ldi	r27, 0x00	; 0
    1376:	e2 e3       	ldi	r30, 0x32	; 50
    1378:	f0 e0       	ldi	r31, 0x00	; 0
    137a:	80 81       	ld	r24, Z
    137c:	48 2f       	mov	r20, r24
    137e:	8a 81       	ldd	r24, Y+2	; 0x02
    1380:	28 2f       	mov	r18, r24
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	81 e0       	ldi	r24, 0x01	; 1
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	02 2e       	mov	r0, r18
    138a:	02 c0       	rjmp	.+4      	; 0x1390 <DIO_VoidSetPinValue+0x1fa>
    138c:	88 0f       	add	r24, r24
    138e:	99 1f       	adc	r25, r25
    1390:	0a 94       	dec	r0
    1392:	e2 f7       	brpl	.-8      	; 0x138c <DIO_VoidSetPinValue+0x1f6>
    1394:	84 2b       	or	r24, r20
    1396:	8c 93       	st	X, r24
					break;
			}
		}
	}
}
    1398:	27 96       	adiw	r28, 0x07	; 7
    139a:	0f b6       	in	r0, 0x3f	; 63
    139c:	f8 94       	cli
    139e:	de bf       	out	0x3e, r29	; 62
    13a0:	0f be       	out	0x3f, r0	; 63
    13a2:	cd bf       	out	0x3d, r28	; 61
    13a4:	cf 91       	pop	r28
    13a6:	df 91       	pop	r29
    13a8:	08 95       	ret

000013aa <DIO_u8GetPinValue>:
u8	 DIO_u8GetPinValue (u8 Local_Groupname, u8 Local_PinNumber)
{
    13aa:	df 93       	push	r29
    13ac:	cf 93       	push	r28
    13ae:	00 d0       	rcall	.+0      	; 0x13b0 <DIO_u8GetPinValue+0x6>
    13b0:	00 d0       	rcall	.+0      	; 0x13b2 <DIO_u8GetPinValue+0x8>
    13b2:	00 d0       	rcall	.+0      	; 0x13b4 <DIO_u8GetPinValue+0xa>
    13b4:	cd b7       	in	r28, 0x3d	; 61
    13b6:	de b7       	in	r29, 0x3e	; 62
    13b8:	8a 83       	std	Y+2, r24	; 0x02
    13ba:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_returndata = 0;
    13bc:	19 82       	std	Y+1, r1	; 0x01
	if (Local_Groupname <= Group_D && Local_PinNumber <= Pin_D7)
    13be:	8a 81       	ldd	r24, Y+2	; 0x02
    13c0:	85 30       	cpi	r24, 0x05	; 5
    13c2:	08 f0       	brcs	.+2      	; 0x13c6 <DIO_u8GetPinValue+0x1c>
    13c4:	6e c0       	rjmp	.+220    	; 0x14a2 <DIO_u8GetPinValue+0xf8>
    13c6:	8b 81       	ldd	r24, Y+3	; 0x03
    13c8:	88 30       	cpi	r24, 0x08	; 8
    13ca:	08 f0       	brcs	.+2      	; 0x13ce <DIO_u8GetPinValue+0x24>
    13cc:	6a c0       	rjmp	.+212    	; 0x14a2 <DIO_u8GetPinValue+0xf8>
	{
		switch (Local_Groupname)
    13ce:	8a 81       	ldd	r24, Y+2	; 0x02
    13d0:	28 2f       	mov	r18, r24
    13d2:	30 e0       	ldi	r19, 0x00	; 0
    13d4:	3e 83       	std	Y+6, r19	; 0x06
    13d6:	2d 83       	std	Y+5, r18	; 0x05
    13d8:	4d 81       	ldd	r20, Y+5	; 0x05
    13da:	5e 81       	ldd	r21, Y+6	; 0x06
    13dc:	42 30       	cpi	r20, 0x02	; 2
    13de:	51 05       	cpc	r21, r1
    13e0:	41 f1       	breq	.+80     	; 0x1432 <DIO_u8GetPinValue+0x88>
    13e2:	8d 81       	ldd	r24, Y+5	; 0x05
    13e4:	9e 81       	ldd	r25, Y+6	; 0x06
    13e6:	83 30       	cpi	r24, 0x03	; 3
    13e8:	91 05       	cpc	r25, r1
    13ea:	34 f4       	brge	.+12     	; 0x13f8 <DIO_u8GetPinValue+0x4e>
    13ec:	2d 81       	ldd	r18, Y+5	; 0x05
    13ee:	3e 81       	ldd	r19, Y+6	; 0x06
    13f0:	21 30       	cpi	r18, 0x01	; 1
    13f2:	31 05       	cpc	r19, r1
    13f4:	61 f0       	breq	.+24     	; 0x140e <DIO_u8GetPinValue+0x64>
    13f6:	52 c0       	rjmp	.+164    	; 0x149c <DIO_u8GetPinValue+0xf2>
    13f8:	4d 81       	ldd	r20, Y+5	; 0x05
    13fa:	5e 81       	ldd	r21, Y+6	; 0x06
    13fc:	43 30       	cpi	r20, 0x03	; 3
    13fe:	51 05       	cpc	r21, r1
    1400:	51 f1       	breq	.+84     	; 0x1456 <DIO_u8GetPinValue+0xac>
    1402:	8d 81       	ldd	r24, Y+5	; 0x05
    1404:	9e 81       	ldd	r25, Y+6	; 0x06
    1406:	84 30       	cpi	r24, 0x04	; 4
    1408:	91 05       	cpc	r25, r1
    140a:	b9 f1       	breq	.+110    	; 0x147a <DIO_u8GetPinValue+0xd0>
    140c:	47 c0       	rjmp	.+142    	; 0x149c <DIO_u8GetPinValue+0xf2>
		{
			case Group_A:
				Local_returndata = Get_Bit(DIO_PINA, Local_PinNumber);
    140e:	e9 e3       	ldi	r30, 0x39	; 57
    1410:	f0 e0       	ldi	r31, 0x00	; 0
    1412:	80 81       	ld	r24, Z
    1414:	28 2f       	mov	r18, r24
    1416:	30 e0       	ldi	r19, 0x00	; 0
    1418:	8b 81       	ldd	r24, Y+3	; 0x03
    141a:	88 2f       	mov	r24, r24
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	a9 01       	movw	r20, r18
    1420:	02 c0       	rjmp	.+4      	; 0x1426 <DIO_u8GetPinValue+0x7c>
    1422:	55 95       	asr	r21
    1424:	47 95       	ror	r20
    1426:	8a 95       	dec	r24
    1428:	e2 f7       	brpl	.-8      	; 0x1422 <DIO_u8GetPinValue+0x78>
    142a:	ca 01       	movw	r24, r20
    142c:	81 70       	andi	r24, 0x01	; 1
    142e:	89 83       	std	Y+1, r24	; 0x01
    1430:	35 c0       	rjmp	.+106    	; 0x149c <DIO_u8GetPinValue+0xf2>
				break;
			case Group_B:
				Local_returndata = Get_Bit(DIO_PINB, Local_PinNumber);
    1432:	e6 e3       	ldi	r30, 0x36	; 54
    1434:	f0 e0       	ldi	r31, 0x00	; 0
    1436:	80 81       	ld	r24, Z
    1438:	28 2f       	mov	r18, r24
    143a:	30 e0       	ldi	r19, 0x00	; 0
    143c:	8b 81       	ldd	r24, Y+3	; 0x03
    143e:	88 2f       	mov	r24, r24
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	a9 01       	movw	r20, r18
    1444:	02 c0       	rjmp	.+4      	; 0x144a <DIO_u8GetPinValue+0xa0>
    1446:	55 95       	asr	r21
    1448:	47 95       	ror	r20
    144a:	8a 95       	dec	r24
    144c:	e2 f7       	brpl	.-8      	; 0x1446 <DIO_u8GetPinValue+0x9c>
    144e:	ca 01       	movw	r24, r20
    1450:	81 70       	andi	r24, 0x01	; 1
    1452:	89 83       	std	Y+1, r24	; 0x01
    1454:	23 c0       	rjmp	.+70     	; 0x149c <DIO_u8GetPinValue+0xf2>
				break;
			case Group_C:
				Local_returndata = Get_Bit(DIO_PINC, Local_PinNumber);
    1456:	e3 e3       	ldi	r30, 0x33	; 51
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	80 81       	ld	r24, Z
    145c:	28 2f       	mov	r18, r24
    145e:	30 e0       	ldi	r19, 0x00	; 0
    1460:	8b 81       	ldd	r24, Y+3	; 0x03
    1462:	88 2f       	mov	r24, r24
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	a9 01       	movw	r20, r18
    1468:	02 c0       	rjmp	.+4      	; 0x146e <DIO_u8GetPinValue+0xc4>
    146a:	55 95       	asr	r21
    146c:	47 95       	ror	r20
    146e:	8a 95       	dec	r24
    1470:	e2 f7       	brpl	.-8      	; 0x146a <DIO_u8GetPinValue+0xc0>
    1472:	ca 01       	movw	r24, r20
    1474:	81 70       	andi	r24, 0x01	; 1
    1476:	89 83       	std	Y+1, r24	; 0x01
    1478:	11 c0       	rjmp	.+34     	; 0x149c <DIO_u8GetPinValue+0xf2>
				break;
			case Group_D:
				Local_returndata = Get_Bit(DIO_PIND, Local_PinNumber);
    147a:	e0 e3       	ldi	r30, 0x30	; 48
    147c:	f0 e0       	ldi	r31, 0x00	; 0
    147e:	80 81       	ld	r24, Z
    1480:	28 2f       	mov	r18, r24
    1482:	30 e0       	ldi	r19, 0x00	; 0
    1484:	8b 81       	ldd	r24, Y+3	; 0x03
    1486:	88 2f       	mov	r24, r24
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	a9 01       	movw	r20, r18
    148c:	02 c0       	rjmp	.+4      	; 0x1492 <DIO_u8GetPinValue+0xe8>
    148e:	55 95       	asr	r21
    1490:	47 95       	ror	r20
    1492:	8a 95       	dec	r24
    1494:	e2 f7       	brpl	.-8      	; 0x148e <DIO_u8GetPinValue+0xe4>
    1496:	ca 01       	movw	r24, r20
    1498:	81 70       	andi	r24, 0x01	; 1
    149a:	89 83       	std	Y+1, r24	; 0x01
				break;
		}
		return Local_returndata;
    149c:	59 81       	ldd	r21, Y+1	; 0x01
    149e:	5c 83       	std	Y+4, r21	; 0x04
    14a0:	02 c0       	rjmp	.+4      	; 0x14a6 <DIO_u8GetPinValue+0xfc>
	}
	else
	{
		return -1;
    14a2:	8f ef       	ldi	r24, 0xFF	; 255
    14a4:	8c 83       	std	Y+4, r24	; 0x04
    14a6:	8c 81       	ldd	r24, Y+4	; 0x04
	}
}
    14a8:	26 96       	adiw	r28, 0x06	; 6
    14aa:	0f b6       	in	r0, 0x3f	; 63
    14ac:	f8 94       	cli
    14ae:	de bf       	out	0x3e, r29	; 62
    14b0:	0f be       	out	0x3f, r0	; 63
    14b2:	cd bf       	out	0x3d, r28	; 61
    14b4:	cf 91       	pop	r28
    14b6:	df 91       	pop	r29
    14b8:	08 95       	ret

000014ba <DIO_VoidSetPortDir>:
void DIO_VoidSetPortDir(u8 Local_Groupname, u8 Local_DirectionState)
{
    14ba:	df 93       	push	r29
    14bc:	cf 93       	push	r28
    14be:	00 d0       	rcall	.+0      	; 0x14c0 <DIO_VoidSetPortDir+0x6>
    14c0:	00 d0       	rcall	.+0      	; 0x14c2 <DIO_VoidSetPortDir+0x8>
    14c2:	cd b7       	in	r28, 0x3d	; 61
    14c4:	de b7       	in	r29, 0x3e	; 62
    14c6:	89 83       	std	Y+1, r24	; 0x01
    14c8:	6a 83       	std	Y+2, r22	; 0x02
	switch (Local_Groupname)
    14ca:	89 81       	ldd	r24, Y+1	; 0x01
    14cc:	28 2f       	mov	r18, r24
    14ce:	30 e0       	ldi	r19, 0x00	; 0
    14d0:	3c 83       	std	Y+4, r19	; 0x04
    14d2:	2b 83       	std	Y+3, r18	; 0x03
    14d4:	8b 81       	ldd	r24, Y+3	; 0x03
    14d6:	9c 81       	ldd	r25, Y+4	; 0x04
    14d8:	82 30       	cpi	r24, 0x02	; 2
    14da:	91 05       	cpc	r25, r1
    14dc:	d9 f0       	breq	.+54     	; 0x1514 <DIO_VoidSetPortDir+0x5a>
    14de:	2b 81       	ldd	r18, Y+3	; 0x03
    14e0:	3c 81       	ldd	r19, Y+4	; 0x04
    14e2:	23 30       	cpi	r18, 0x03	; 3
    14e4:	31 05       	cpc	r19, r1
    14e6:	34 f4       	brge	.+12     	; 0x14f4 <DIO_VoidSetPortDir+0x3a>
    14e8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ea:	9c 81       	ldd	r25, Y+4	; 0x04
    14ec:	81 30       	cpi	r24, 0x01	; 1
    14ee:	91 05       	cpc	r25, r1
    14f0:	61 f0       	breq	.+24     	; 0x150a <DIO_VoidSetPortDir+0x50>
    14f2:	1e c0       	rjmp	.+60     	; 0x1530 <DIO_VoidSetPortDir+0x76>
    14f4:	2b 81       	ldd	r18, Y+3	; 0x03
    14f6:	3c 81       	ldd	r19, Y+4	; 0x04
    14f8:	23 30       	cpi	r18, 0x03	; 3
    14fa:	31 05       	cpc	r19, r1
    14fc:	81 f0       	breq	.+32     	; 0x151e <DIO_VoidSetPortDir+0x64>
    14fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1500:	9c 81       	ldd	r25, Y+4	; 0x04
    1502:	84 30       	cpi	r24, 0x04	; 4
    1504:	91 05       	cpc	r25, r1
    1506:	81 f0       	breq	.+32     	; 0x1528 <DIO_VoidSetPortDir+0x6e>
    1508:	13 c0       	rjmp	.+38     	; 0x1530 <DIO_VoidSetPortDir+0x76>
	{
		case Group_A:
			DIO_DDRA = Local_DirectionState;
    150a:	ea e3       	ldi	r30, 0x3A	; 58
    150c:	f0 e0       	ldi	r31, 0x00	; 0
    150e:	8a 81       	ldd	r24, Y+2	; 0x02
    1510:	80 83       	st	Z, r24
    1512:	0e c0       	rjmp	.+28     	; 0x1530 <DIO_VoidSetPortDir+0x76>
			break;
		case Group_B:
			DIO_DDRB = Local_DirectionState;
    1514:	e7 e3       	ldi	r30, 0x37	; 55
    1516:	f0 e0       	ldi	r31, 0x00	; 0
    1518:	8a 81       	ldd	r24, Y+2	; 0x02
    151a:	80 83       	st	Z, r24
    151c:	09 c0       	rjmp	.+18     	; 0x1530 <DIO_VoidSetPortDir+0x76>
			break;
		case Group_C:
			DIO_DDRC = Local_DirectionState;
    151e:	e4 e3       	ldi	r30, 0x34	; 52
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	8a 81       	ldd	r24, Y+2	; 0x02
    1524:	80 83       	st	Z, r24
    1526:	04 c0       	rjmp	.+8      	; 0x1530 <DIO_VoidSetPortDir+0x76>
			break;
		case Group_D:
			DIO_DDRD = Local_DirectionState;
    1528:	e1 e3       	ldi	r30, 0x31	; 49
    152a:	f0 e0       	ldi	r31, 0x00	; 0
    152c:	8a 81       	ldd	r24, Y+2	; 0x02
    152e:	80 83       	st	Z, r24
			break;
	}
}
    1530:	0f 90       	pop	r0
    1532:	0f 90       	pop	r0
    1534:	0f 90       	pop	r0
    1536:	0f 90       	pop	r0
    1538:	cf 91       	pop	r28
    153a:	df 91       	pop	r29
    153c:	08 95       	ret

0000153e <DIO_VoidSetPortValue>:
void DIO_VoidSetPortValue(u8 Local_Groupname, u8 Local_valueState)
{
    153e:	df 93       	push	r29
    1540:	cf 93       	push	r28
    1542:	00 d0       	rcall	.+0      	; 0x1544 <DIO_VoidSetPortValue+0x6>
    1544:	00 d0       	rcall	.+0      	; 0x1546 <DIO_VoidSetPortValue+0x8>
    1546:	cd b7       	in	r28, 0x3d	; 61
    1548:	de b7       	in	r29, 0x3e	; 62
    154a:	89 83       	std	Y+1, r24	; 0x01
    154c:	6a 83       	std	Y+2, r22	; 0x02
	switch (Local_Groupname)
    154e:	89 81       	ldd	r24, Y+1	; 0x01
    1550:	28 2f       	mov	r18, r24
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	3c 83       	std	Y+4, r19	; 0x04
    1556:	2b 83       	std	Y+3, r18	; 0x03
    1558:	8b 81       	ldd	r24, Y+3	; 0x03
    155a:	9c 81       	ldd	r25, Y+4	; 0x04
    155c:	82 30       	cpi	r24, 0x02	; 2
    155e:	91 05       	cpc	r25, r1
    1560:	d9 f0       	breq	.+54     	; 0x1598 <DIO_VoidSetPortValue+0x5a>
    1562:	2b 81       	ldd	r18, Y+3	; 0x03
    1564:	3c 81       	ldd	r19, Y+4	; 0x04
    1566:	23 30       	cpi	r18, 0x03	; 3
    1568:	31 05       	cpc	r19, r1
    156a:	34 f4       	brge	.+12     	; 0x1578 <DIO_VoidSetPortValue+0x3a>
    156c:	8b 81       	ldd	r24, Y+3	; 0x03
    156e:	9c 81       	ldd	r25, Y+4	; 0x04
    1570:	81 30       	cpi	r24, 0x01	; 1
    1572:	91 05       	cpc	r25, r1
    1574:	61 f0       	breq	.+24     	; 0x158e <DIO_VoidSetPortValue+0x50>
    1576:	1e c0       	rjmp	.+60     	; 0x15b4 <DIO_VoidSetPortValue+0x76>
    1578:	2b 81       	ldd	r18, Y+3	; 0x03
    157a:	3c 81       	ldd	r19, Y+4	; 0x04
    157c:	23 30       	cpi	r18, 0x03	; 3
    157e:	31 05       	cpc	r19, r1
    1580:	81 f0       	breq	.+32     	; 0x15a2 <DIO_VoidSetPortValue+0x64>
    1582:	8b 81       	ldd	r24, Y+3	; 0x03
    1584:	9c 81       	ldd	r25, Y+4	; 0x04
    1586:	84 30       	cpi	r24, 0x04	; 4
    1588:	91 05       	cpc	r25, r1
    158a:	81 f0       	breq	.+32     	; 0x15ac <DIO_VoidSetPortValue+0x6e>
    158c:	13 c0       	rjmp	.+38     	; 0x15b4 <DIO_VoidSetPortValue+0x76>
	{
		case Group_A:
			DIO_PORTA = Local_valueState;
    158e:	eb e3       	ldi	r30, 0x3B	; 59
    1590:	f0 e0       	ldi	r31, 0x00	; 0
    1592:	8a 81       	ldd	r24, Y+2	; 0x02
    1594:	80 83       	st	Z, r24
    1596:	0e c0       	rjmp	.+28     	; 0x15b4 <DIO_VoidSetPortValue+0x76>
			break;
		case Group_B:
			DIO_PORTB = Local_valueState;
    1598:	e8 e3       	ldi	r30, 0x38	; 56
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	8a 81       	ldd	r24, Y+2	; 0x02
    159e:	80 83       	st	Z, r24
    15a0:	09 c0       	rjmp	.+18     	; 0x15b4 <DIO_VoidSetPortValue+0x76>
			break;
		case Group_C:
			DIO_PORTC = Local_valueState;
    15a2:	e5 e3       	ldi	r30, 0x35	; 53
    15a4:	f0 e0       	ldi	r31, 0x00	; 0
    15a6:	8a 81       	ldd	r24, Y+2	; 0x02
    15a8:	80 83       	st	Z, r24
    15aa:	04 c0       	rjmp	.+8      	; 0x15b4 <DIO_VoidSetPortValue+0x76>
			break;
		case Group_D:
			DIO_PORTD = Local_valueState;
    15ac:	e2 e3       	ldi	r30, 0x32	; 50
    15ae:	f0 e0       	ldi	r31, 0x00	; 0
    15b0:	8a 81       	ldd	r24, Y+2	; 0x02
    15b2:	80 83       	st	Z, r24
			break;
	}
}
    15b4:	0f 90       	pop	r0
    15b6:	0f 90       	pop	r0
    15b8:	0f 90       	pop	r0
    15ba:	0f 90       	pop	r0
    15bc:	cf 91       	pop	r28
    15be:	df 91       	pop	r29
    15c0:	08 95       	ret

000015c2 <DIO_u8GetPortValue>:
u8	 DIO_u8GetPortValue (u8 Local_Groupname)
{
    15c2:	df 93       	push	r29
    15c4:	cf 93       	push	r28
    15c6:	00 d0       	rcall	.+0      	; 0x15c8 <DIO_u8GetPortValue+0x6>
    15c8:	00 d0       	rcall	.+0      	; 0x15ca <DIO_u8GetPortValue+0x8>
    15ca:	0f 92       	push	r0
    15cc:	cd b7       	in	r28, 0x3d	; 61
    15ce:	de b7       	in	r29, 0x3e	; 62
    15d0:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_returndata = 0;
    15d2:	19 82       	std	Y+1, r1	; 0x01
	if (Local_Groupname <= Group_D)
    15d4:	8a 81       	ldd	r24, Y+2	; 0x02
    15d6:	85 30       	cpi	r24, 0x05	; 5
    15d8:	b0 f5       	brcc	.+108    	; 0x1646 <DIO_u8GetPortValue+0x84>
	{
		switch (Local_Groupname)
    15da:	8a 81       	ldd	r24, Y+2	; 0x02
    15dc:	28 2f       	mov	r18, r24
    15de:	30 e0       	ldi	r19, 0x00	; 0
    15e0:	3d 83       	std	Y+5, r19	; 0x05
    15e2:	2c 83       	std	Y+4, r18	; 0x04
    15e4:	8c 81       	ldd	r24, Y+4	; 0x04
    15e6:	9d 81       	ldd	r25, Y+5	; 0x05
    15e8:	82 30       	cpi	r24, 0x02	; 2
    15ea:	91 05       	cpc	r25, r1
    15ec:	d9 f0       	breq	.+54     	; 0x1624 <DIO_u8GetPortValue+0x62>
    15ee:	2c 81       	ldd	r18, Y+4	; 0x04
    15f0:	3d 81       	ldd	r19, Y+5	; 0x05
    15f2:	23 30       	cpi	r18, 0x03	; 3
    15f4:	31 05       	cpc	r19, r1
    15f6:	34 f4       	brge	.+12     	; 0x1604 <DIO_u8GetPortValue+0x42>
    15f8:	8c 81       	ldd	r24, Y+4	; 0x04
    15fa:	9d 81       	ldd	r25, Y+5	; 0x05
    15fc:	81 30       	cpi	r24, 0x01	; 1
    15fe:	91 05       	cpc	r25, r1
    1600:	61 f0       	breq	.+24     	; 0x161a <DIO_u8GetPortValue+0x58>
    1602:	1e c0       	rjmp	.+60     	; 0x1640 <DIO_u8GetPortValue+0x7e>
    1604:	2c 81       	ldd	r18, Y+4	; 0x04
    1606:	3d 81       	ldd	r19, Y+5	; 0x05
    1608:	23 30       	cpi	r18, 0x03	; 3
    160a:	31 05       	cpc	r19, r1
    160c:	81 f0       	breq	.+32     	; 0x162e <DIO_u8GetPortValue+0x6c>
    160e:	8c 81       	ldd	r24, Y+4	; 0x04
    1610:	9d 81       	ldd	r25, Y+5	; 0x05
    1612:	84 30       	cpi	r24, 0x04	; 4
    1614:	91 05       	cpc	r25, r1
    1616:	81 f0       	breq	.+32     	; 0x1638 <DIO_u8GetPortValue+0x76>
    1618:	13 c0       	rjmp	.+38     	; 0x1640 <DIO_u8GetPortValue+0x7e>
		{
			case Group_A:
				Local_returndata = DIO_PINA;
    161a:	e9 e3       	ldi	r30, 0x39	; 57
    161c:	f0 e0       	ldi	r31, 0x00	; 0
    161e:	80 81       	ld	r24, Z
    1620:	89 83       	std	Y+1, r24	; 0x01
    1622:	0e c0       	rjmp	.+28     	; 0x1640 <DIO_u8GetPortValue+0x7e>
				break;
			case Group_B:
				Local_returndata = DIO_PINB;
    1624:	e6 e3       	ldi	r30, 0x36	; 54
    1626:	f0 e0       	ldi	r31, 0x00	; 0
    1628:	80 81       	ld	r24, Z
    162a:	89 83       	std	Y+1, r24	; 0x01
    162c:	09 c0       	rjmp	.+18     	; 0x1640 <DIO_u8GetPortValue+0x7e>
				break;
			case Group_C:
				Local_returndata = DIO_PINC;
    162e:	e3 e3       	ldi	r30, 0x33	; 51
    1630:	f0 e0       	ldi	r31, 0x00	; 0
    1632:	80 81       	ld	r24, Z
    1634:	89 83       	std	Y+1, r24	; 0x01
    1636:	04 c0       	rjmp	.+8      	; 0x1640 <DIO_u8GetPortValue+0x7e>
				break;
			case Group_D:
				Local_returndata = DIO_PIND;
    1638:	e0 e3       	ldi	r30, 0x30	; 48
    163a:	f0 e0       	ldi	r31, 0x00	; 0
    163c:	80 81       	ld	r24, Z
    163e:	89 83       	std	Y+1, r24	; 0x01
				break;
		}
		return Local_returndata;
    1640:	99 81       	ldd	r25, Y+1	; 0x01
    1642:	9b 83       	std	Y+3, r25	; 0x03
    1644:	02 c0       	rjmp	.+4      	; 0x164a <DIO_u8GetPortValue+0x88>
	}
	else
	{
		return -1;
    1646:	2f ef       	ldi	r18, 0xFF	; 255
    1648:	2b 83       	std	Y+3, r18	; 0x03
    164a:	8b 81       	ldd	r24, Y+3	; 0x03
	}
}
    164c:	0f 90       	pop	r0
    164e:	0f 90       	pop	r0
    1650:	0f 90       	pop	r0
    1652:	0f 90       	pop	r0
    1654:	0f 90       	pop	r0
    1656:	cf 91       	pop	r28
    1658:	df 91       	pop	r29
    165a:	08 95       	ret

0000165c <DIO_VoidToggleBit>:
void DIO_VoidToggleBit(u8 Local_Groupname, u8 Local_PinNumber)
{
    165c:	df 93       	push	r29
    165e:	cf 93       	push	r28
    1660:	00 d0       	rcall	.+0      	; 0x1662 <DIO_VoidToggleBit+0x6>
    1662:	00 d0       	rcall	.+0      	; 0x1664 <DIO_VoidToggleBit+0x8>
    1664:	cd b7       	in	r28, 0x3d	; 61
    1666:	de b7       	in	r29, 0x3e	; 62
    1668:	89 83       	std	Y+1, r24	; 0x01
    166a:	6a 83       	std	Y+2, r22	; 0x02
	switch (Local_Groupname)
    166c:	89 81       	ldd	r24, Y+1	; 0x01
    166e:	28 2f       	mov	r18, r24
    1670:	30 e0       	ldi	r19, 0x00	; 0
    1672:	3c 83       	std	Y+4, r19	; 0x04
    1674:	2b 83       	std	Y+3, r18	; 0x03
    1676:	8b 81       	ldd	r24, Y+3	; 0x03
    1678:	9c 81       	ldd	r25, Y+4	; 0x04
    167a:	82 30       	cpi	r24, 0x02	; 2
    167c:	91 05       	cpc	r25, r1
    167e:	51 f1       	breq	.+84     	; 0x16d4 <DIO_VoidToggleBit+0x78>
    1680:	2b 81       	ldd	r18, Y+3	; 0x03
    1682:	3c 81       	ldd	r19, Y+4	; 0x04
    1684:	23 30       	cpi	r18, 0x03	; 3
    1686:	31 05       	cpc	r19, r1
    1688:	34 f4       	brge	.+12     	; 0x1696 <DIO_VoidToggleBit+0x3a>
    168a:	8b 81       	ldd	r24, Y+3	; 0x03
    168c:	9c 81       	ldd	r25, Y+4	; 0x04
    168e:	81 30       	cpi	r24, 0x01	; 1
    1690:	91 05       	cpc	r25, r1
    1692:	61 f0       	breq	.+24     	; 0x16ac <DIO_VoidToggleBit+0x50>
    1694:	5a c0       	rjmp	.+180    	; 0x174a <DIO_VoidToggleBit+0xee>
    1696:	2b 81       	ldd	r18, Y+3	; 0x03
    1698:	3c 81       	ldd	r19, Y+4	; 0x04
    169a:	23 30       	cpi	r18, 0x03	; 3
    169c:	31 05       	cpc	r19, r1
    169e:	71 f1       	breq	.+92     	; 0x16fc <DIO_VoidToggleBit+0xa0>
    16a0:	8b 81       	ldd	r24, Y+3	; 0x03
    16a2:	9c 81       	ldd	r25, Y+4	; 0x04
    16a4:	84 30       	cpi	r24, 0x04	; 4
    16a6:	91 05       	cpc	r25, r1
    16a8:	e9 f1       	breq	.+122    	; 0x1724 <DIO_VoidToggleBit+0xc8>
    16aa:	4f c0       	rjmp	.+158    	; 0x174a <DIO_VoidToggleBit+0xee>
	{
		case Group_A:
			toggle_Bit(DIO_PORTA, Local_PinNumber);
    16ac:	ab e3       	ldi	r26, 0x3B	; 59
    16ae:	b0 e0       	ldi	r27, 0x00	; 0
    16b0:	eb e3       	ldi	r30, 0x3B	; 59
    16b2:	f0 e0       	ldi	r31, 0x00	; 0
    16b4:	80 81       	ld	r24, Z
    16b6:	48 2f       	mov	r20, r24
    16b8:	8a 81       	ldd	r24, Y+2	; 0x02
    16ba:	28 2f       	mov	r18, r24
    16bc:	30 e0       	ldi	r19, 0x00	; 0
    16be:	81 e0       	ldi	r24, 0x01	; 1
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	02 2e       	mov	r0, r18
    16c4:	02 c0       	rjmp	.+4      	; 0x16ca <DIO_VoidToggleBit+0x6e>
    16c6:	88 0f       	add	r24, r24
    16c8:	99 1f       	adc	r25, r25
    16ca:	0a 94       	dec	r0
    16cc:	e2 f7       	brpl	.-8      	; 0x16c6 <DIO_VoidToggleBit+0x6a>
    16ce:	84 27       	eor	r24, r20
    16d0:	8c 93       	st	X, r24
    16d2:	3b c0       	rjmp	.+118    	; 0x174a <DIO_VoidToggleBit+0xee>
			break;
		case Group_B:
			toggle_Bit(DIO_PORTB, Local_PinNumber);
    16d4:	a8 e3       	ldi	r26, 0x38	; 56
    16d6:	b0 e0       	ldi	r27, 0x00	; 0
    16d8:	e8 e3       	ldi	r30, 0x38	; 56
    16da:	f0 e0       	ldi	r31, 0x00	; 0
    16dc:	80 81       	ld	r24, Z
    16de:	48 2f       	mov	r20, r24
    16e0:	8a 81       	ldd	r24, Y+2	; 0x02
    16e2:	28 2f       	mov	r18, r24
    16e4:	30 e0       	ldi	r19, 0x00	; 0
    16e6:	81 e0       	ldi	r24, 0x01	; 1
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	02 2e       	mov	r0, r18
    16ec:	02 c0       	rjmp	.+4      	; 0x16f2 <DIO_VoidToggleBit+0x96>
    16ee:	88 0f       	add	r24, r24
    16f0:	99 1f       	adc	r25, r25
    16f2:	0a 94       	dec	r0
    16f4:	e2 f7       	brpl	.-8      	; 0x16ee <DIO_VoidToggleBit+0x92>
    16f6:	84 27       	eor	r24, r20
    16f8:	8c 93       	st	X, r24
    16fa:	27 c0       	rjmp	.+78     	; 0x174a <DIO_VoidToggleBit+0xee>
			break;
		case Group_C:
			toggle_Bit(DIO_PORTC, Local_PinNumber);
    16fc:	a5 e3       	ldi	r26, 0x35	; 53
    16fe:	b0 e0       	ldi	r27, 0x00	; 0
    1700:	e5 e3       	ldi	r30, 0x35	; 53
    1702:	f0 e0       	ldi	r31, 0x00	; 0
    1704:	80 81       	ld	r24, Z
    1706:	48 2f       	mov	r20, r24
    1708:	8a 81       	ldd	r24, Y+2	; 0x02
    170a:	28 2f       	mov	r18, r24
    170c:	30 e0       	ldi	r19, 0x00	; 0
    170e:	81 e0       	ldi	r24, 0x01	; 1
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	02 2e       	mov	r0, r18
    1714:	02 c0       	rjmp	.+4      	; 0x171a <DIO_VoidToggleBit+0xbe>
    1716:	88 0f       	add	r24, r24
    1718:	99 1f       	adc	r25, r25
    171a:	0a 94       	dec	r0
    171c:	e2 f7       	brpl	.-8      	; 0x1716 <DIO_VoidToggleBit+0xba>
    171e:	84 27       	eor	r24, r20
    1720:	8c 93       	st	X, r24
    1722:	13 c0       	rjmp	.+38     	; 0x174a <DIO_VoidToggleBit+0xee>
			break;
		case Group_D:
			toggle_Bit(DIO_PORTD, Local_PinNumber);
    1724:	a2 e3       	ldi	r26, 0x32	; 50
    1726:	b0 e0       	ldi	r27, 0x00	; 0
    1728:	e2 e3       	ldi	r30, 0x32	; 50
    172a:	f0 e0       	ldi	r31, 0x00	; 0
    172c:	80 81       	ld	r24, Z
    172e:	48 2f       	mov	r20, r24
    1730:	8a 81       	ldd	r24, Y+2	; 0x02
    1732:	28 2f       	mov	r18, r24
    1734:	30 e0       	ldi	r19, 0x00	; 0
    1736:	81 e0       	ldi	r24, 0x01	; 1
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	02 2e       	mov	r0, r18
    173c:	02 c0       	rjmp	.+4      	; 0x1742 <DIO_VoidToggleBit+0xe6>
    173e:	88 0f       	add	r24, r24
    1740:	99 1f       	adc	r25, r25
    1742:	0a 94       	dec	r0
    1744:	e2 f7       	brpl	.-8      	; 0x173e <DIO_VoidToggleBit+0xe2>
    1746:	84 27       	eor	r24, r20
    1748:	8c 93       	st	X, r24
			break;
	}
}
    174a:	0f 90       	pop	r0
    174c:	0f 90       	pop	r0
    174e:	0f 90       	pop	r0
    1750:	0f 90       	pop	r0
    1752:	cf 91       	pop	r28
    1754:	df 91       	pop	r29
    1756:	08 95       	ret

00001758 <DIO_VoidTogglePORT>:
void DIO_VoidTogglePORT(u8 Local_Groupname)
{
    1758:	df 93       	push	r29
    175a:	cf 93       	push	r28
    175c:	00 d0       	rcall	.+0      	; 0x175e <DIO_VoidTogglePORT+0x6>
    175e:	0f 92       	push	r0
    1760:	cd b7       	in	r28, 0x3d	; 61
    1762:	de b7       	in	r29, 0x3e	; 62
    1764:	89 83       	std	Y+1, r24	; 0x01

	switch (Local_Groupname)
    1766:	89 81       	ldd	r24, Y+1	; 0x01
    1768:	28 2f       	mov	r18, r24
    176a:	30 e0       	ldi	r19, 0x00	; 0
    176c:	3b 83       	std	Y+3, r19	; 0x03
    176e:	2a 83       	std	Y+2, r18	; 0x02
    1770:	8a 81       	ldd	r24, Y+2	; 0x02
    1772:	9b 81       	ldd	r25, Y+3	; 0x03
    1774:	82 30       	cpi	r24, 0x02	; 2
    1776:	91 05       	cpc	r25, r1
    1778:	f1 f0       	breq	.+60     	; 0x17b6 <DIO_VoidTogglePORT+0x5e>
    177a:	2a 81       	ldd	r18, Y+2	; 0x02
    177c:	3b 81       	ldd	r19, Y+3	; 0x03
    177e:	23 30       	cpi	r18, 0x03	; 3
    1780:	31 05       	cpc	r19, r1
    1782:	34 f4       	brge	.+12     	; 0x1790 <DIO_VoidTogglePORT+0x38>
    1784:	8a 81       	ldd	r24, Y+2	; 0x02
    1786:	9b 81       	ldd	r25, Y+3	; 0x03
    1788:	81 30       	cpi	r24, 0x01	; 1
    178a:	91 05       	cpc	r25, r1
    178c:	61 f0       	breq	.+24     	; 0x17a6 <DIO_VoidTogglePORT+0x4e>
    178e:	2a c0       	rjmp	.+84     	; 0x17e4 <DIO_VoidTogglePORT+0x8c>
    1790:	2a 81       	ldd	r18, Y+2	; 0x02
    1792:	3b 81       	ldd	r19, Y+3	; 0x03
    1794:	23 30       	cpi	r18, 0x03	; 3
    1796:	31 05       	cpc	r19, r1
    1798:	b1 f0       	breq	.+44     	; 0x17c6 <DIO_VoidTogglePORT+0x6e>
    179a:	8a 81       	ldd	r24, Y+2	; 0x02
    179c:	9b 81       	ldd	r25, Y+3	; 0x03
    179e:	84 30       	cpi	r24, 0x04	; 4
    17a0:	91 05       	cpc	r25, r1
    17a2:	c9 f0       	breq	.+50     	; 0x17d6 <DIO_VoidTogglePORT+0x7e>
    17a4:	1f c0       	rjmp	.+62     	; 0x17e4 <DIO_VoidTogglePORT+0x8c>
	{
		case Group_A:
			DIO_PORTA = ~DIO_PORTA;
    17a6:	ab e3       	ldi	r26, 0x3B	; 59
    17a8:	b0 e0       	ldi	r27, 0x00	; 0
    17aa:	eb e3       	ldi	r30, 0x3B	; 59
    17ac:	f0 e0       	ldi	r31, 0x00	; 0
    17ae:	80 81       	ld	r24, Z
    17b0:	80 95       	com	r24
    17b2:	8c 93       	st	X, r24
    17b4:	17 c0       	rjmp	.+46     	; 0x17e4 <DIO_VoidTogglePORT+0x8c>
			break;
		case Group_B:
			DIO_PORTB = ~DIO_PORTB;
    17b6:	a8 e3       	ldi	r26, 0x38	; 56
    17b8:	b0 e0       	ldi	r27, 0x00	; 0
    17ba:	e8 e3       	ldi	r30, 0x38	; 56
    17bc:	f0 e0       	ldi	r31, 0x00	; 0
    17be:	80 81       	ld	r24, Z
    17c0:	80 95       	com	r24
    17c2:	8c 93       	st	X, r24
    17c4:	0f c0       	rjmp	.+30     	; 0x17e4 <DIO_VoidTogglePORT+0x8c>
			break;
		case Group_C:
			DIO_PORTC = ~DIO_PORTC;
    17c6:	a5 e3       	ldi	r26, 0x35	; 53
    17c8:	b0 e0       	ldi	r27, 0x00	; 0
    17ca:	e5 e3       	ldi	r30, 0x35	; 53
    17cc:	f0 e0       	ldi	r31, 0x00	; 0
    17ce:	80 81       	ld	r24, Z
    17d0:	80 95       	com	r24
    17d2:	8c 93       	st	X, r24
    17d4:	07 c0       	rjmp	.+14     	; 0x17e4 <DIO_VoidTogglePORT+0x8c>
			break;
		case Group_D:
			DIO_PORTD = ~DIO_PORTD;
    17d6:	a2 e3       	ldi	r26, 0x32	; 50
    17d8:	b0 e0       	ldi	r27, 0x00	; 0
    17da:	e2 e3       	ldi	r30, 0x32	; 50
    17dc:	f0 e0       	ldi	r31, 0x00	; 0
    17de:	80 81       	ld	r24, Z
    17e0:	80 95       	com	r24
    17e2:	8c 93       	st	X, r24
			break;
	}

}
    17e4:	0f 90       	pop	r0
    17e6:	0f 90       	pop	r0
    17e8:	0f 90       	pop	r0
    17ea:	cf 91       	pop	r28
    17ec:	df 91       	pop	r29
    17ee:	08 95       	ret

000017f0 <ADC_VoidInitPolling>:
#include "../Header/ADC_Private.h"
#include "../Header/ADC_Config.h"
#include "../Header/ADC_interface.h"

void ADC_VoidInitPolling	(void)
{
    17f0:	df 93       	push	r29
    17f2:	cf 93       	push	r28
    17f4:	cd b7       	in	r28, 0x3d	; 61
    17f6:	de b7       	in	r29, 0x3e	; 62
	/*enable ADC*/
	Set_Bit(ADC_ADCSRA, ADC_ADEN);
    17f8:	a6 e2       	ldi	r26, 0x26	; 38
    17fa:	b0 e0       	ldi	r27, 0x00	; 0
    17fc:	e6 e2       	ldi	r30, 0x26	; 38
    17fe:	f0 e0       	ldi	r31, 0x00	; 0
    1800:	80 81       	ld	r24, Z
    1802:	80 68       	ori	r24, 0x80	; 128
    1804:	8c 93       	st	X, r24
	/*Set reference voltage to AVCC*/
	Set_Bit(ADC_ADMUX, ADC_REFS0);
    1806:	a7 e2       	ldi	r26, 0x27	; 39
    1808:	b0 e0       	ldi	r27, 0x00	; 0
    180a:	e7 e2       	ldi	r30, 0x27	; 39
    180c:	f0 e0       	ldi	r31, 0x00	; 0
    180e:	80 81       	ld	r24, Z
    1810:	80 64       	ori	r24, 0x40	; 64
    1812:	8c 93       	st	X, r24
	clear_Bit(ADC_ADMUX, ADC_REFS1);
    1814:	a7 e2       	ldi	r26, 0x27	; 39
    1816:	b0 e0       	ldi	r27, 0x00	; 0
    1818:	e7 e2       	ldi	r30, 0x27	; 39
    181a:	f0 e0       	ldi	r31, 0x00	; 0
    181c:	80 81       	ld	r24, Z
    181e:	8f 77       	andi	r24, 0x7F	; 127
    1820:	8c 93       	st	X, r24
	/*deactivate left adjust result*/
	clear_Bit(ADC_ADMUX,ADC_ADLAR);
    1822:	a7 e2       	ldi	r26, 0x27	; 39
    1824:	b0 e0       	ldi	r27, 0x00	; 0
    1826:	e7 e2       	ldi	r30, 0x27	; 39
    1828:	f0 e0       	ldi	r31, 0x00	; 0
    182a:	80 81       	ld	r24, Z
    182c:	8f 7d       	andi	r24, 0xDF	; 223
    182e:	8c 93       	st	X, r24
	/*Select prescaler to 32 --> 011*/
	Set_Bit(ADC_ADCSRA, ADC_ADPS0);
    1830:	a6 e2       	ldi	r26, 0x26	; 38
    1832:	b0 e0       	ldi	r27, 0x00	; 0
    1834:	e6 e2       	ldi	r30, 0x26	; 38
    1836:	f0 e0       	ldi	r31, 0x00	; 0
    1838:	80 81       	ld	r24, Z
    183a:	81 60       	ori	r24, 0x01	; 1
    183c:	8c 93       	st	X, r24
	Set_Bit(ADC_ADCSRA, ADC_ADPS1);
    183e:	a6 e2       	ldi	r26, 0x26	; 38
    1840:	b0 e0       	ldi	r27, 0x00	; 0
    1842:	e6 e2       	ldi	r30, 0x26	; 38
    1844:	f0 e0       	ldi	r31, 0x00	; 0
    1846:	80 81       	ld	r24, Z
    1848:	82 60       	ori	r24, 0x02	; 2
    184a:	8c 93       	st	X, r24
	Set_Bit(ADC_ADCSRA, ADC_ADPS2);
    184c:	a6 e2       	ldi	r26, 0x26	; 38
    184e:	b0 e0       	ldi	r27, 0x00	; 0
    1850:	e6 e2       	ldi	r30, 0x26	; 38
    1852:	f0 e0       	ldi	r31, 0x00	; 0
    1854:	80 81       	ld	r24, Z
    1856:	84 60       	ori	r24, 0x04	; 4
    1858:	8c 93       	st	X, r24

}
    185a:	cf 91       	pop	r28
    185c:	df 91       	pop	r29
    185e:	08 95       	ret

00001860 <ADC_VoidInitInterrupt>:
void ADC_VoidInitInterrupt	(void)
{
    1860:	df 93       	push	r29
    1862:	cf 93       	push	r28
    1864:	cd b7       	in	r28, 0x3d	; 61
    1866:	de b7       	in	r29, 0x3e	; 62
	/*enable ADC*/
	Set_Bit(ADC_ADCSRA, ADC_ADEN);
    1868:	a6 e2       	ldi	r26, 0x26	; 38
    186a:	b0 e0       	ldi	r27, 0x00	; 0
    186c:	e6 e2       	ldi	r30, 0x26	; 38
    186e:	f0 e0       	ldi	r31, 0x00	; 0
    1870:	80 81       	ld	r24, Z
    1872:	80 68       	ori	r24, 0x80	; 128
    1874:	8c 93       	st	X, r24
	/*Set reference voltage to AVCC*/
	Set_Bit(ADC_ADMUX, ADC_REFS0);
    1876:	a7 e2       	ldi	r26, 0x27	; 39
    1878:	b0 e0       	ldi	r27, 0x00	; 0
    187a:	e7 e2       	ldi	r30, 0x27	; 39
    187c:	f0 e0       	ldi	r31, 0x00	; 0
    187e:	80 81       	ld	r24, Z
    1880:	80 64       	ori	r24, 0x40	; 64
    1882:	8c 93       	st	X, r24
	clear_Bit(ADC_ADMUX, ADC_REFS1);
    1884:	a7 e2       	ldi	r26, 0x27	; 39
    1886:	b0 e0       	ldi	r27, 0x00	; 0
    1888:	e7 e2       	ldi	r30, 0x27	; 39
    188a:	f0 e0       	ldi	r31, 0x00	; 0
    188c:	80 81       	ld	r24, Z
    188e:	8f 77       	andi	r24, 0x7F	; 127
    1890:	8c 93       	st	X, r24
	/*activate left adjust result*/
	Set_Bit(ADC_ADMUX,ADC_ADLAR);
    1892:	a7 e2       	ldi	r26, 0x27	; 39
    1894:	b0 e0       	ldi	r27, 0x00	; 0
    1896:	e7 e2       	ldi	r30, 0x27	; 39
    1898:	f0 e0       	ldi	r31, 0x00	; 0
    189a:	80 81       	ld	r24, Z
    189c:	80 62       	ori	r24, 0x20	; 32
    189e:	8c 93       	st	X, r24
	/*Select prescaler to 8 --> 011*/
	Set_Bit(ADC_ADCSRA, ADC_ADPS0);
    18a0:	a6 e2       	ldi	r26, 0x26	; 38
    18a2:	b0 e0       	ldi	r27, 0x00	; 0
    18a4:	e6 e2       	ldi	r30, 0x26	; 38
    18a6:	f0 e0       	ldi	r31, 0x00	; 0
    18a8:	80 81       	ld	r24, Z
    18aa:	81 60       	ori	r24, 0x01	; 1
    18ac:	8c 93       	st	X, r24
	Set_Bit(ADC_ADCSRA, ADC_ADPS1);
    18ae:	a6 e2       	ldi	r26, 0x26	; 38
    18b0:	b0 e0       	ldi	r27, 0x00	; 0
    18b2:	e6 e2       	ldi	r30, 0x26	; 38
    18b4:	f0 e0       	ldi	r31, 0x00	; 0
    18b6:	80 81       	ld	r24, Z
    18b8:	82 60       	ori	r24, 0x02	; 2
    18ba:	8c 93       	st	X, r24
	clear_Bit(ADC_ADCSRA, ADC_ADPS2);
    18bc:	a6 e2       	ldi	r26, 0x26	; 38
    18be:	b0 e0       	ldi	r27, 0x00	; 0
    18c0:	e6 e2       	ldi	r30, 0x26	; 38
    18c2:	f0 e0       	ldi	r31, 0x00	; 0
    18c4:	80 81       	ld	r24, Z
    18c6:	8b 7f       	andi	r24, 0xFB	; 251
    18c8:	8c 93       	st	X, r24
}
    18ca:	cf 91       	pop	r28
    18cc:	df 91       	pop	r29
    18ce:	08 95       	ret

000018d0 <ADC_U16GetValue>:

u16 ADC_U16GetValue(u8 ADC_Channel)
{
    18d0:	df 93       	push	r29
    18d2:	cf 93       	push	r28
    18d4:	00 d0       	rcall	.+0      	; 0x18d6 <ADC_U16GetValue+0x6>
    18d6:	0f 92       	push	r0
    18d8:	cd b7       	in	r28, 0x3d	; 61
    18da:	de b7       	in	r29, 0x3e	; 62
    18dc:	8b 83       	std	Y+3, r24	; 0x03
	u16 LOCAL_READ ;
	/*Select THe 5 Bit */
	ADC_Channel  = ADC_Channel & 0x1F;
    18de:	8b 81       	ldd	r24, Y+3	; 0x03
    18e0:	8f 71       	andi	r24, 0x1F	; 31
    18e2:	8b 83       	std	Y+3, r24	; 0x03
	ADC_ADMUX  &= 0xE0 ;
    18e4:	a7 e2       	ldi	r26, 0x27	; 39
    18e6:	b0 e0       	ldi	r27, 0x00	; 0
    18e8:	e7 e2       	ldi	r30, 0x27	; 39
    18ea:	f0 e0       	ldi	r31, 0x00	; 0
    18ec:	80 81       	ld	r24, Z
    18ee:	80 7e       	andi	r24, 0xE0	; 224
    18f0:	8c 93       	st	X, r24
	ADC_ADMUX  |= ADC_Channel ;
    18f2:	a7 e2       	ldi	r26, 0x27	; 39
    18f4:	b0 e0       	ldi	r27, 0x00	; 0
    18f6:	e7 e2       	ldi	r30, 0x27	; 39
    18f8:	f0 e0       	ldi	r31, 0x00	; 0
    18fa:	90 81       	ld	r25, Z
    18fc:	8b 81       	ldd	r24, Y+3	; 0x03
    18fe:	89 2b       	or	r24, r25
    1900:	8c 93       	st	X, r24
	/*Start conversion*/
	ADC_ADCSRA |= (1<<ADC_ADSC);
    1902:	a6 e2       	ldi	r26, 0x26	; 38
    1904:	b0 e0       	ldi	r27, 0x00	; 0
    1906:	e6 e2       	ldi	r30, 0x26	; 38
    1908:	f0 e0       	ldi	r31, 0x00	; 0
    190a:	80 81       	ld	r24, Z
    190c:	80 64       	ori	r24, 0x40	; 64
    190e:	8c 93       	st	X, r24
	while((Get_Bit(ADC_ADCSRA,ADC_ADIF)) == 0);
    1910:	e6 e2       	ldi	r30, 0x26	; 38
    1912:	f0 e0       	ldi	r31, 0x00	; 0
    1914:	80 81       	ld	r24, Z
    1916:	82 95       	swap	r24
    1918:	8f 70       	andi	r24, 0x0F	; 15
    191a:	88 2f       	mov	r24, r24
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	81 70       	andi	r24, 0x01	; 1
    1920:	90 70       	andi	r25, 0x00	; 0
    1922:	00 97       	sbiw	r24, 0x00	; 0
    1924:	a9 f3       	breq	.-22     	; 0x1910 <ADC_U16GetValue+0x40>
	LOCAL_READ = ADC_ADCW;
    1926:	e4 e2       	ldi	r30, 0x24	; 36
    1928:	f0 e0       	ldi	r31, 0x00	; 0
    192a:	80 81       	ld	r24, Z
    192c:	91 81       	ldd	r25, Z+1	; 0x01
    192e:	9a 83       	std	Y+2, r25	; 0x02
    1930:	89 83       	std	Y+1, r24	; 0x01
	return LOCAL_READ;
    1932:	89 81       	ldd	r24, Y+1	; 0x01
    1934:	9a 81       	ldd	r25, Y+2	; 0x02

}
    1936:	0f 90       	pop	r0
    1938:	0f 90       	pop	r0
    193a:	0f 90       	pop	r0
    193c:	cf 91       	pop	r28
    193e:	df 91       	pop	r29
    1940:	08 95       	ret

00001942 <TEMPL35_VoidInit>:
#include "../../../Common/Macro's.h"

#include "../../../MCAL/ADC/Header/ADC_interface.h"

void TEMPL35_VoidInit(void)
{
    1942:	df 93       	push	r29
    1944:	cf 93       	push	r28
    1946:	cd b7       	in	r28, 0x3d	; 61
    1948:	de b7       	in	r29, 0x3e	; 62
	ADC_VoidInitPolling();
    194a:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <ADC_VoidInitPolling>
}
    194e:	cf 91       	pop	r28
    1950:	df 91       	pop	r29
    1952:	08 95       	ret

00001954 <TEMPL35_u8GetTemp>:
u8 TEMPL35_u8GetTemp(u8 Local_Channel)
{
    1954:	df 93       	push	r29
    1956:	cf 93       	push	r28
    1958:	00 d0       	rcall	.+0      	; 0x195a <TEMPL35_u8GetTemp+0x6>
    195a:	00 d0       	rcall	.+0      	; 0x195c <TEMPL35_u8GetTemp+0x8>
    195c:	00 d0       	rcall	.+0      	; 0x195e <TEMPL35_u8GetTemp+0xa>
    195e:	cd b7       	in	r28, 0x3d	; 61
    1960:	de b7       	in	r29, 0x3e	; 62
    1962:	8e 83       	std	Y+6, r24	; 0x06
	u16 Digital_Volt = ADC_U16GetValue(Local_Channel);
    1964:	8e 81       	ldd	r24, Y+6	; 0x06
    1966:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <ADC_U16GetValue>
    196a:	9d 83       	std	Y+5, r25	; 0x05
    196c:	8c 83       	std	Y+4, r24	; 0x04
	u16 Analog_volt = (u16)(((u32)Digital_Volt * 5000UL) / 1024);
    196e:	8c 81       	ldd	r24, Y+4	; 0x04
    1970:	9d 81       	ldd	r25, Y+5	; 0x05
    1972:	cc 01       	movw	r24, r24
    1974:	a0 e0       	ldi	r26, 0x00	; 0
    1976:	b0 e0       	ldi	r27, 0x00	; 0
    1978:	28 e8       	ldi	r18, 0x88	; 136
    197a:	33 e1       	ldi	r19, 0x13	; 19
    197c:	40 e0       	ldi	r20, 0x00	; 0
    197e:	50 e0       	ldi	r21, 0x00	; 0
    1980:	bc 01       	movw	r22, r24
    1982:	cd 01       	movw	r24, r26
    1984:	0e 94 d1 1b 	call	0x37a2	; 0x37a2 <__mulsi3>
    1988:	dc 01       	movw	r26, r24
    198a:	cb 01       	movw	r24, r22
    198c:	07 2e       	mov	r0, r23
    198e:	7a e0       	ldi	r23, 0x0A	; 10
    1990:	b6 95       	lsr	r27
    1992:	a7 95       	ror	r26
    1994:	97 95       	ror	r25
    1996:	87 95       	ror	r24
    1998:	7a 95       	dec	r23
    199a:	d1 f7       	brne	.-12     	; 0x1990 <TEMPL35_u8GetTemp+0x3c>
    199c:	70 2d       	mov	r23, r0
    199e:	9b 83       	std	Y+3, r25	; 0x03
    19a0:	8a 83       	std	Y+2, r24	; 0x02
	u8 Temprature = Analog_volt/10 ; //check about this equation
    19a2:	8a 81       	ldd	r24, Y+2	; 0x02
    19a4:	9b 81       	ldd	r25, Y+3	; 0x03
    19a6:	2a e0       	ldi	r18, 0x0A	; 10
    19a8:	30 e0       	ldi	r19, 0x00	; 0
    19aa:	b9 01       	movw	r22, r18
    19ac:	0e 94 f0 1b 	call	0x37e0	; 0x37e0 <__udivmodhi4>
    19b0:	cb 01       	movw	r24, r22
    19b2:	89 83       	std	Y+1, r24	; 0x01
	return Temprature ;
    19b4:	89 81       	ldd	r24, Y+1	; 0x01
}
    19b6:	26 96       	adiw	r28, 0x06	; 6
    19b8:	0f b6       	in	r0, 0x3f	; 63
    19ba:	f8 94       	cli
    19bc:	de bf       	out	0x3e, r29	; 62
    19be:	0f be       	out	0x3f, r0	; 63
    19c0:	cd bf       	out	0x3d, r28	; 61
    19c2:	cf 91       	pop	r28
    19c4:	df 91       	pop	r29
    19c6:	08 95       	ret

000019c8 <LED_VoidInit>:
#include "../../../MCAL/DIO/Header/DIO_interface.h"
#include "../Header/LED_Config.h"
#include "../Header/LED_interface.h"

void LED_VoidInit(void)
{
    19c8:	df 93       	push	r29
    19ca:	cf 93       	push	r28
    19cc:	00 d0       	rcall	.+0      	; 0x19ce <LED_VoidInit+0x6>
    19ce:	cd b7       	in	r28, 0x3d	; 61
    19d0:	de b7       	in	r29, 0x3e	; 62
	for(int i = 0; i < LEDs_Num; i++)
    19d2:	1a 82       	std	Y+2, r1	; 0x02
    19d4:	19 82       	std	Y+1, r1	; 0x01
    19d6:	0d c0       	rjmp	.+26     	; 0x19f2 <LED_VoidInit+0x2a>
	{
		DIO_VoidSetPinDir(LEDs_Group, LED1 + i,Output);
    19d8:	89 81       	ldd	r24, Y+1	; 0x01
    19da:	98 2f       	mov	r25, r24
    19dc:	9e 5f       	subi	r25, 0xFE	; 254
    19de:	84 e0       	ldi	r24, 0x04	; 4
    19e0:	69 2f       	mov	r22, r25
    19e2:	41 e0       	ldi	r20, 0x01	; 1
    19e4:	0e 94 c1 07 	call	0xf82	; 0xf82 <DIO_VoidSetPinDir>
#include "../Header/LED_Config.h"
#include "../Header/LED_interface.h"

void LED_VoidInit(void)
{
	for(int i = 0; i < LEDs_Num; i++)
    19e8:	89 81       	ldd	r24, Y+1	; 0x01
    19ea:	9a 81       	ldd	r25, Y+2	; 0x02
    19ec:	01 96       	adiw	r24, 0x01	; 1
    19ee:	9a 83       	std	Y+2, r25	; 0x02
    19f0:	89 83       	std	Y+1, r24	; 0x01
    19f2:	89 81       	ldd	r24, Y+1	; 0x01
    19f4:	9a 81       	ldd	r25, Y+2	; 0x02
    19f6:	86 30       	cpi	r24, 0x06	; 6
    19f8:	91 05       	cpc	r25, r1
    19fa:	74 f3       	brlt	.-36     	; 0x19d8 <LED_VoidInit+0x10>
	{
		DIO_VoidSetPinDir(LEDs_Group, LED1 + i,Output);
	}
}
    19fc:	0f 90       	pop	r0
    19fe:	0f 90       	pop	r0
    1a00:	cf 91       	pop	r28
    1a02:	df 91       	pop	r29
    1a04:	08 95       	ret

00001a06 <LED_VoidTurnOffAll>:

void LED_VoidTurnOffAll(void)
{
    1a06:	df 93       	push	r29
    1a08:	cf 93       	push	r28
    1a0a:	00 d0       	rcall	.+0      	; 0x1a0c <LED_VoidTurnOffAll+0x6>
    1a0c:	cd b7       	in	r28, 0x3d	; 61
    1a0e:	de b7       	in	r29, 0x3e	; 62
	for(int i = 0; i < LEDs_Num; i++)
    1a10:	1a 82       	std	Y+2, r1	; 0x02
    1a12:	19 82       	std	Y+1, r1	; 0x01
    1a14:	0d c0       	rjmp	.+26     	; 0x1a30 <LED_VoidTurnOffAll+0x2a>
	{
		DIO_VoidSetPinValue(LEDs_Group, LED1 + i,Low);
    1a16:	89 81       	ldd	r24, Y+1	; 0x01
    1a18:	98 2f       	mov	r25, r24
    1a1a:	9e 5f       	subi	r25, 0xFE	; 254
    1a1c:	84 e0       	ldi	r24, 0x04	; 4
    1a1e:	69 2f       	mov	r22, r25
    1a20:	40 e0       	ldi	r20, 0x00	; 0
    1a22:	0e 94 cb 08 	call	0x1196	; 0x1196 <DIO_VoidSetPinValue>
	}
}

void LED_VoidTurnOffAll(void)
{
	for(int i = 0; i < LEDs_Num; i++)
    1a26:	89 81       	ldd	r24, Y+1	; 0x01
    1a28:	9a 81       	ldd	r25, Y+2	; 0x02
    1a2a:	01 96       	adiw	r24, 0x01	; 1
    1a2c:	9a 83       	std	Y+2, r25	; 0x02
    1a2e:	89 83       	std	Y+1, r24	; 0x01
    1a30:	89 81       	ldd	r24, Y+1	; 0x01
    1a32:	9a 81       	ldd	r25, Y+2	; 0x02
    1a34:	86 30       	cpi	r24, 0x06	; 6
    1a36:	91 05       	cpc	r25, r1
    1a38:	74 f3       	brlt	.-36     	; 0x1a16 <LED_VoidTurnOffAll+0x10>
	{
		DIO_VoidSetPinValue(LEDs_Group, LED1 + i,Low);
	}
}
    1a3a:	0f 90       	pop	r0
    1a3c:	0f 90       	pop	r0
    1a3e:	cf 91       	pop	r28
    1a40:	df 91       	pop	r29
    1a42:	08 95       	ret

00001a44 <LED_VoidTurnOnAll>:

void LED_VoidTurnOnAll(void)
{
    1a44:	df 93       	push	r29
    1a46:	cf 93       	push	r28
    1a48:	00 d0       	rcall	.+0      	; 0x1a4a <LED_VoidTurnOnAll+0x6>
    1a4a:	cd b7       	in	r28, 0x3d	; 61
    1a4c:	de b7       	in	r29, 0x3e	; 62
	for(int i = 0; i < LEDs_Num; i++)
    1a4e:	1a 82       	std	Y+2, r1	; 0x02
    1a50:	19 82       	std	Y+1, r1	; 0x01
    1a52:	0d c0       	rjmp	.+26     	; 0x1a6e <LED_VoidTurnOnAll+0x2a>
	{
		DIO_VoidSetPinValue(LEDs_Group, LED1 + i,High);
    1a54:	89 81       	ldd	r24, Y+1	; 0x01
    1a56:	98 2f       	mov	r25, r24
    1a58:	9e 5f       	subi	r25, 0xFE	; 254
    1a5a:	84 e0       	ldi	r24, 0x04	; 4
    1a5c:	69 2f       	mov	r22, r25
    1a5e:	41 e0       	ldi	r20, 0x01	; 1
    1a60:	0e 94 cb 08 	call	0x1196	; 0x1196 <DIO_VoidSetPinValue>
	}
}

void LED_VoidTurnOnAll(void)
{
	for(int i = 0; i < LEDs_Num; i++)
    1a64:	89 81       	ldd	r24, Y+1	; 0x01
    1a66:	9a 81       	ldd	r25, Y+2	; 0x02
    1a68:	01 96       	adiw	r24, 0x01	; 1
    1a6a:	9a 83       	std	Y+2, r25	; 0x02
    1a6c:	89 83       	std	Y+1, r24	; 0x01
    1a6e:	89 81       	ldd	r24, Y+1	; 0x01
    1a70:	9a 81       	ldd	r25, Y+2	; 0x02
    1a72:	86 30       	cpi	r24, 0x06	; 6
    1a74:	91 05       	cpc	r25, r1
    1a76:	74 f3       	brlt	.-36     	; 0x1a54 <LED_VoidTurnOnAll+0x10>
	{
		DIO_VoidSetPinValue(LEDs_Group, LED1 + i,High);
	}
}
    1a78:	0f 90       	pop	r0
    1a7a:	0f 90       	pop	r0
    1a7c:	cf 91       	pop	r28
    1a7e:	df 91       	pop	r29
    1a80:	08 95       	ret

00001a82 <LED_VoidToggleAll>:
void LED_VoidToggleAll(void)
{
    1a82:	df 93       	push	r29
    1a84:	cf 93       	push	r28
    1a86:	00 d0       	rcall	.+0      	; 0x1a88 <LED_VoidToggleAll+0x6>
    1a88:	cd b7       	in	r28, 0x3d	; 61
    1a8a:	de b7       	in	r29, 0x3e	; 62
	for(int i = 0; i < LEDs_Num; i++)
    1a8c:	1a 82       	std	Y+2, r1	; 0x02
    1a8e:	19 82       	std	Y+1, r1	; 0x01
    1a90:	0c c0       	rjmp	.+24     	; 0x1aaa <LED_VoidToggleAll+0x28>
	{
		DIO_VoidToggleBit(LEDs_Group, LED1 + i);
    1a92:	89 81       	ldd	r24, Y+1	; 0x01
    1a94:	98 2f       	mov	r25, r24
    1a96:	9e 5f       	subi	r25, 0xFE	; 254
    1a98:	84 e0       	ldi	r24, 0x04	; 4
    1a9a:	69 2f       	mov	r22, r25
    1a9c:	0e 94 2e 0b 	call	0x165c	; 0x165c <DIO_VoidToggleBit>
		DIO_VoidSetPinValue(LEDs_Group, LED1 + i,High);
	}
}
void LED_VoidToggleAll(void)
{
	for(int i = 0; i < LEDs_Num; i++)
    1aa0:	89 81       	ldd	r24, Y+1	; 0x01
    1aa2:	9a 81       	ldd	r25, Y+2	; 0x02
    1aa4:	01 96       	adiw	r24, 0x01	; 1
    1aa6:	9a 83       	std	Y+2, r25	; 0x02
    1aa8:	89 83       	std	Y+1, r24	; 0x01
    1aaa:	89 81       	ldd	r24, Y+1	; 0x01
    1aac:	9a 81       	ldd	r25, Y+2	; 0x02
    1aae:	86 30       	cpi	r24, 0x06	; 6
    1ab0:	91 05       	cpc	r25, r1
    1ab2:	7c f3       	brlt	.-34     	; 0x1a92 <LED_VoidToggleAll+0x10>
	{
		DIO_VoidToggleBit(LEDs_Group, LED1 + i);
	}
}
    1ab4:	0f 90       	pop	r0
    1ab6:	0f 90       	pop	r0
    1ab8:	cf 91       	pop	r28
    1aba:	df 91       	pop	r29
    1abc:	08 95       	ret

00001abe <LED_VoidTurnOnOne>:
void LED_VoidTurnOnOne(u8 Local_LED_number)
{
    1abe:	df 93       	push	r29
    1ac0:	cf 93       	push	r28
    1ac2:	0f 92       	push	r0
    1ac4:	cd b7       	in	r28, 0x3d	; 61
    1ac6:	de b7       	in	r29, 0x3e	; 62
    1ac8:	89 83       	std	Y+1, r24	; 0x01
	DIO_VoidSetPinDir(LEDs_Group,Local_LED_number,Output);
    1aca:	84 e0       	ldi	r24, 0x04	; 4
    1acc:	69 81       	ldd	r22, Y+1	; 0x01
    1ace:	41 e0       	ldi	r20, 0x01	; 1
    1ad0:	0e 94 c1 07 	call	0xf82	; 0xf82 <DIO_VoidSetPinDir>
	DIO_VoidSetPinValue(LEDs_Group, Local_LED_number, High);
    1ad4:	84 e0       	ldi	r24, 0x04	; 4
    1ad6:	69 81       	ldd	r22, Y+1	; 0x01
    1ad8:	41 e0       	ldi	r20, 0x01	; 1
    1ada:	0e 94 cb 08 	call	0x1196	; 0x1196 <DIO_VoidSetPinValue>
}
    1ade:	0f 90       	pop	r0
    1ae0:	cf 91       	pop	r28
    1ae2:	df 91       	pop	r29
    1ae4:	08 95       	ret

00001ae6 <LED_VoidTurnOffOne>:

void LED_VoidTurnOffOne(u8 Local_LED_number)
{
    1ae6:	df 93       	push	r29
    1ae8:	cf 93       	push	r28
    1aea:	0f 92       	push	r0
    1aec:	cd b7       	in	r28, 0x3d	; 61
    1aee:	de b7       	in	r29, 0x3e	; 62
    1af0:	89 83       	std	Y+1, r24	; 0x01
	DIO_VoidSetPinValue(LEDs_Group, Local_LED_number, Low);
    1af2:	84 e0       	ldi	r24, 0x04	; 4
    1af4:	69 81       	ldd	r22, Y+1	; 0x01
    1af6:	40 e0       	ldi	r20, 0x00	; 0
    1af8:	0e 94 cb 08 	call	0x1196	; 0x1196 <DIO_VoidSetPinValue>
}
    1afc:	0f 90       	pop	r0
    1afe:	cf 91       	pop	r28
    1b00:	df 91       	pop	r29
    1b02:	08 95       	ret

00001b04 <LED_VoidToggleOne>:
void LED_VoidToggleOne(u8 Local_LED_number)
{
    1b04:	df 93       	push	r29
    1b06:	cf 93       	push	r28
    1b08:	0f 92       	push	r0
    1b0a:	cd b7       	in	r28, 0x3d	; 61
    1b0c:	de b7       	in	r29, 0x3e	; 62
    1b0e:	89 83       	std	Y+1, r24	; 0x01
	DIO_VoidToggleBit(LEDs_Group,Local_LED_number);
    1b10:	84 e0       	ldi	r24, 0x04	; 4
    1b12:	69 81       	ldd	r22, Y+1	; 0x01
    1b14:	0e 94 2e 0b 	call	0x165c	; 0x165c <DIO_VoidToggleBit>
}
    1b18:	0f 90       	pop	r0
    1b1a:	cf 91       	pop	r28
    1b1c:	df 91       	pop	r29
    1b1e:	08 95       	ret

00001b20 <LED_VoidTurnOnRightGroup>:
void LED_VoidTurnOnRightGroup(u8 Local_LED_number, u8 Local_NumberOfLEDs)
{
    1b20:	df 93       	push	r29
    1b22:	cf 93       	push	r28
    1b24:	00 d0       	rcall	.+0      	; 0x1b26 <LED_VoidTurnOnRightGroup+0x6>
    1b26:	0f 92       	push	r0
    1b28:	cd b7       	in	r28, 0x3d	; 61
    1b2a:	de b7       	in	r29, 0x3e	; 62
    1b2c:	8a 83       	std	Y+2, r24	; 0x02
    1b2e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_Count = 0;
    1b30:	19 82       	std	Y+1, r1	; 0x01
	for (Local_Count = Local_LED_number; Local_Count < Local_LED_number+Local_NumberOfLEDs; Local_Count++)
    1b32:	8a 81       	ldd	r24, Y+2	; 0x02
    1b34:	89 83       	std	Y+1, r24	; 0x01
    1b36:	08 c0       	rjmp	.+16     	; 0x1b48 <LED_VoidTurnOnRightGroup+0x28>
	{
		DIO_VoidSetPinValue(LEDs_Group, Local_Count, High);
    1b38:	84 e0       	ldi	r24, 0x04	; 4
    1b3a:	69 81       	ldd	r22, Y+1	; 0x01
    1b3c:	41 e0       	ldi	r20, 0x01	; 1
    1b3e:	0e 94 cb 08 	call	0x1196	; 0x1196 <DIO_VoidSetPinValue>
	DIO_VoidToggleBit(LEDs_Group,Local_LED_number);
}
void LED_VoidTurnOnRightGroup(u8 Local_LED_number, u8 Local_NumberOfLEDs)
{
	u8 Local_Count = 0;
	for (Local_Count = Local_LED_number; Local_Count < Local_LED_number+Local_NumberOfLEDs; Local_Count++)
    1b42:	89 81       	ldd	r24, Y+1	; 0x01
    1b44:	8f 5f       	subi	r24, 0xFF	; 255
    1b46:	89 83       	std	Y+1, r24	; 0x01
    1b48:	89 81       	ldd	r24, Y+1	; 0x01
    1b4a:	48 2f       	mov	r20, r24
    1b4c:	50 e0       	ldi	r21, 0x00	; 0
    1b4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b50:	28 2f       	mov	r18, r24
    1b52:	30 e0       	ldi	r19, 0x00	; 0
    1b54:	8b 81       	ldd	r24, Y+3	; 0x03
    1b56:	88 2f       	mov	r24, r24
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	82 0f       	add	r24, r18
    1b5c:	93 1f       	adc	r25, r19
    1b5e:	48 17       	cp	r20, r24
    1b60:	59 07       	cpc	r21, r25
    1b62:	54 f3       	brlt	.-44     	; 0x1b38 <LED_VoidTurnOnRightGroup+0x18>
	{
		DIO_VoidSetPinValue(LEDs_Group, Local_Count, High);
	}
}
    1b64:	0f 90       	pop	r0
    1b66:	0f 90       	pop	r0
    1b68:	0f 90       	pop	r0
    1b6a:	cf 91       	pop	r28
    1b6c:	df 91       	pop	r29
    1b6e:	08 95       	ret

00001b70 <LED_VoidTurnOnLeftGroup>:
void LED_VoidTurnOnLeftGroup(u8 Local_LED_number, u8 Local_NumberOfLEDs)
{
    1b70:	df 93       	push	r29
    1b72:	cf 93       	push	r28
    1b74:	00 d0       	rcall	.+0      	; 0x1b76 <LED_VoidTurnOnLeftGroup+0x6>
    1b76:	0f 92       	push	r0
    1b78:	cd b7       	in	r28, 0x3d	; 61
    1b7a:	de b7       	in	r29, 0x3e	; 62
    1b7c:	8a 83       	std	Y+2, r24	; 0x02
    1b7e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_Count = 0;
    1b80:	19 82       	std	Y+1, r1	; 0x01
	for (Local_Count = Local_LED_number; Local_Count > Local_LED_number-Local_NumberOfLEDs; Local_Count--)
    1b82:	8a 81       	ldd	r24, Y+2	; 0x02
    1b84:	89 83       	std	Y+1, r24	; 0x01
    1b86:	08 c0       	rjmp	.+16     	; 0x1b98 <LED_VoidTurnOnLeftGroup+0x28>
	{
		DIO_VoidSetPinValue(LEDs_Group, Local_Count, High);
    1b88:	84 e0       	ldi	r24, 0x04	; 4
    1b8a:	69 81       	ldd	r22, Y+1	; 0x01
    1b8c:	41 e0       	ldi	r20, 0x01	; 1
    1b8e:	0e 94 cb 08 	call	0x1196	; 0x1196 <DIO_VoidSetPinValue>
	}
}
void LED_VoidTurnOnLeftGroup(u8 Local_LED_number, u8 Local_NumberOfLEDs)
{
	u8 Local_Count = 0;
	for (Local_Count = Local_LED_number; Local_Count > Local_LED_number-Local_NumberOfLEDs; Local_Count--)
    1b92:	89 81       	ldd	r24, Y+1	; 0x01
    1b94:	81 50       	subi	r24, 0x01	; 1
    1b96:	89 83       	std	Y+1, r24	; 0x01
    1b98:	89 81       	ldd	r24, Y+1	; 0x01
    1b9a:	48 2f       	mov	r20, r24
    1b9c:	50 e0       	ldi	r21, 0x00	; 0
    1b9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba0:	28 2f       	mov	r18, r24
    1ba2:	30 e0       	ldi	r19, 0x00	; 0
    1ba4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba6:	88 2f       	mov	r24, r24
    1ba8:	90 e0       	ldi	r25, 0x00	; 0
    1baa:	b9 01       	movw	r22, r18
    1bac:	68 1b       	sub	r22, r24
    1bae:	79 0b       	sbc	r23, r25
    1bb0:	cb 01       	movw	r24, r22
    1bb2:	84 17       	cp	r24, r20
    1bb4:	95 07       	cpc	r25, r21
    1bb6:	44 f3       	brlt	.-48     	; 0x1b88 <LED_VoidTurnOnLeftGroup+0x18>
	{
		DIO_VoidSetPinValue(LEDs_Group, Local_Count, High);
	}
}
    1bb8:	0f 90       	pop	r0
    1bba:	0f 90       	pop	r0
    1bbc:	0f 90       	pop	r0
    1bbe:	cf 91       	pop	r28
    1bc0:	df 91       	pop	r29
    1bc2:	08 95       	ret

00001bc4 <LED_VoidTurnOffRightGroup>:
void LED_VoidTurnOffRightGroup(u8 Local_LED_number, u8 Local_NumberOfLEDs)
{
    1bc4:	df 93       	push	r29
    1bc6:	cf 93       	push	r28
    1bc8:	00 d0       	rcall	.+0      	; 0x1bca <LED_VoidTurnOffRightGroup+0x6>
    1bca:	0f 92       	push	r0
    1bcc:	cd b7       	in	r28, 0x3d	; 61
    1bce:	de b7       	in	r29, 0x3e	; 62
    1bd0:	8a 83       	std	Y+2, r24	; 0x02
    1bd2:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_Count = 0;
    1bd4:	19 82       	std	Y+1, r1	; 0x01
	for (Local_Count = Local_LED_number; Local_Count < Local_LED_number+Local_NumberOfLEDs; Local_Count++)
    1bd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd8:	89 83       	std	Y+1, r24	; 0x01
    1bda:	08 c0       	rjmp	.+16     	; 0x1bec <LED_VoidTurnOffRightGroup+0x28>
	{
		DIO_VoidSetPinValue(LEDs_Group, Local_Count, Low);
    1bdc:	84 e0       	ldi	r24, 0x04	; 4
    1bde:	69 81       	ldd	r22, Y+1	; 0x01
    1be0:	40 e0       	ldi	r20, 0x00	; 0
    1be2:	0e 94 cb 08 	call	0x1196	; 0x1196 <DIO_VoidSetPinValue>
	}
}
void LED_VoidTurnOffRightGroup(u8 Local_LED_number, u8 Local_NumberOfLEDs)
{
	u8 Local_Count = 0;
	for (Local_Count = Local_LED_number; Local_Count < Local_LED_number+Local_NumberOfLEDs; Local_Count++)
    1be6:	89 81       	ldd	r24, Y+1	; 0x01
    1be8:	8f 5f       	subi	r24, 0xFF	; 255
    1bea:	89 83       	std	Y+1, r24	; 0x01
    1bec:	89 81       	ldd	r24, Y+1	; 0x01
    1bee:	48 2f       	mov	r20, r24
    1bf0:	50 e0       	ldi	r21, 0x00	; 0
    1bf2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf4:	28 2f       	mov	r18, r24
    1bf6:	30 e0       	ldi	r19, 0x00	; 0
    1bf8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bfa:	88 2f       	mov	r24, r24
    1bfc:	90 e0       	ldi	r25, 0x00	; 0
    1bfe:	82 0f       	add	r24, r18
    1c00:	93 1f       	adc	r25, r19
    1c02:	48 17       	cp	r20, r24
    1c04:	59 07       	cpc	r21, r25
    1c06:	54 f3       	brlt	.-44     	; 0x1bdc <LED_VoidTurnOffRightGroup+0x18>
	{
		DIO_VoidSetPinValue(LEDs_Group, Local_Count, Low);
	}
}
    1c08:	0f 90       	pop	r0
    1c0a:	0f 90       	pop	r0
    1c0c:	0f 90       	pop	r0
    1c0e:	cf 91       	pop	r28
    1c10:	df 91       	pop	r29
    1c12:	08 95       	ret

00001c14 <LED_VoidTurnOffLeftGroup>:
void LED_VoidTurnOffLeftGroup(u8 Local_LED_number, u8 Local_NumberOfLEDs)
{
    1c14:	df 93       	push	r29
    1c16:	cf 93       	push	r28
    1c18:	00 d0       	rcall	.+0      	; 0x1c1a <LED_VoidTurnOffLeftGroup+0x6>
    1c1a:	0f 92       	push	r0
    1c1c:	cd b7       	in	r28, 0x3d	; 61
    1c1e:	de b7       	in	r29, 0x3e	; 62
    1c20:	8a 83       	std	Y+2, r24	; 0x02
    1c22:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_Count = 0;
    1c24:	19 82       	std	Y+1, r1	; 0x01
	for (Local_Count = Local_LED_number; Local_Count > Local_LED_number-Local_NumberOfLEDs; Local_Count--)
    1c26:	8a 81       	ldd	r24, Y+2	; 0x02
    1c28:	89 83       	std	Y+1, r24	; 0x01
    1c2a:	08 c0       	rjmp	.+16     	; 0x1c3c <LED_VoidTurnOffLeftGroup+0x28>
	{
		DIO_VoidSetPinValue(LEDs_Group, Local_Count, Low);
    1c2c:	84 e0       	ldi	r24, 0x04	; 4
    1c2e:	69 81       	ldd	r22, Y+1	; 0x01
    1c30:	40 e0       	ldi	r20, 0x00	; 0
    1c32:	0e 94 cb 08 	call	0x1196	; 0x1196 <DIO_VoidSetPinValue>
	}
}
void LED_VoidTurnOffLeftGroup(u8 Local_LED_number, u8 Local_NumberOfLEDs)
{
	u8 Local_Count = 0;
	for (Local_Count = Local_LED_number; Local_Count > Local_LED_number-Local_NumberOfLEDs; Local_Count--)
    1c36:	89 81       	ldd	r24, Y+1	; 0x01
    1c38:	81 50       	subi	r24, 0x01	; 1
    1c3a:	89 83       	std	Y+1, r24	; 0x01
    1c3c:	89 81       	ldd	r24, Y+1	; 0x01
    1c3e:	48 2f       	mov	r20, r24
    1c40:	50 e0       	ldi	r21, 0x00	; 0
    1c42:	8a 81       	ldd	r24, Y+2	; 0x02
    1c44:	28 2f       	mov	r18, r24
    1c46:	30 e0       	ldi	r19, 0x00	; 0
    1c48:	8b 81       	ldd	r24, Y+3	; 0x03
    1c4a:	88 2f       	mov	r24, r24
    1c4c:	90 e0       	ldi	r25, 0x00	; 0
    1c4e:	b9 01       	movw	r22, r18
    1c50:	68 1b       	sub	r22, r24
    1c52:	79 0b       	sbc	r23, r25
    1c54:	cb 01       	movw	r24, r22
    1c56:	84 17       	cp	r24, r20
    1c58:	95 07       	cpc	r25, r21
    1c5a:	44 f3       	brlt	.-48     	; 0x1c2c <LED_VoidTurnOffLeftGroup+0x18>
	{
		DIO_VoidSetPinValue(LEDs_Group, Local_Count, Low);
	}
}
    1c5c:	0f 90       	pop	r0
    1c5e:	0f 90       	pop	r0
    1c60:	0f 90       	pop	r0
    1c62:	cf 91       	pop	r28
    1c64:	df 91       	pop	r29
    1c66:	08 95       	ret

00001c68 <LED_VoidToggleRightGroup>:
void LED_VoidToggleRightGroup(u8 Local_LED_number, u8 Local_NumberOfLEDs)
{
    1c68:	df 93       	push	r29
    1c6a:	cf 93       	push	r28
    1c6c:	00 d0       	rcall	.+0      	; 0x1c6e <LED_VoidToggleRightGroup+0x6>
    1c6e:	0f 92       	push	r0
    1c70:	cd b7       	in	r28, 0x3d	; 61
    1c72:	de b7       	in	r29, 0x3e	; 62
    1c74:	8a 83       	std	Y+2, r24	; 0x02
    1c76:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_Count = 0;
    1c78:	19 82       	std	Y+1, r1	; 0x01
	for (Local_Count = Local_LED_number; Local_Count < Local_LED_number+Local_NumberOfLEDs; Local_Count++)
    1c7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7c:	89 83       	std	Y+1, r24	; 0x01
    1c7e:	07 c0       	rjmp	.+14     	; 0x1c8e <LED_VoidToggleRightGroup+0x26>
	{
		DIO_VoidToggleBit(LEDs_Group, Local_Count);
    1c80:	84 e0       	ldi	r24, 0x04	; 4
    1c82:	69 81       	ldd	r22, Y+1	; 0x01
    1c84:	0e 94 2e 0b 	call	0x165c	; 0x165c <DIO_VoidToggleBit>
	}
}
void LED_VoidToggleRightGroup(u8 Local_LED_number, u8 Local_NumberOfLEDs)
{
	u8 Local_Count = 0;
	for (Local_Count = Local_LED_number; Local_Count < Local_LED_number+Local_NumberOfLEDs; Local_Count++)
    1c88:	89 81       	ldd	r24, Y+1	; 0x01
    1c8a:	8f 5f       	subi	r24, 0xFF	; 255
    1c8c:	89 83       	std	Y+1, r24	; 0x01
    1c8e:	89 81       	ldd	r24, Y+1	; 0x01
    1c90:	48 2f       	mov	r20, r24
    1c92:	50 e0       	ldi	r21, 0x00	; 0
    1c94:	8a 81       	ldd	r24, Y+2	; 0x02
    1c96:	28 2f       	mov	r18, r24
    1c98:	30 e0       	ldi	r19, 0x00	; 0
    1c9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c9c:	88 2f       	mov	r24, r24
    1c9e:	90 e0       	ldi	r25, 0x00	; 0
    1ca0:	82 0f       	add	r24, r18
    1ca2:	93 1f       	adc	r25, r19
    1ca4:	48 17       	cp	r20, r24
    1ca6:	59 07       	cpc	r21, r25
    1ca8:	5c f3       	brlt	.-42     	; 0x1c80 <LED_VoidToggleRightGroup+0x18>
	{
		DIO_VoidToggleBit(LEDs_Group, Local_Count);
	}
}
    1caa:	0f 90       	pop	r0
    1cac:	0f 90       	pop	r0
    1cae:	0f 90       	pop	r0
    1cb0:	cf 91       	pop	r28
    1cb2:	df 91       	pop	r29
    1cb4:	08 95       	ret

00001cb6 <LED_VoidToggleLeftGroup>:
void LED_VoidToggleLeftGroup(u8 Local_LED_number, u8 Local_NumberOfLEDs)
{
    1cb6:	df 93       	push	r29
    1cb8:	cf 93       	push	r28
    1cba:	00 d0       	rcall	.+0      	; 0x1cbc <LED_VoidToggleLeftGroup+0x6>
    1cbc:	0f 92       	push	r0
    1cbe:	cd b7       	in	r28, 0x3d	; 61
    1cc0:	de b7       	in	r29, 0x3e	; 62
    1cc2:	8a 83       	std	Y+2, r24	; 0x02
    1cc4:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_Count = 0;
    1cc6:	19 82       	std	Y+1, r1	; 0x01
	for (Local_Count = Local_LED_number; Local_Count > Local_LED_number-Local_NumberOfLEDs; Local_Count--)
    1cc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cca:	89 83       	std	Y+1, r24	; 0x01
    1ccc:	07 c0       	rjmp	.+14     	; 0x1cdc <LED_VoidToggleLeftGroup+0x26>
	{
		DIO_VoidToggleBit(LEDs_Group, Local_Count);
    1cce:	84 e0       	ldi	r24, 0x04	; 4
    1cd0:	69 81       	ldd	r22, Y+1	; 0x01
    1cd2:	0e 94 2e 0b 	call	0x165c	; 0x165c <DIO_VoidToggleBit>
	}
}
void LED_VoidToggleLeftGroup(u8 Local_LED_number, u8 Local_NumberOfLEDs)
{
	u8 Local_Count = 0;
	for (Local_Count = Local_LED_number; Local_Count > Local_LED_number-Local_NumberOfLEDs; Local_Count--)
    1cd6:	89 81       	ldd	r24, Y+1	; 0x01
    1cd8:	81 50       	subi	r24, 0x01	; 1
    1cda:	89 83       	std	Y+1, r24	; 0x01
    1cdc:	89 81       	ldd	r24, Y+1	; 0x01
    1cde:	48 2f       	mov	r20, r24
    1ce0:	50 e0       	ldi	r21, 0x00	; 0
    1ce2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce4:	28 2f       	mov	r18, r24
    1ce6:	30 e0       	ldi	r19, 0x00	; 0
    1ce8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cea:	88 2f       	mov	r24, r24
    1cec:	90 e0       	ldi	r25, 0x00	; 0
    1cee:	b9 01       	movw	r22, r18
    1cf0:	68 1b       	sub	r22, r24
    1cf2:	79 0b       	sbc	r23, r25
    1cf4:	cb 01       	movw	r24, r22
    1cf6:	84 17       	cp	r24, r20
    1cf8:	95 07       	cpc	r25, r21
    1cfa:	4c f3       	brlt	.-46     	; 0x1cce <LED_VoidToggleLeftGroup+0x18>
	{
		DIO_VoidToggleBit(LEDs_Group, Local_Count);
	}
}
    1cfc:	0f 90       	pop	r0
    1cfe:	0f 90       	pop	r0
    1d00:	0f 90       	pop	r0
    1d02:	cf 91       	pop	r28
    1d04:	df 91       	pop	r29
    1d06:	08 95       	ret

00001d08 <LDR_VoidInit>:
#include "../../../MCAL/ADC/Header/ADC_interface.h"
#include "../Header/LDR_Config.h"
#include "../Header/LDR_interface.h"

void LDR_VoidInit(void)
{
    1d08:	df 93       	push	r29
    1d0a:	cf 93       	push	r28
    1d0c:	cd b7       	in	r28, 0x3d	; 61
    1d0e:	de b7       	in	r29, 0x3e	; 62
	ADC_VoidInitPolling();
    1d10:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <ADC_VoidInitPolling>
}
    1d14:	cf 91       	pop	r28
    1d16:	df 91       	pop	r29
    1d18:	08 95       	ret

00001d1a <LDR_u8GetValue>:
u32 LDR_u8GetValue(u8 ADC_channel, u32 Resistor_Value)
{
    1d1a:	ef 92       	push	r14
    1d1c:	ff 92       	push	r15
    1d1e:	0f 93       	push	r16
    1d20:	1f 93       	push	r17
    1d22:	df 93       	push	r29
    1d24:	cf 93       	push	r28
    1d26:	cd b7       	in	r28, 0x3d	; 61
    1d28:	de b7       	in	r29, 0x3e	; 62
    1d2a:	2d 97       	sbiw	r28, 0x0d	; 13
    1d2c:	0f b6       	in	r0, 0x3f	; 63
    1d2e:	f8 94       	cli
    1d30:	de bf       	out	0x3e, r29	; 62
    1d32:	0f be       	out	0x3f, r0	; 63
    1d34:	cd bf       	out	0x3d, r28	; 61
    1d36:	89 87       	std	Y+9, r24	; 0x09
    1d38:	4a 87       	std	Y+10, r20	; 0x0a
    1d3a:	5b 87       	std	Y+11, r21	; 0x0b
    1d3c:	6c 87       	std	Y+12, r22	; 0x0c
    1d3e:	7d 87       	std	Y+13, r23	; 0x0d
	u16 ADC_Reading = ADC_U16GetValue(ADC_channel);
    1d40:	89 85       	ldd	r24, Y+9	; 0x09
    1d42:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <ADC_U16GetValue>
    1d46:	98 87       	std	Y+8, r25	; 0x08
    1d48:	8f 83       	std	Y+7, r24	; 0x07
	u16 Analog_Volt = (ADC_Reading * 5000)/1024;
    1d4a:	2f 81       	ldd	r18, Y+7	; 0x07
    1d4c:	38 85       	ldd	r19, Y+8	; 0x08
    1d4e:	88 e8       	ldi	r24, 0x88	; 136
    1d50:	93 e1       	ldi	r25, 0x13	; 19
    1d52:	ac 01       	movw	r20, r24
    1d54:	24 9f       	mul	r18, r20
    1d56:	c0 01       	movw	r24, r0
    1d58:	25 9f       	mul	r18, r21
    1d5a:	90 0d       	add	r25, r0
    1d5c:	34 9f       	mul	r19, r20
    1d5e:	90 0d       	add	r25, r0
    1d60:	11 24       	eor	r1, r1
    1d62:	89 2f       	mov	r24, r25
    1d64:	99 27       	eor	r25, r25
    1d66:	86 95       	lsr	r24
    1d68:	86 95       	lsr	r24
    1d6a:	9e 83       	std	Y+6, r25	; 0x06
    1d6c:	8d 83       	std	Y+5, r24	; 0x05
	//u16 LDR_Value = Analog_Volt * 3.8;
	u32 LDR_Value = (Analog_Volt*Resistor_Value)/(5 - Analog_Volt);
    1d6e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d70:	9e 81       	ldd	r25, Y+6	; 0x06
    1d72:	cc 01       	movw	r24, r24
    1d74:	a0 e0       	ldi	r26, 0x00	; 0
    1d76:	b0 e0       	ldi	r27, 0x00	; 0
    1d78:	2a 85       	ldd	r18, Y+10	; 0x0a
    1d7a:	3b 85       	ldd	r19, Y+11	; 0x0b
    1d7c:	4c 85       	ldd	r20, Y+12	; 0x0c
    1d7e:	5d 85       	ldd	r21, Y+13	; 0x0d
    1d80:	bc 01       	movw	r22, r24
    1d82:	cd 01       	movw	r24, r26
    1d84:	0e 94 d1 1b 	call	0x37a2	; 0x37a2 <__mulsi3>
    1d88:	7b 01       	movw	r14, r22
    1d8a:	8c 01       	movw	r16, r24
    1d8c:	25 e0       	ldi	r18, 0x05	; 5
    1d8e:	30 e0       	ldi	r19, 0x00	; 0
    1d90:	8d 81       	ldd	r24, Y+5	; 0x05
    1d92:	9e 81       	ldd	r25, Y+6	; 0x06
    1d94:	a9 01       	movw	r20, r18
    1d96:	48 1b       	sub	r20, r24
    1d98:	59 0b       	sbc	r21, r25
    1d9a:	ca 01       	movw	r24, r20
    1d9c:	9c 01       	movw	r18, r24
    1d9e:	40 e0       	ldi	r20, 0x00	; 0
    1da0:	50 e0       	ldi	r21, 0x00	; 0
    1da2:	c8 01       	movw	r24, r16
    1da4:	b7 01       	movw	r22, r14
    1da6:	0e 94 04 1c 	call	0x3808	; 0x3808 <__udivmodsi4>
    1daa:	da 01       	movw	r26, r20
    1dac:	c9 01       	movw	r24, r18
    1dae:	89 83       	std	Y+1, r24	; 0x01
    1db0:	9a 83       	std	Y+2, r25	; 0x02
    1db2:	ab 83       	std	Y+3, r26	; 0x03
    1db4:	bc 83       	std	Y+4, r27	; 0x04
	return LDR_Value;
    1db6:	89 81       	ldd	r24, Y+1	; 0x01
    1db8:	9a 81       	ldd	r25, Y+2	; 0x02
    1dba:	ab 81       	ldd	r26, Y+3	; 0x03
    1dbc:	bc 81       	ldd	r27, Y+4	; 0x04
}
    1dbe:	bc 01       	movw	r22, r24
    1dc0:	cd 01       	movw	r24, r26
    1dc2:	2d 96       	adiw	r28, 0x0d	; 13
    1dc4:	0f b6       	in	r0, 0x3f	; 63
    1dc6:	f8 94       	cli
    1dc8:	de bf       	out	0x3e, r29	; 62
    1dca:	0f be       	out	0x3f, r0	; 63
    1dcc:	cd bf       	out	0x3d, r28	; 61
    1dce:	cf 91       	pop	r28
    1dd0:	df 91       	pop	r29
    1dd2:	1f 91       	pop	r17
    1dd4:	0f 91       	pop	r16
    1dd6:	ff 90       	pop	r15
    1dd8:	ef 90       	pop	r14
    1dda:	08 95       	ret

00001ddc <LCD_VoidSendCommand>:

#include <stdio.h>
#include <util/delay.h>

void LCD_VoidSendCommand(u8 Local_command)
{
    1ddc:	df 93       	push	r29
    1dde:	cf 93       	push	r28
    1de0:	0f 92       	push	r0
    1de2:	cd b7       	in	r28, 0x3d	; 61
    1de4:	de b7       	in	r29, 0x3e	; 62
    1de6:	89 83       	std	Y+1, r24	; 0x01
	/*set RS pin to command --> 0*/
	DIO_VoidSetPinValue(LCD_Control_Group,LCD_RS_Pin,Low);
    1de8:	81 e0       	ldi	r24, 0x01	; 1
    1dea:	65 e0       	ldi	r22, 0x05	; 5
    1dec:	40 e0       	ldi	r20, 0x00	; 0
    1dee:	0e 94 cb 08 	call	0x1196	; 0x1196 <DIO_VoidSetPinValue>
	/*set RW pin to write --> 0*/
	DIO_VoidSetPinValue(LCD_Control_Group,LCD_RW_Pin,Low);
    1df2:	81 e0       	ldi	r24, 0x01	; 1
    1df4:	66 e0       	ldi	r22, 0x06	; 6
    1df6:	40 e0       	ldi	r20, 0x00	; 0
    1df8:	0e 94 cb 08 	call	0x1196	; 0x1196 <DIO_VoidSetPinValue>
	/*set Enable pin to High*/
	DIO_VoidSetPinValue(LCD_Control_Group,LCD_E_Pin,High);
    1dfc:	81 e0       	ldi	r24, 0x01	; 1
    1dfe:	67 e0       	ldi	r22, 0x07	; 7
    1e00:	41 e0       	ldi	r20, 0x01	; 1
    1e02:	0e 94 cb 08 	call	0x1196	; 0x1196 <DIO_VoidSetPinValue>
	/*send the command line*/
	DIO_VoidSetPortValue(LCD_DataGroup,Local_command);
    1e06:	83 e0       	ldi	r24, 0x03	; 3
    1e08:	69 81       	ldd	r22, Y+1	; 0x01
    1e0a:	0e 94 9f 0a 	call	0x153e	; 0x153e <DIO_VoidSetPortValue>
	/*set Enable pin to Low*/
	DIO_VoidSetPinValue(LCD_Control_Group,LCD_E_Pin,Low);
    1e0e:	81 e0       	ldi	r24, 0x01	; 1
    1e10:	67 e0       	ldi	r22, 0x07	; 7
    1e12:	40 e0       	ldi	r20, 0x00	; 0
    1e14:	0e 94 cb 08 	call	0x1196	; 0x1196 <DIO_VoidSetPinValue>
}
    1e18:	0f 90       	pop	r0
    1e1a:	cf 91       	pop	r28
    1e1c:	df 91       	pop	r29
    1e1e:	08 95       	ret

00001e20 <LCD_VoidSendChar>:
void LCD_VoidSendChar(u8 Local_char)
{
    1e20:	df 93       	push	r29
    1e22:	cf 93       	push	r28
    1e24:	0f 92       	push	r0
    1e26:	cd b7       	in	r28, 0x3d	; 61
    1e28:	de b7       	in	r29, 0x3e	; 62
    1e2a:	89 83       	std	Y+1, r24	; 0x01
	/*set RS pin to Data --> 1*/
	DIO_VoidSetPinValue(LCD_Control_Group,LCD_RS_Pin,High);
    1e2c:	81 e0       	ldi	r24, 0x01	; 1
    1e2e:	65 e0       	ldi	r22, 0x05	; 5
    1e30:	41 e0       	ldi	r20, 0x01	; 1
    1e32:	0e 94 cb 08 	call	0x1196	; 0x1196 <DIO_VoidSetPinValue>
	/*set RW pin to write --> 0*/
	DIO_VoidSetPinValue(LCD_Control_Group,LCD_RW_Pin,Low);
    1e36:	81 e0       	ldi	r24, 0x01	; 1
    1e38:	66 e0       	ldi	r22, 0x06	; 6
    1e3a:	40 e0       	ldi	r20, 0x00	; 0
    1e3c:	0e 94 cb 08 	call	0x1196	; 0x1196 <DIO_VoidSetPinValue>
	/*set Enable pin to Low*/
	DIO_VoidSetPinValue(LCD_Control_Group,LCD_E_Pin,High);
    1e40:	81 e0       	ldi	r24, 0x01	; 1
    1e42:	67 e0       	ldi	r22, 0x07	; 7
    1e44:	41 e0       	ldi	r20, 0x01	; 1
    1e46:	0e 94 cb 08 	call	0x1196	; 0x1196 <DIO_VoidSetPinValue>
	/*send the char*/
	DIO_VoidSetPortValue(LCD_DataGroup,Local_char);
    1e4a:	83 e0       	ldi	r24, 0x03	; 3
    1e4c:	69 81       	ldd	r22, Y+1	; 0x01
    1e4e:	0e 94 9f 0a 	call	0x153e	; 0x153e <DIO_VoidSetPortValue>
	/*set Enable pin to Low*/
	DIO_VoidSetPinValue(LCD_Control_Group,LCD_E_Pin,Low);
    1e52:	81 e0       	ldi	r24, 0x01	; 1
    1e54:	67 e0       	ldi	r22, 0x07	; 7
    1e56:	40 e0       	ldi	r20, 0x00	; 0
    1e58:	0e 94 cb 08 	call	0x1196	; 0x1196 <DIO_VoidSetPinValue>
}
    1e5c:	0f 90       	pop	r0
    1e5e:	cf 91       	pop	r28
    1e60:	df 91       	pop	r29
    1e62:	08 95       	ret

00001e64 <LCD_Void8BitInit>:
void LCD_Void8BitInit(void)
{
    1e64:	0f 93       	push	r16
    1e66:	1f 93       	push	r17
    1e68:	df 93       	push	r29
    1e6a:	cf 93       	push	r28
    1e6c:	cd b7       	in	r28, 0x3d	; 61
    1e6e:	de b7       	in	r29, 0x3e	; 62
    1e70:	c6 54       	subi	r28, 0x46	; 70
    1e72:	d0 40       	sbci	r29, 0x00	; 0
    1e74:	0f b6       	in	r0, 0x3f	; 63
    1e76:	f8 94       	cli
    1e78:	de bf       	out	0x3e, r29	; 62
    1e7a:	0f be       	out	0x3f, r0	; 63
    1e7c:	cd bf       	out	0x3d, r28	; 61
	/*Select The Directions*/
	DIO_VoidSetPortDir(LCD_DataGroup,Max_Output);
    1e7e:	83 e0       	ldi	r24, 0x03	; 3
    1e80:	6f ef       	ldi	r22, 0xFF	; 255
    1e82:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <DIO_VoidSetPortDir>
	DIO_VoidSetPinDir(LCD_Control_Group, LCD_RS_Pin, Output);
    1e86:	81 e0       	ldi	r24, 0x01	; 1
    1e88:	65 e0       	ldi	r22, 0x05	; 5
    1e8a:	41 e0       	ldi	r20, 0x01	; 1
    1e8c:	0e 94 c1 07 	call	0xf82	; 0xf82 <DIO_VoidSetPinDir>
	DIO_VoidSetPinDir(LCD_Control_Group, LCD_RW_Pin, Output);
    1e90:	81 e0       	ldi	r24, 0x01	; 1
    1e92:	66 e0       	ldi	r22, 0x06	; 6
    1e94:	41 e0       	ldi	r20, 0x01	; 1
    1e96:	0e 94 c1 07 	call	0xf82	; 0xf82 <DIO_VoidSetPinDir>
	DIO_VoidSetPinDir(LCD_Control_Group, LCD_E_Pin, Output);
    1e9a:	81 e0       	ldi	r24, 0x01	; 1
    1e9c:	67 e0       	ldi	r22, 0x07	; 7
    1e9e:	41 e0       	ldi	r20, 0x01	; 1
    1ea0:	0e 94 c1 07 	call	0xf82	; 0xf82 <DIO_VoidSetPinDir>
    1ea4:	fe 01       	movw	r30, r28
    1ea6:	ed 5b       	subi	r30, 0xBD	; 189
    1ea8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eaa:	80 e0       	ldi	r24, 0x00	; 0
    1eac:	90 e0       	ldi	r25, 0x00	; 0
    1eae:	ac e0       	ldi	r26, 0x0C	; 12
    1eb0:	b2 e4       	ldi	r27, 0x42	; 66
    1eb2:	80 83       	st	Z, r24
    1eb4:	91 83       	std	Z+1, r25	; 0x01
    1eb6:	a2 83       	std	Z+2, r26	; 0x02
    1eb8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eba:	8e 01       	movw	r16, r28
    1ebc:	01 5c       	subi	r16, 0xC1	; 193
    1ebe:	1f 4f       	sbci	r17, 0xFF	; 255
    1ec0:	fe 01       	movw	r30, r28
    1ec2:	ed 5b       	subi	r30, 0xBD	; 189
    1ec4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec6:	60 81       	ld	r22, Z
    1ec8:	71 81       	ldd	r23, Z+1	; 0x01
    1eca:	82 81       	ldd	r24, Z+2	; 0x02
    1ecc:	93 81       	ldd	r25, Z+3	; 0x03
    1ece:	20 e0       	ldi	r18, 0x00	; 0
    1ed0:	30 e0       	ldi	r19, 0x00	; 0
    1ed2:	4a ef       	ldi	r20, 0xFA	; 250
    1ed4:	54 e4       	ldi	r21, 0x44	; 68
    1ed6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eda:	dc 01       	movw	r26, r24
    1edc:	cb 01       	movw	r24, r22
    1ede:	f8 01       	movw	r30, r16
    1ee0:	80 83       	st	Z, r24
    1ee2:	91 83       	std	Z+1, r25	; 0x01
    1ee4:	a2 83       	std	Z+2, r26	; 0x02
    1ee6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ee8:	fe 01       	movw	r30, r28
    1eea:	ff 96       	adiw	r30, 0x3f	; 63
    1eec:	60 81       	ld	r22, Z
    1eee:	71 81       	ldd	r23, Z+1	; 0x01
    1ef0:	82 81       	ldd	r24, Z+2	; 0x02
    1ef2:	93 81       	ldd	r25, Z+3	; 0x03
    1ef4:	20 e0       	ldi	r18, 0x00	; 0
    1ef6:	30 e0       	ldi	r19, 0x00	; 0
    1ef8:	40 e8       	ldi	r20, 0x80	; 128
    1efa:	5f e3       	ldi	r21, 0x3F	; 63
    1efc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f00:	88 23       	and	r24, r24
    1f02:	2c f4       	brge	.+10     	; 0x1f0e <LCD_Void8BitInit+0xaa>
		__ticks = 1;
    1f04:	81 e0       	ldi	r24, 0x01	; 1
    1f06:	90 e0       	ldi	r25, 0x00	; 0
    1f08:	9e af       	std	Y+62, r25	; 0x3e
    1f0a:	8d af       	std	Y+61, r24	; 0x3d
    1f0c:	46 c0       	rjmp	.+140    	; 0x1f9a <LCD_Void8BitInit+0x136>
	else if (__tmp > 65535)
    1f0e:	fe 01       	movw	r30, r28
    1f10:	ff 96       	adiw	r30, 0x3f	; 63
    1f12:	60 81       	ld	r22, Z
    1f14:	71 81       	ldd	r23, Z+1	; 0x01
    1f16:	82 81       	ldd	r24, Z+2	; 0x02
    1f18:	93 81       	ldd	r25, Z+3	; 0x03
    1f1a:	20 e0       	ldi	r18, 0x00	; 0
    1f1c:	3f ef       	ldi	r19, 0xFF	; 255
    1f1e:	4f e7       	ldi	r20, 0x7F	; 127
    1f20:	57 e4       	ldi	r21, 0x47	; 71
    1f22:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f26:	18 16       	cp	r1, r24
    1f28:	64 f5       	brge	.+88     	; 0x1f82 <LCD_Void8BitInit+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f2a:	fe 01       	movw	r30, r28
    1f2c:	ed 5b       	subi	r30, 0xBD	; 189
    1f2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f30:	60 81       	ld	r22, Z
    1f32:	71 81       	ldd	r23, Z+1	; 0x01
    1f34:	82 81       	ldd	r24, Z+2	; 0x02
    1f36:	93 81       	ldd	r25, Z+3	; 0x03
    1f38:	20 e0       	ldi	r18, 0x00	; 0
    1f3a:	30 e0       	ldi	r19, 0x00	; 0
    1f3c:	40 e2       	ldi	r20, 0x20	; 32
    1f3e:	51 e4       	ldi	r21, 0x41	; 65
    1f40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f44:	dc 01       	movw	r26, r24
    1f46:	cb 01       	movw	r24, r22
    1f48:	bc 01       	movw	r22, r24
    1f4a:	cd 01       	movw	r24, r26
    1f4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f50:	dc 01       	movw	r26, r24
    1f52:	cb 01       	movw	r24, r22
    1f54:	9e af       	std	Y+62, r25	; 0x3e
    1f56:	8d af       	std	Y+61, r24	; 0x3d
    1f58:	0f c0       	rjmp	.+30     	; 0x1f78 <LCD_Void8BitInit+0x114>
    1f5a:	88 ec       	ldi	r24, 0xC8	; 200
    1f5c:	90 e0       	ldi	r25, 0x00	; 0
    1f5e:	9c af       	std	Y+60, r25	; 0x3c
    1f60:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1f62:	8b ad       	ldd	r24, Y+59	; 0x3b
    1f64:	9c ad       	ldd	r25, Y+60	; 0x3c
    1f66:	01 97       	sbiw	r24, 0x01	; 1
    1f68:	f1 f7       	brne	.-4      	; 0x1f66 <LCD_Void8BitInit+0x102>
    1f6a:	9c af       	std	Y+60, r25	; 0x3c
    1f6c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f6e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1f70:	9e ad       	ldd	r25, Y+62	; 0x3e
    1f72:	01 97       	sbiw	r24, 0x01	; 1
    1f74:	9e af       	std	Y+62, r25	; 0x3e
    1f76:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f78:	8d ad       	ldd	r24, Y+61	; 0x3d
    1f7a:	9e ad       	ldd	r25, Y+62	; 0x3e
    1f7c:	00 97       	sbiw	r24, 0x00	; 0
    1f7e:	69 f7       	brne	.-38     	; 0x1f5a <LCD_Void8BitInit+0xf6>
    1f80:	16 c0       	rjmp	.+44     	; 0x1fae <LCD_Void8BitInit+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f82:	fe 01       	movw	r30, r28
    1f84:	ff 96       	adiw	r30, 0x3f	; 63
    1f86:	60 81       	ld	r22, Z
    1f88:	71 81       	ldd	r23, Z+1	; 0x01
    1f8a:	82 81       	ldd	r24, Z+2	; 0x02
    1f8c:	93 81       	ldd	r25, Z+3	; 0x03
    1f8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f92:	dc 01       	movw	r26, r24
    1f94:	cb 01       	movw	r24, r22
    1f96:	9e af       	std	Y+62, r25	; 0x3e
    1f98:	8d af       	std	Y+61, r24	; 0x3d
    1f9a:	8d ad       	ldd	r24, Y+61	; 0x3d
    1f9c:	9e ad       	ldd	r25, Y+62	; 0x3e
    1f9e:	9a af       	std	Y+58, r25	; 0x3a
    1fa0:	89 af       	std	Y+57, r24	; 0x39
    1fa2:	89 ad       	ldd	r24, Y+57	; 0x39
    1fa4:	9a ad       	ldd	r25, Y+58	; 0x3a
    1fa6:	01 97       	sbiw	r24, 0x01	; 1
    1fa8:	f1 f7       	brne	.-4      	; 0x1fa6 <LCD_Void8BitInit+0x142>
    1faa:	9a af       	std	Y+58, r25	; 0x3a
    1fac:	89 af       	std	Y+57, r24	; 0x39

	/*wait for more than 30ms after power up*/
	_delay_ms(35);
	/*function set*/
	LCD_VoidSendCommand(LCD_Set8Bit2Line5x8);
    1fae:	88 e3       	ldi	r24, 0x38	; 56
    1fb0:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <LCD_VoidSendCommand>
    1fb4:	80 e0       	ldi	r24, 0x00	; 0
    1fb6:	90 e0       	ldi	r25, 0x00	; 0
    1fb8:	a0 e8       	ldi	r26, 0x80	; 128
    1fba:	bf e3       	ldi	r27, 0x3F	; 63
    1fbc:	8d ab       	std	Y+53, r24	; 0x35
    1fbe:	9e ab       	std	Y+54, r25	; 0x36
    1fc0:	af ab       	std	Y+55, r26	; 0x37
    1fc2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fc4:	6d a9       	ldd	r22, Y+53	; 0x35
    1fc6:	7e a9       	ldd	r23, Y+54	; 0x36
    1fc8:	8f a9       	ldd	r24, Y+55	; 0x37
    1fca:	98 ad       	ldd	r25, Y+56	; 0x38
    1fcc:	20 e0       	ldi	r18, 0x00	; 0
    1fce:	30 e0       	ldi	r19, 0x00	; 0
    1fd0:	4a ef       	ldi	r20, 0xFA	; 250
    1fd2:	54 e4       	ldi	r21, 0x44	; 68
    1fd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fd8:	dc 01       	movw	r26, r24
    1fda:	cb 01       	movw	r24, r22
    1fdc:	89 ab       	std	Y+49, r24	; 0x31
    1fde:	9a ab       	std	Y+50, r25	; 0x32
    1fe0:	ab ab       	std	Y+51, r26	; 0x33
    1fe2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1fe4:	69 a9       	ldd	r22, Y+49	; 0x31
    1fe6:	7a a9       	ldd	r23, Y+50	; 0x32
    1fe8:	8b a9       	ldd	r24, Y+51	; 0x33
    1fea:	9c a9       	ldd	r25, Y+52	; 0x34
    1fec:	20 e0       	ldi	r18, 0x00	; 0
    1fee:	30 e0       	ldi	r19, 0x00	; 0
    1ff0:	40 e8       	ldi	r20, 0x80	; 128
    1ff2:	5f e3       	ldi	r21, 0x3F	; 63
    1ff4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ff8:	88 23       	and	r24, r24
    1ffa:	2c f4       	brge	.+10     	; 0x2006 <LCD_Void8BitInit+0x1a2>
		__ticks = 1;
    1ffc:	81 e0       	ldi	r24, 0x01	; 1
    1ffe:	90 e0       	ldi	r25, 0x00	; 0
    2000:	98 ab       	std	Y+48, r25	; 0x30
    2002:	8f a7       	std	Y+47, r24	; 0x2f
    2004:	3f c0       	rjmp	.+126    	; 0x2084 <LCD_Void8BitInit+0x220>
	else if (__tmp > 65535)
    2006:	69 a9       	ldd	r22, Y+49	; 0x31
    2008:	7a a9       	ldd	r23, Y+50	; 0x32
    200a:	8b a9       	ldd	r24, Y+51	; 0x33
    200c:	9c a9       	ldd	r25, Y+52	; 0x34
    200e:	20 e0       	ldi	r18, 0x00	; 0
    2010:	3f ef       	ldi	r19, 0xFF	; 255
    2012:	4f e7       	ldi	r20, 0x7F	; 127
    2014:	57 e4       	ldi	r21, 0x47	; 71
    2016:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    201a:	18 16       	cp	r1, r24
    201c:	4c f5       	brge	.+82     	; 0x2070 <LCD_Void8BitInit+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    201e:	6d a9       	ldd	r22, Y+53	; 0x35
    2020:	7e a9       	ldd	r23, Y+54	; 0x36
    2022:	8f a9       	ldd	r24, Y+55	; 0x37
    2024:	98 ad       	ldd	r25, Y+56	; 0x38
    2026:	20 e0       	ldi	r18, 0x00	; 0
    2028:	30 e0       	ldi	r19, 0x00	; 0
    202a:	40 e2       	ldi	r20, 0x20	; 32
    202c:	51 e4       	ldi	r21, 0x41	; 65
    202e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2032:	dc 01       	movw	r26, r24
    2034:	cb 01       	movw	r24, r22
    2036:	bc 01       	movw	r22, r24
    2038:	cd 01       	movw	r24, r26
    203a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    203e:	dc 01       	movw	r26, r24
    2040:	cb 01       	movw	r24, r22
    2042:	98 ab       	std	Y+48, r25	; 0x30
    2044:	8f a7       	std	Y+47, r24	; 0x2f
    2046:	0f c0       	rjmp	.+30     	; 0x2066 <LCD_Void8BitInit+0x202>
    2048:	88 ec       	ldi	r24, 0xC8	; 200
    204a:	90 e0       	ldi	r25, 0x00	; 0
    204c:	9e a7       	std	Y+46, r25	; 0x2e
    204e:	8d a7       	std	Y+45, r24	; 0x2d
    2050:	8d a5       	ldd	r24, Y+45	; 0x2d
    2052:	9e a5       	ldd	r25, Y+46	; 0x2e
    2054:	01 97       	sbiw	r24, 0x01	; 1
    2056:	f1 f7       	brne	.-4      	; 0x2054 <LCD_Void8BitInit+0x1f0>
    2058:	9e a7       	std	Y+46, r25	; 0x2e
    205a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    205c:	8f a5       	ldd	r24, Y+47	; 0x2f
    205e:	98 a9       	ldd	r25, Y+48	; 0x30
    2060:	01 97       	sbiw	r24, 0x01	; 1
    2062:	98 ab       	std	Y+48, r25	; 0x30
    2064:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2066:	8f a5       	ldd	r24, Y+47	; 0x2f
    2068:	98 a9       	ldd	r25, Y+48	; 0x30
    206a:	00 97       	sbiw	r24, 0x00	; 0
    206c:	69 f7       	brne	.-38     	; 0x2048 <LCD_Void8BitInit+0x1e4>
    206e:	14 c0       	rjmp	.+40     	; 0x2098 <LCD_Void8BitInit+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2070:	69 a9       	ldd	r22, Y+49	; 0x31
    2072:	7a a9       	ldd	r23, Y+50	; 0x32
    2074:	8b a9       	ldd	r24, Y+51	; 0x33
    2076:	9c a9       	ldd	r25, Y+52	; 0x34
    2078:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    207c:	dc 01       	movw	r26, r24
    207e:	cb 01       	movw	r24, r22
    2080:	98 ab       	std	Y+48, r25	; 0x30
    2082:	8f a7       	std	Y+47, r24	; 0x2f
    2084:	8f a5       	ldd	r24, Y+47	; 0x2f
    2086:	98 a9       	ldd	r25, Y+48	; 0x30
    2088:	9c a7       	std	Y+44, r25	; 0x2c
    208a:	8b a7       	std	Y+43, r24	; 0x2b
    208c:	8b a5       	ldd	r24, Y+43	; 0x2b
    208e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2090:	01 97       	sbiw	r24, 0x01	; 1
    2092:	f1 f7       	brne	.-4      	; 0x2090 <LCD_Void8BitInit+0x22c>
    2094:	9c a7       	std	Y+44, r25	; 0x2c
    2096:	8b a7       	std	Y+43, r24	; 0x2b
	/*wait for more than 39us*/
	_delay_ms(1);
	/*Display On off control*/
	LCD_VoidSendCommand(LCD_CursorON);
    2098:	8e e0       	ldi	r24, 0x0E	; 14
    209a:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <LCD_VoidSendCommand>
    209e:	80 e0       	ldi	r24, 0x00	; 0
    20a0:	90 e0       	ldi	r25, 0x00	; 0
    20a2:	a0 e8       	ldi	r26, 0x80	; 128
    20a4:	bf e3       	ldi	r27, 0x3F	; 63
    20a6:	8f a3       	std	Y+39, r24	; 0x27
    20a8:	98 a7       	std	Y+40, r25	; 0x28
    20aa:	a9 a7       	std	Y+41, r26	; 0x29
    20ac:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20ae:	6f a1       	ldd	r22, Y+39	; 0x27
    20b0:	78 a5       	ldd	r23, Y+40	; 0x28
    20b2:	89 a5       	ldd	r24, Y+41	; 0x29
    20b4:	9a a5       	ldd	r25, Y+42	; 0x2a
    20b6:	20 e0       	ldi	r18, 0x00	; 0
    20b8:	30 e0       	ldi	r19, 0x00	; 0
    20ba:	4a ef       	ldi	r20, 0xFA	; 250
    20bc:	54 e4       	ldi	r21, 0x44	; 68
    20be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20c2:	dc 01       	movw	r26, r24
    20c4:	cb 01       	movw	r24, r22
    20c6:	8b a3       	std	Y+35, r24	; 0x23
    20c8:	9c a3       	std	Y+36, r25	; 0x24
    20ca:	ad a3       	std	Y+37, r26	; 0x25
    20cc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    20ce:	6b a1       	ldd	r22, Y+35	; 0x23
    20d0:	7c a1       	ldd	r23, Y+36	; 0x24
    20d2:	8d a1       	ldd	r24, Y+37	; 0x25
    20d4:	9e a1       	ldd	r25, Y+38	; 0x26
    20d6:	20 e0       	ldi	r18, 0x00	; 0
    20d8:	30 e0       	ldi	r19, 0x00	; 0
    20da:	40 e8       	ldi	r20, 0x80	; 128
    20dc:	5f e3       	ldi	r21, 0x3F	; 63
    20de:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20e2:	88 23       	and	r24, r24
    20e4:	2c f4       	brge	.+10     	; 0x20f0 <LCD_Void8BitInit+0x28c>
		__ticks = 1;
    20e6:	81 e0       	ldi	r24, 0x01	; 1
    20e8:	90 e0       	ldi	r25, 0x00	; 0
    20ea:	9a a3       	std	Y+34, r25	; 0x22
    20ec:	89 a3       	std	Y+33, r24	; 0x21
    20ee:	3f c0       	rjmp	.+126    	; 0x216e <LCD_Void8BitInit+0x30a>
	else if (__tmp > 65535)
    20f0:	6b a1       	ldd	r22, Y+35	; 0x23
    20f2:	7c a1       	ldd	r23, Y+36	; 0x24
    20f4:	8d a1       	ldd	r24, Y+37	; 0x25
    20f6:	9e a1       	ldd	r25, Y+38	; 0x26
    20f8:	20 e0       	ldi	r18, 0x00	; 0
    20fa:	3f ef       	ldi	r19, 0xFF	; 255
    20fc:	4f e7       	ldi	r20, 0x7F	; 127
    20fe:	57 e4       	ldi	r21, 0x47	; 71
    2100:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2104:	18 16       	cp	r1, r24
    2106:	4c f5       	brge	.+82     	; 0x215a <LCD_Void8BitInit+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2108:	6f a1       	ldd	r22, Y+39	; 0x27
    210a:	78 a5       	ldd	r23, Y+40	; 0x28
    210c:	89 a5       	ldd	r24, Y+41	; 0x29
    210e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2110:	20 e0       	ldi	r18, 0x00	; 0
    2112:	30 e0       	ldi	r19, 0x00	; 0
    2114:	40 e2       	ldi	r20, 0x20	; 32
    2116:	51 e4       	ldi	r21, 0x41	; 65
    2118:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    211c:	dc 01       	movw	r26, r24
    211e:	cb 01       	movw	r24, r22
    2120:	bc 01       	movw	r22, r24
    2122:	cd 01       	movw	r24, r26
    2124:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2128:	dc 01       	movw	r26, r24
    212a:	cb 01       	movw	r24, r22
    212c:	9a a3       	std	Y+34, r25	; 0x22
    212e:	89 a3       	std	Y+33, r24	; 0x21
    2130:	0f c0       	rjmp	.+30     	; 0x2150 <LCD_Void8BitInit+0x2ec>
    2132:	88 ec       	ldi	r24, 0xC8	; 200
    2134:	90 e0       	ldi	r25, 0x00	; 0
    2136:	98 a3       	std	Y+32, r25	; 0x20
    2138:	8f 8f       	std	Y+31, r24	; 0x1f
    213a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    213c:	98 a1       	ldd	r25, Y+32	; 0x20
    213e:	01 97       	sbiw	r24, 0x01	; 1
    2140:	f1 f7       	brne	.-4      	; 0x213e <LCD_Void8BitInit+0x2da>
    2142:	98 a3       	std	Y+32, r25	; 0x20
    2144:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2146:	89 a1       	ldd	r24, Y+33	; 0x21
    2148:	9a a1       	ldd	r25, Y+34	; 0x22
    214a:	01 97       	sbiw	r24, 0x01	; 1
    214c:	9a a3       	std	Y+34, r25	; 0x22
    214e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2150:	89 a1       	ldd	r24, Y+33	; 0x21
    2152:	9a a1       	ldd	r25, Y+34	; 0x22
    2154:	00 97       	sbiw	r24, 0x00	; 0
    2156:	69 f7       	brne	.-38     	; 0x2132 <LCD_Void8BitInit+0x2ce>
    2158:	14 c0       	rjmp	.+40     	; 0x2182 <LCD_Void8BitInit+0x31e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    215a:	6b a1       	ldd	r22, Y+35	; 0x23
    215c:	7c a1       	ldd	r23, Y+36	; 0x24
    215e:	8d a1       	ldd	r24, Y+37	; 0x25
    2160:	9e a1       	ldd	r25, Y+38	; 0x26
    2162:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2166:	dc 01       	movw	r26, r24
    2168:	cb 01       	movw	r24, r22
    216a:	9a a3       	std	Y+34, r25	; 0x22
    216c:	89 a3       	std	Y+33, r24	; 0x21
    216e:	89 a1       	ldd	r24, Y+33	; 0x21
    2170:	9a a1       	ldd	r25, Y+34	; 0x22
    2172:	9e 8f       	std	Y+30, r25	; 0x1e
    2174:	8d 8f       	std	Y+29, r24	; 0x1d
    2176:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2178:	9e 8d       	ldd	r25, Y+30	; 0x1e
    217a:	01 97       	sbiw	r24, 0x01	; 1
    217c:	f1 f7       	brne	.-4      	; 0x217a <LCD_Void8BitInit+0x316>
    217e:	9e 8f       	std	Y+30, r25	; 0x1e
    2180:	8d 8f       	std	Y+29, r24	; 0x1d
	/*wait for more than 39us*/
	_delay_ms(1);
	/*Clear LCD*/
	LCD_VoidSendCommand(LCD_ClearDisplay);
    2182:	81 e0       	ldi	r24, 0x01	; 1
    2184:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <LCD_VoidSendCommand>
    2188:	80 e0       	ldi	r24, 0x00	; 0
    218a:	90 e0       	ldi	r25, 0x00	; 0
    218c:	a0 e0       	ldi	r26, 0x00	; 0
    218e:	b0 e4       	ldi	r27, 0x40	; 64
    2190:	89 8f       	std	Y+25, r24	; 0x19
    2192:	9a 8f       	std	Y+26, r25	; 0x1a
    2194:	ab 8f       	std	Y+27, r26	; 0x1b
    2196:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2198:	69 8d       	ldd	r22, Y+25	; 0x19
    219a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    219c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    219e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21a0:	20 e0       	ldi	r18, 0x00	; 0
    21a2:	30 e0       	ldi	r19, 0x00	; 0
    21a4:	4a ef       	ldi	r20, 0xFA	; 250
    21a6:	54 e4       	ldi	r21, 0x44	; 68
    21a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ac:	dc 01       	movw	r26, r24
    21ae:	cb 01       	movw	r24, r22
    21b0:	8d 8b       	std	Y+21, r24	; 0x15
    21b2:	9e 8b       	std	Y+22, r25	; 0x16
    21b4:	af 8b       	std	Y+23, r26	; 0x17
    21b6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    21b8:	6d 89       	ldd	r22, Y+21	; 0x15
    21ba:	7e 89       	ldd	r23, Y+22	; 0x16
    21bc:	8f 89       	ldd	r24, Y+23	; 0x17
    21be:	98 8d       	ldd	r25, Y+24	; 0x18
    21c0:	20 e0       	ldi	r18, 0x00	; 0
    21c2:	30 e0       	ldi	r19, 0x00	; 0
    21c4:	40 e8       	ldi	r20, 0x80	; 128
    21c6:	5f e3       	ldi	r21, 0x3F	; 63
    21c8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21cc:	88 23       	and	r24, r24
    21ce:	2c f4       	brge	.+10     	; 0x21da <LCD_Void8BitInit+0x376>
		__ticks = 1;
    21d0:	81 e0       	ldi	r24, 0x01	; 1
    21d2:	90 e0       	ldi	r25, 0x00	; 0
    21d4:	9c 8b       	std	Y+20, r25	; 0x14
    21d6:	8b 8b       	std	Y+19, r24	; 0x13
    21d8:	3f c0       	rjmp	.+126    	; 0x2258 <LCD_Void8BitInit+0x3f4>
	else if (__tmp > 65535)
    21da:	6d 89       	ldd	r22, Y+21	; 0x15
    21dc:	7e 89       	ldd	r23, Y+22	; 0x16
    21de:	8f 89       	ldd	r24, Y+23	; 0x17
    21e0:	98 8d       	ldd	r25, Y+24	; 0x18
    21e2:	20 e0       	ldi	r18, 0x00	; 0
    21e4:	3f ef       	ldi	r19, 0xFF	; 255
    21e6:	4f e7       	ldi	r20, 0x7F	; 127
    21e8:	57 e4       	ldi	r21, 0x47	; 71
    21ea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21ee:	18 16       	cp	r1, r24
    21f0:	4c f5       	brge	.+82     	; 0x2244 <LCD_Void8BitInit+0x3e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21f2:	69 8d       	ldd	r22, Y+25	; 0x19
    21f4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21f8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21fa:	20 e0       	ldi	r18, 0x00	; 0
    21fc:	30 e0       	ldi	r19, 0x00	; 0
    21fe:	40 e2       	ldi	r20, 0x20	; 32
    2200:	51 e4       	ldi	r21, 0x41	; 65
    2202:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2206:	dc 01       	movw	r26, r24
    2208:	cb 01       	movw	r24, r22
    220a:	bc 01       	movw	r22, r24
    220c:	cd 01       	movw	r24, r26
    220e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2212:	dc 01       	movw	r26, r24
    2214:	cb 01       	movw	r24, r22
    2216:	9c 8b       	std	Y+20, r25	; 0x14
    2218:	8b 8b       	std	Y+19, r24	; 0x13
    221a:	0f c0       	rjmp	.+30     	; 0x223a <LCD_Void8BitInit+0x3d6>
    221c:	88 ec       	ldi	r24, 0xC8	; 200
    221e:	90 e0       	ldi	r25, 0x00	; 0
    2220:	9a 8b       	std	Y+18, r25	; 0x12
    2222:	89 8b       	std	Y+17, r24	; 0x11
    2224:	89 89       	ldd	r24, Y+17	; 0x11
    2226:	9a 89       	ldd	r25, Y+18	; 0x12
    2228:	01 97       	sbiw	r24, 0x01	; 1
    222a:	f1 f7       	brne	.-4      	; 0x2228 <LCD_Void8BitInit+0x3c4>
    222c:	9a 8b       	std	Y+18, r25	; 0x12
    222e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2230:	8b 89       	ldd	r24, Y+19	; 0x13
    2232:	9c 89       	ldd	r25, Y+20	; 0x14
    2234:	01 97       	sbiw	r24, 0x01	; 1
    2236:	9c 8b       	std	Y+20, r25	; 0x14
    2238:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    223a:	8b 89       	ldd	r24, Y+19	; 0x13
    223c:	9c 89       	ldd	r25, Y+20	; 0x14
    223e:	00 97       	sbiw	r24, 0x00	; 0
    2240:	69 f7       	brne	.-38     	; 0x221c <LCD_Void8BitInit+0x3b8>
    2242:	14 c0       	rjmp	.+40     	; 0x226c <LCD_Void8BitInit+0x408>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2244:	6d 89       	ldd	r22, Y+21	; 0x15
    2246:	7e 89       	ldd	r23, Y+22	; 0x16
    2248:	8f 89       	ldd	r24, Y+23	; 0x17
    224a:	98 8d       	ldd	r25, Y+24	; 0x18
    224c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2250:	dc 01       	movw	r26, r24
    2252:	cb 01       	movw	r24, r22
    2254:	9c 8b       	std	Y+20, r25	; 0x14
    2256:	8b 8b       	std	Y+19, r24	; 0x13
    2258:	8b 89       	ldd	r24, Y+19	; 0x13
    225a:	9c 89       	ldd	r25, Y+20	; 0x14
    225c:	98 8b       	std	Y+16, r25	; 0x10
    225e:	8f 87       	std	Y+15, r24	; 0x0f
    2260:	8f 85       	ldd	r24, Y+15	; 0x0f
    2262:	98 89       	ldd	r25, Y+16	; 0x10
    2264:	01 97       	sbiw	r24, 0x01	; 1
    2266:	f1 f7       	brne	.-4      	; 0x2264 <LCD_Void8BitInit+0x400>
    2268:	98 8b       	std	Y+16, r25	; 0x10
    226a:	8f 87       	std	Y+15, r24	; 0x0f
	/*wait for more than 1.53ms*/
	_delay_ms(2);
	/*Entry Mode*/
	LCD_VoidSendCommand(LCD_EntryMode2);
    226c:	86 e0       	ldi	r24, 0x06	; 6
    226e:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <LCD_VoidSendCommand>
    2272:	80 e0       	ldi	r24, 0x00	; 0
    2274:	90 e0       	ldi	r25, 0x00	; 0
    2276:	a0 e8       	ldi	r26, 0x80	; 128
    2278:	bf e3       	ldi	r27, 0x3F	; 63
    227a:	8b 87       	std	Y+11, r24	; 0x0b
    227c:	9c 87       	std	Y+12, r25	; 0x0c
    227e:	ad 87       	std	Y+13, r26	; 0x0d
    2280:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2282:	6b 85       	ldd	r22, Y+11	; 0x0b
    2284:	7c 85       	ldd	r23, Y+12	; 0x0c
    2286:	8d 85       	ldd	r24, Y+13	; 0x0d
    2288:	9e 85       	ldd	r25, Y+14	; 0x0e
    228a:	20 e0       	ldi	r18, 0x00	; 0
    228c:	30 e0       	ldi	r19, 0x00	; 0
    228e:	4a ef       	ldi	r20, 0xFA	; 250
    2290:	54 e4       	ldi	r21, 0x44	; 68
    2292:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2296:	dc 01       	movw	r26, r24
    2298:	cb 01       	movw	r24, r22
    229a:	8f 83       	std	Y+7, r24	; 0x07
    229c:	98 87       	std	Y+8, r25	; 0x08
    229e:	a9 87       	std	Y+9, r26	; 0x09
    22a0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22a2:	6f 81       	ldd	r22, Y+7	; 0x07
    22a4:	78 85       	ldd	r23, Y+8	; 0x08
    22a6:	89 85       	ldd	r24, Y+9	; 0x09
    22a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    22aa:	20 e0       	ldi	r18, 0x00	; 0
    22ac:	30 e0       	ldi	r19, 0x00	; 0
    22ae:	40 e8       	ldi	r20, 0x80	; 128
    22b0:	5f e3       	ldi	r21, 0x3F	; 63
    22b2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22b6:	88 23       	and	r24, r24
    22b8:	2c f4       	brge	.+10     	; 0x22c4 <LCD_Void8BitInit+0x460>
		__ticks = 1;
    22ba:	81 e0       	ldi	r24, 0x01	; 1
    22bc:	90 e0       	ldi	r25, 0x00	; 0
    22be:	9e 83       	std	Y+6, r25	; 0x06
    22c0:	8d 83       	std	Y+5, r24	; 0x05
    22c2:	3f c0       	rjmp	.+126    	; 0x2342 <LCD_Void8BitInit+0x4de>
	else if (__tmp > 65535)
    22c4:	6f 81       	ldd	r22, Y+7	; 0x07
    22c6:	78 85       	ldd	r23, Y+8	; 0x08
    22c8:	89 85       	ldd	r24, Y+9	; 0x09
    22ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    22cc:	20 e0       	ldi	r18, 0x00	; 0
    22ce:	3f ef       	ldi	r19, 0xFF	; 255
    22d0:	4f e7       	ldi	r20, 0x7F	; 127
    22d2:	57 e4       	ldi	r21, 0x47	; 71
    22d4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22d8:	18 16       	cp	r1, r24
    22da:	4c f5       	brge	.+82     	; 0x232e <LCD_Void8BitInit+0x4ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    22de:	7c 85       	ldd	r23, Y+12	; 0x0c
    22e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    22e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    22e4:	20 e0       	ldi	r18, 0x00	; 0
    22e6:	30 e0       	ldi	r19, 0x00	; 0
    22e8:	40 e2       	ldi	r20, 0x20	; 32
    22ea:	51 e4       	ldi	r21, 0x41	; 65
    22ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22f0:	dc 01       	movw	r26, r24
    22f2:	cb 01       	movw	r24, r22
    22f4:	bc 01       	movw	r22, r24
    22f6:	cd 01       	movw	r24, r26
    22f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22fc:	dc 01       	movw	r26, r24
    22fe:	cb 01       	movw	r24, r22
    2300:	9e 83       	std	Y+6, r25	; 0x06
    2302:	8d 83       	std	Y+5, r24	; 0x05
    2304:	0f c0       	rjmp	.+30     	; 0x2324 <LCD_Void8BitInit+0x4c0>
    2306:	88 ec       	ldi	r24, 0xC8	; 200
    2308:	90 e0       	ldi	r25, 0x00	; 0
    230a:	9c 83       	std	Y+4, r25	; 0x04
    230c:	8b 83       	std	Y+3, r24	; 0x03
    230e:	8b 81       	ldd	r24, Y+3	; 0x03
    2310:	9c 81       	ldd	r25, Y+4	; 0x04
    2312:	01 97       	sbiw	r24, 0x01	; 1
    2314:	f1 f7       	brne	.-4      	; 0x2312 <LCD_Void8BitInit+0x4ae>
    2316:	9c 83       	std	Y+4, r25	; 0x04
    2318:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    231a:	8d 81       	ldd	r24, Y+5	; 0x05
    231c:	9e 81       	ldd	r25, Y+6	; 0x06
    231e:	01 97       	sbiw	r24, 0x01	; 1
    2320:	9e 83       	std	Y+6, r25	; 0x06
    2322:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2324:	8d 81       	ldd	r24, Y+5	; 0x05
    2326:	9e 81       	ldd	r25, Y+6	; 0x06
    2328:	00 97       	sbiw	r24, 0x00	; 0
    232a:	69 f7       	brne	.-38     	; 0x2306 <LCD_Void8BitInit+0x4a2>
    232c:	14 c0       	rjmp	.+40     	; 0x2356 <LCD_Void8BitInit+0x4f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    232e:	6f 81       	ldd	r22, Y+7	; 0x07
    2330:	78 85       	ldd	r23, Y+8	; 0x08
    2332:	89 85       	ldd	r24, Y+9	; 0x09
    2334:	9a 85       	ldd	r25, Y+10	; 0x0a
    2336:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    233a:	dc 01       	movw	r26, r24
    233c:	cb 01       	movw	r24, r22
    233e:	9e 83       	std	Y+6, r25	; 0x06
    2340:	8d 83       	std	Y+5, r24	; 0x05
    2342:	8d 81       	ldd	r24, Y+5	; 0x05
    2344:	9e 81       	ldd	r25, Y+6	; 0x06
    2346:	9a 83       	std	Y+2, r25	; 0x02
    2348:	89 83       	std	Y+1, r24	; 0x01
    234a:	89 81       	ldd	r24, Y+1	; 0x01
    234c:	9a 81       	ldd	r25, Y+2	; 0x02
    234e:	01 97       	sbiw	r24, 0x01	; 1
    2350:	f1 f7       	brne	.-4      	; 0x234e <LCD_Void8BitInit+0x4ea>
    2352:	9a 83       	std	Y+2, r25	; 0x02
    2354:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    2356:	ca 5b       	subi	r28, 0xBA	; 186
    2358:	df 4f       	sbci	r29, 0xFF	; 255
    235a:	0f b6       	in	r0, 0x3f	; 63
    235c:	f8 94       	cli
    235e:	de bf       	out	0x3e, r29	; 62
    2360:	0f be       	out	0x3f, r0	; 63
    2362:	cd bf       	out	0x3d, r28	; 61
    2364:	cf 91       	pop	r28
    2366:	df 91       	pop	r29
    2368:	1f 91       	pop	r17
    236a:	0f 91       	pop	r16
    236c:	08 95       	ret

0000236e <LCD_VoidSendString>:
void LCD_VoidSendString (char *Ref_string)
{
    236e:	df 93       	push	r29
    2370:	cf 93       	push	r28
    2372:	00 d0       	rcall	.+0      	; 0x2374 <LCD_VoidSendString+0x6>
    2374:	cd b7       	in	r28, 0x3d	; 61
    2376:	de b7       	in	r29, 0x3e	; 62
    2378:	9a 83       	std	Y+2, r25	; 0x02
    237a:	89 83       	std	Y+1, r24	; 0x01
    237c:	0a c0       	rjmp	.+20     	; 0x2392 <LCD_VoidSendString+0x24>
	while (*Ref_string != '\0')
	{
		LCD_VoidSendChar(*Ref_string);
    237e:	e9 81       	ldd	r30, Y+1	; 0x01
    2380:	fa 81       	ldd	r31, Y+2	; 0x02
    2382:	80 81       	ld	r24, Z
    2384:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <LCD_VoidSendChar>
		Ref_string++;
    2388:	89 81       	ldd	r24, Y+1	; 0x01
    238a:	9a 81       	ldd	r25, Y+2	; 0x02
    238c:	01 96       	adiw	r24, 0x01	; 1
    238e:	9a 83       	std	Y+2, r25	; 0x02
    2390:	89 83       	std	Y+1, r24	; 0x01
	LCD_VoidSendCommand(LCD_EntryMode2);
	_delay_ms(1);
}
void LCD_VoidSendString (char *Ref_string)
{
	while (*Ref_string != '\0')
    2392:	e9 81       	ldd	r30, Y+1	; 0x01
    2394:	fa 81       	ldd	r31, Y+2	; 0x02
    2396:	80 81       	ld	r24, Z
    2398:	88 23       	and	r24, r24
    239a:	89 f7       	brne	.-30     	; 0x237e <LCD_VoidSendString+0x10>
	{
		LCD_VoidSendChar(*Ref_string);
		Ref_string++;
	}
}
    239c:	0f 90       	pop	r0
    239e:	0f 90       	pop	r0
    23a0:	cf 91       	pop	r28
    23a2:	df 91       	pop	r29
    23a4:	08 95       	ret

000023a6 <LCD_VoidSendNumber>:
void LCD_VoidSendNumber(u32 Local_Number)
{
    23a6:	ef 92       	push	r14
    23a8:	ff 92       	push	r15
    23aa:	0f 93       	push	r16
    23ac:	1f 93       	push	r17
    23ae:	df 93       	push	r29
    23b0:	cf 93       	push	r28
    23b2:	cd b7       	in	r28, 0x3d	; 61
    23b4:	de b7       	in	r29, 0x3e	; 62
    23b6:	28 97       	sbiw	r28, 0x08	; 8
    23b8:	0f b6       	in	r0, 0x3f	; 63
    23ba:	f8 94       	cli
    23bc:	de bf       	out	0x3e, r29	; 62
    23be:	0f be       	out	0x3f, r0	; 63
    23c0:	cd bf       	out	0x3d, r28	; 61
    23c2:	6d 83       	std	Y+5, r22	; 0x05
    23c4:	7e 83       	std	Y+6, r23	; 0x06
    23c6:	8f 83       	std	Y+7, r24	; 0x07
    23c8:	98 87       	std	Y+8, r25	; 0x08
	u32 Local_ReversedNum = 2;
    23ca:	82 e0       	ldi	r24, 0x02	; 2
    23cc:	90 e0       	ldi	r25, 0x00	; 0
    23ce:	a0 e0       	ldi	r26, 0x00	; 0
    23d0:	b0 e0       	ldi	r27, 0x00	; 0
    23d2:	89 83       	std	Y+1, r24	; 0x01
    23d4:	9a 83       	std	Y+2, r25	; 0x02
    23d6:	ab 83       	std	Y+3, r26	; 0x03
    23d8:	bc 83       	std	Y+4, r27	; 0x04
    23da:	36 c0       	rjmp	.+108    	; 0x2448 <LCD_VoidSendNumber+0xa2>
	while (Local_Number != 0)
	{
		Local_ReversedNum = (Local_ReversedNum*10) + (Local_Number % 10);
    23dc:	89 81       	ldd	r24, Y+1	; 0x01
    23de:	9a 81       	ldd	r25, Y+2	; 0x02
    23e0:	ab 81       	ldd	r26, Y+3	; 0x03
    23e2:	bc 81       	ldd	r27, Y+4	; 0x04
    23e4:	2a e0       	ldi	r18, 0x0A	; 10
    23e6:	30 e0       	ldi	r19, 0x00	; 0
    23e8:	40 e0       	ldi	r20, 0x00	; 0
    23ea:	50 e0       	ldi	r21, 0x00	; 0
    23ec:	bc 01       	movw	r22, r24
    23ee:	cd 01       	movw	r24, r26
    23f0:	0e 94 d1 1b 	call	0x37a2	; 0x37a2 <__mulsi3>
    23f4:	7b 01       	movw	r14, r22
    23f6:	8c 01       	movw	r16, r24
    23f8:	8d 81       	ldd	r24, Y+5	; 0x05
    23fa:	9e 81       	ldd	r25, Y+6	; 0x06
    23fc:	af 81       	ldd	r26, Y+7	; 0x07
    23fe:	b8 85       	ldd	r27, Y+8	; 0x08
    2400:	2a e0       	ldi	r18, 0x0A	; 10
    2402:	30 e0       	ldi	r19, 0x00	; 0
    2404:	40 e0       	ldi	r20, 0x00	; 0
    2406:	50 e0       	ldi	r21, 0x00	; 0
    2408:	bc 01       	movw	r22, r24
    240a:	cd 01       	movw	r24, r26
    240c:	0e 94 04 1c 	call	0x3808	; 0x3808 <__udivmodsi4>
    2410:	dc 01       	movw	r26, r24
    2412:	cb 01       	movw	r24, r22
    2414:	8e 0d       	add	r24, r14
    2416:	9f 1d       	adc	r25, r15
    2418:	a0 1f       	adc	r26, r16
    241a:	b1 1f       	adc	r27, r17
    241c:	89 83       	std	Y+1, r24	; 0x01
    241e:	9a 83       	std	Y+2, r25	; 0x02
    2420:	ab 83       	std	Y+3, r26	; 0x03
    2422:	bc 83       	std	Y+4, r27	; 0x04
		Local_Number = Local_Number / 10;
    2424:	8d 81       	ldd	r24, Y+5	; 0x05
    2426:	9e 81       	ldd	r25, Y+6	; 0x06
    2428:	af 81       	ldd	r26, Y+7	; 0x07
    242a:	b8 85       	ldd	r27, Y+8	; 0x08
    242c:	2a e0       	ldi	r18, 0x0A	; 10
    242e:	30 e0       	ldi	r19, 0x00	; 0
    2430:	40 e0       	ldi	r20, 0x00	; 0
    2432:	50 e0       	ldi	r21, 0x00	; 0
    2434:	bc 01       	movw	r22, r24
    2436:	cd 01       	movw	r24, r26
    2438:	0e 94 04 1c 	call	0x3808	; 0x3808 <__udivmodsi4>
    243c:	da 01       	movw	r26, r20
    243e:	c9 01       	movw	r24, r18
    2440:	8d 83       	std	Y+5, r24	; 0x05
    2442:	9e 83       	std	Y+6, r25	; 0x06
    2444:	af 83       	std	Y+7, r26	; 0x07
    2446:	b8 87       	std	Y+8, r27	; 0x08
	}
}
void LCD_VoidSendNumber(u32 Local_Number)
{
	u32 Local_ReversedNum = 2;
	while (Local_Number != 0)
    2448:	8d 81       	ldd	r24, Y+5	; 0x05
    244a:	9e 81       	ldd	r25, Y+6	; 0x06
    244c:	af 81       	ldd	r26, Y+7	; 0x07
    244e:	b8 85       	ldd	r27, Y+8	; 0x08
    2450:	00 97       	sbiw	r24, 0x00	; 0
    2452:	a1 05       	cpc	r26, r1
    2454:	b1 05       	cpc	r27, r1
    2456:	11 f6       	brne	.-124    	; 0x23dc <LCD_VoidSendNumber+0x36>
		Local_ReversedNum = (Local_ReversedNum*10) + (Local_Number % 10);
		Local_Number = Local_Number / 10;
	}
	do
	{
		LCD_VoidSendChar((Local_ReversedNum%10)+ '0');
    2458:	89 81       	ldd	r24, Y+1	; 0x01
    245a:	9a 81       	ldd	r25, Y+2	; 0x02
    245c:	ab 81       	ldd	r26, Y+3	; 0x03
    245e:	bc 81       	ldd	r27, Y+4	; 0x04
    2460:	2a e0       	ldi	r18, 0x0A	; 10
    2462:	30 e0       	ldi	r19, 0x00	; 0
    2464:	40 e0       	ldi	r20, 0x00	; 0
    2466:	50 e0       	ldi	r21, 0x00	; 0
    2468:	bc 01       	movw	r22, r24
    246a:	cd 01       	movw	r24, r26
    246c:	0e 94 04 1c 	call	0x3808	; 0x3808 <__udivmodsi4>
    2470:	dc 01       	movw	r26, r24
    2472:	cb 01       	movw	r24, r22
    2474:	80 5d       	subi	r24, 0xD0	; 208
    2476:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <LCD_VoidSendChar>
		Local_ReversedNum /= 10;
    247a:	89 81       	ldd	r24, Y+1	; 0x01
    247c:	9a 81       	ldd	r25, Y+2	; 0x02
    247e:	ab 81       	ldd	r26, Y+3	; 0x03
    2480:	bc 81       	ldd	r27, Y+4	; 0x04
    2482:	2a e0       	ldi	r18, 0x0A	; 10
    2484:	30 e0       	ldi	r19, 0x00	; 0
    2486:	40 e0       	ldi	r20, 0x00	; 0
    2488:	50 e0       	ldi	r21, 0x00	; 0
    248a:	bc 01       	movw	r22, r24
    248c:	cd 01       	movw	r24, r26
    248e:	0e 94 04 1c 	call	0x3808	; 0x3808 <__udivmodsi4>
    2492:	da 01       	movw	r26, r20
    2494:	c9 01       	movw	r24, r18
    2496:	89 83       	std	Y+1, r24	; 0x01
    2498:	9a 83       	std	Y+2, r25	; 0x02
    249a:	ab 83       	std	Y+3, r26	; 0x03
    249c:	bc 83       	std	Y+4, r27	; 0x04
	}while(Local_ReversedNum != 2);
    249e:	89 81       	ldd	r24, Y+1	; 0x01
    24a0:	9a 81       	ldd	r25, Y+2	; 0x02
    24a2:	ab 81       	ldd	r26, Y+3	; 0x03
    24a4:	bc 81       	ldd	r27, Y+4	; 0x04
    24a6:	82 30       	cpi	r24, 0x02	; 2
    24a8:	91 05       	cpc	r25, r1
    24aa:	a1 05       	cpc	r26, r1
    24ac:	b1 05       	cpc	r27, r1
    24ae:	a1 f6       	brne	.-88     	; 0x2458 <LCD_VoidSendNumber+0xb2>
	}
	for (int count = i-1; count >= 0; count--)
	{
		LCD_VoidSendChar(arr[count] + '0');
	}*/
}
    24b0:	28 96       	adiw	r28, 0x08	; 8
    24b2:	0f b6       	in	r0, 0x3f	; 63
    24b4:	f8 94       	cli
    24b6:	de bf       	out	0x3e, r29	; 62
    24b8:	0f be       	out	0x3f, r0	; 63
    24ba:	cd bf       	out	0x3d, r28	; 61
    24bc:	cf 91       	pop	r28
    24be:	df 91       	pop	r29
    24c0:	1f 91       	pop	r17
    24c2:	0f 91       	pop	r16
    24c4:	ff 90       	pop	r15
    24c6:	ef 90       	pop	r14
    24c8:	08 95       	ret

000024ca <LCD_VoidStartFrom>:
void LCD_VoidStartFrom(u8 Local_RowPosition, u8 Local_ColPosition)
{
    24ca:	df 93       	push	r29
    24cc:	cf 93       	push	r28
    24ce:	00 d0       	rcall	.+0      	; 0x24d0 <LCD_VoidStartFrom+0x6>
    24d0:	0f 92       	push	r0
    24d2:	cd b7       	in	r28, 0x3d	; 61
    24d4:	de b7       	in	r29, 0x3e	; 62
    24d6:	8a 83       	std	Y+2, r24	; 0x02
    24d8:	6b 83       	std	Y+3, r22	; 0x03
	if((Local_ColPosition < Cols_Number) && (Local_RowPosition < Rows_Number))
    24da:	8b 81       	ldd	r24, Y+3	; 0x03
    24dc:	80 31       	cpi	r24, 0x10	; 16
    24de:	b8 f4       	brcc	.+46     	; 0x250e <LCD_VoidStartFrom+0x44>
    24e0:	8a 81       	ldd	r24, Y+2	; 0x02
    24e2:	82 30       	cpi	r24, 0x02	; 2
    24e4:	a0 f4       	brcc	.+40     	; 0x250e <LCD_VoidStartFrom+0x44>
	{
		u8 Local_DDRAMAddress = LCD_SetAddressDDRAM + (Local_RowPosition * Line1_Address) + Local_ColPosition;
    24e6:	8a 81       	ldd	r24, Y+2	; 0x02
    24e8:	88 2f       	mov	r24, r24
    24ea:	90 e0       	ldi	r25, 0x00	; 0
    24ec:	02 96       	adiw	r24, 0x02	; 2
    24ee:	00 24       	eor	r0, r0
    24f0:	96 95       	lsr	r25
    24f2:	87 95       	ror	r24
    24f4:	07 94       	ror	r0
    24f6:	96 95       	lsr	r25
    24f8:	87 95       	ror	r24
    24fa:	07 94       	ror	r0
    24fc:	98 2f       	mov	r25, r24
    24fe:	80 2d       	mov	r24, r0
    2500:	98 2f       	mov	r25, r24
    2502:	8b 81       	ldd	r24, Y+3	; 0x03
    2504:	89 0f       	add	r24, r25
    2506:	89 83       	std	Y+1, r24	; 0x01
		LCD_VoidSendCommand(Local_DDRAMAddress);
    2508:	89 81       	ldd	r24, Y+1	; 0x01
    250a:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <LCD_VoidSendCommand>
	}
}
    250e:	0f 90       	pop	r0
    2510:	0f 90       	pop	r0
    2512:	0f 90       	pop	r0
    2514:	cf 91       	pop	r28
    2516:	df 91       	pop	r29
    2518:	08 95       	ret

0000251a <LCD_VoidSendStringFromPos>:
void LCD_VoidSendStringFromPos (char *Ref_string, u8 Local_RowPosition, u8 Local_ColPosition)
{
    251a:	df 93       	push	r29
    251c:	cf 93       	push	r28
    251e:	00 d0       	rcall	.+0      	; 0x2520 <LCD_VoidSendStringFromPos+0x6>
    2520:	00 d0       	rcall	.+0      	; 0x2522 <LCD_VoidSendStringFromPos+0x8>
    2522:	00 d0       	rcall	.+0      	; 0x2524 <LCD_VoidSendStringFromPos+0xa>
    2524:	cd b7       	in	r28, 0x3d	; 61
    2526:	de b7       	in	r29, 0x3e	; 62
    2528:	9c 83       	std	Y+4, r25	; 0x04
    252a:	8b 83       	std	Y+3, r24	; 0x03
    252c:	6d 83       	std	Y+5, r22	; 0x05
    252e:	4e 83       	std	Y+6, r20	; 0x06
	u8 Local_Index = 0;
    2530:	1a 82       	std	Y+2, r1	; 0x02
	u8 line;
	if (Local_RowPosition == 0)
    2532:	8d 81       	ldd	r24, Y+5	; 0x05
    2534:	88 23       	and	r24, r24
    2536:	11 f4       	brne	.+4      	; 0x253c <LCD_VoidSendStringFromPos+0x22>
	{
		line = Line_1;
    2538:	19 82       	std	Y+1, r1	; 0x01
    253a:	05 c0       	rjmp	.+10     	; 0x2546 <LCD_VoidSendStringFromPos+0x2c>
	}
	else if (Local_RowPosition == 1)
    253c:	8d 81       	ldd	r24, Y+5	; 0x05
    253e:	81 30       	cpi	r24, 0x01	; 1
    2540:	11 f4       	brne	.+4      	; 0x2546 <LCD_VoidSendStringFromPos+0x2c>
	{
		line = Line_2;
    2542:	81 e0       	ldi	r24, 0x01	; 1
    2544:	89 83       	std	Y+1, r24	; 0x01
	}
	LCD_VoidStartFrom(Local_RowPosition,Local_ColPosition);
    2546:	8d 81       	ldd	r24, Y+5	; 0x05
    2548:	6e 81       	ldd	r22, Y+6	; 0x06
    254a:	0e 94 65 12 	call	0x24ca	; 0x24ca <LCD_VoidStartFrom>
    254e:	90 c0       	rjmp	.+288    	; 0x2670 <LCD_VoidSendStringFromPos+0x156>
	while ((Ref_string[Local_Index] != '\0') && (((Local_RowPosition * Cols_Number) + (Local_ColPosition + Local_Index)) < Total_blocks_Num))
	{
		if((Local_RowPosition*16) + (Local_ColPosition + Local_Index) < Cols_Number)
    2550:	8d 81       	ldd	r24, Y+5	; 0x05
    2552:	88 2f       	mov	r24, r24
    2554:	90 e0       	ldi	r25, 0x00	; 0
    2556:	ac 01       	movw	r20, r24
    2558:	42 95       	swap	r20
    255a:	52 95       	swap	r21
    255c:	50 7f       	andi	r21, 0xF0	; 240
    255e:	54 27       	eor	r21, r20
    2560:	40 7f       	andi	r20, 0xF0	; 240
    2562:	54 27       	eor	r21, r20
    2564:	8e 81       	ldd	r24, Y+6	; 0x06
    2566:	28 2f       	mov	r18, r24
    2568:	30 e0       	ldi	r19, 0x00	; 0
    256a:	8a 81       	ldd	r24, Y+2	; 0x02
    256c:	88 2f       	mov	r24, r24
    256e:	90 e0       	ldi	r25, 0x00	; 0
    2570:	82 0f       	add	r24, r18
    2572:	93 1f       	adc	r25, r19
    2574:	84 0f       	add	r24, r20
    2576:	95 1f       	adc	r25, r21
    2578:	80 31       	cpi	r24, 0x10	; 16
    257a:	91 05       	cpc	r25, r1
    257c:	7c f4       	brge	.+30     	; 0x259c <LCD_VoidSendStringFromPos+0x82>
		{
			LCD_VoidSendChar(Ref_string[Local_Index]);
    257e:	8a 81       	ldd	r24, Y+2	; 0x02
    2580:	28 2f       	mov	r18, r24
    2582:	30 e0       	ldi	r19, 0x00	; 0
    2584:	8b 81       	ldd	r24, Y+3	; 0x03
    2586:	9c 81       	ldd	r25, Y+4	; 0x04
    2588:	fc 01       	movw	r30, r24
    258a:	e2 0f       	add	r30, r18
    258c:	f3 1f       	adc	r31, r19
    258e:	80 81       	ld	r24, Z
    2590:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <LCD_VoidSendChar>
			Local_Index++;
    2594:	8a 81       	ldd	r24, Y+2	; 0x02
    2596:	8f 5f       	subi	r24, 0xFF	; 255
    2598:	8a 83       	std	Y+2, r24	; 0x02
    259a:	6a c0       	rjmp	.+212    	; 0x2670 <LCD_VoidSendStringFromPos+0x156>
		}
		else if(((Local_RowPosition*16) + (Local_ColPosition + Local_Index) == Cols_Number) && (line == Line_1))
    259c:	8d 81       	ldd	r24, Y+5	; 0x05
    259e:	88 2f       	mov	r24, r24
    25a0:	90 e0       	ldi	r25, 0x00	; 0
    25a2:	ac 01       	movw	r20, r24
    25a4:	42 95       	swap	r20
    25a6:	52 95       	swap	r21
    25a8:	50 7f       	andi	r21, 0xF0	; 240
    25aa:	54 27       	eor	r21, r20
    25ac:	40 7f       	andi	r20, 0xF0	; 240
    25ae:	54 27       	eor	r21, r20
    25b0:	8e 81       	ldd	r24, Y+6	; 0x06
    25b2:	28 2f       	mov	r18, r24
    25b4:	30 e0       	ldi	r19, 0x00	; 0
    25b6:	8a 81       	ldd	r24, Y+2	; 0x02
    25b8:	88 2f       	mov	r24, r24
    25ba:	90 e0       	ldi	r25, 0x00	; 0
    25bc:	82 0f       	add	r24, r18
    25be:	93 1f       	adc	r25, r19
    25c0:	84 0f       	add	r24, r20
    25c2:	95 1f       	adc	r25, r21
    25c4:	80 31       	cpi	r24, 0x10	; 16
    25c6:	91 05       	cpc	r25, r1
    25c8:	69 f4       	brne	.+26     	; 0x25e4 <LCD_VoidSendStringFromPos+0xca>
    25ca:	89 81       	ldd	r24, Y+1	; 0x01
    25cc:	88 23       	and	r24, r24
    25ce:	51 f4       	brne	.+20     	; 0x25e4 <LCD_VoidSendStringFromPos+0xca>
		{
			LCD_VoidStartFrom(1,0);
    25d0:	81 e0       	ldi	r24, 0x01	; 1
    25d2:	60 e0       	ldi	r22, 0x00	; 0
    25d4:	0e 94 65 12 	call	0x24ca	; 0x24ca <LCD_VoidStartFrom>
			line = Line_2;
    25d8:	81 e0       	ldi	r24, 0x01	; 1
    25da:	89 83       	std	Y+1, r24	; 0x01
			Local_RowPosition = 1;
    25dc:	81 e0       	ldi	r24, 0x01	; 1
    25de:	8d 83       	std	Y+5, r24	; 0x05
			Local_ColPosition = 0;
    25e0:	1e 82       	std	Y+6, r1	; 0x06
    25e2:	46 c0       	rjmp	.+140    	; 0x2670 <LCD_VoidSendStringFromPos+0x156>
		}
		else if(((Local_RowPosition*16) + (Local_ColPosition + Local_Index) < Total_blocks_Num) && (line == Line_2))
    25e4:	8d 81       	ldd	r24, Y+5	; 0x05
    25e6:	88 2f       	mov	r24, r24
    25e8:	90 e0       	ldi	r25, 0x00	; 0
    25ea:	ac 01       	movw	r20, r24
    25ec:	42 95       	swap	r20
    25ee:	52 95       	swap	r21
    25f0:	50 7f       	andi	r21, 0xF0	; 240
    25f2:	54 27       	eor	r21, r20
    25f4:	40 7f       	andi	r20, 0xF0	; 240
    25f6:	54 27       	eor	r21, r20
    25f8:	8e 81       	ldd	r24, Y+6	; 0x06
    25fa:	28 2f       	mov	r18, r24
    25fc:	30 e0       	ldi	r19, 0x00	; 0
    25fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2600:	88 2f       	mov	r24, r24
    2602:	90 e0       	ldi	r25, 0x00	; 0
    2604:	82 0f       	add	r24, r18
    2606:	93 1f       	adc	r25, r19
    2608:	84 0f       	add	r24, r20
    260a:	95 1f       	adc	r25, r21
    260c:	80 32       	cpi	r24, 0x20	; 32
    260e:	91 05       	cpc	r25, r1
    2610:	7c f5       	brge	.+94     	; 0x2670 <LCD_VoidSendStringFromPos+0x156>
    2612:	89 81       	ldd	r24, Y+1	; 0x01
    2614:	81 30       	cpi	r24, 0x01	; 1
    2616:	61 f5       	brne	.+88     	; 0x2670 <LCD_VoidSendStringFromPos+0x156>
		{
			LCD_VoidSendChar(Ref_string[Local_Index]);
    2618:	8a 81       	ldd	r24, Y+2	; 0x02
    261a:	28 2f       	mov	r18, r24
    261c:	30 e0       	ldi	r19, 0x00	; 0
    261e:	8b 81       	ldd	r24, Y+3	; 0x03
    2620:	9c 81       	ldd	r25, Y+4	; 0x04
    2622:	fc 01       	movw	r30, r24
    2624:	e2 0f       	add	r30, r18
    2626:	f3 1f       	adc	r31, r19
    2628:	80 81       	ld	r24, Z
    262a:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <LCD_VoidSendChar>
			Local_Index++;
    262e:	8a 81       	ldd	r24, Y+2	; 0x02
    2630:	8f 5f       	subi	r24, 0xFF	; 255
    2632:	8a 83       	std	Y+2, r24	; 0x02
			if(((Local_RowPosition*16) + (Local_ColPosition + Local_Index)) == Total_blocks_Num)
    2634:	8d 81       	ldd	r24, Y+5	; 0x05
    2636:	88 2f       	mov	r24, r24
    2638:	90 e0       	ldi	r25, 0x00	; 0
    263a:	ac 01       	movw	r20, r24
    263c:	42 95       	swap	r20
    263e:	52 95       	swap	r21
    2640:	50 7f       	andi	r21, 0xF0	; 240
    2642:	54 27       	eor	r21, r20
    2644:	40 7f       	andi	r20, 0xF0	; 240
    2646:	54 27       	eor	r21, r20
    2648:	8e 81       	ldd	r24, Y+6	; 0x06
    264a:	28 2f       	mov	r18, r24
    264c:	30 e0       	ldi	r19, 0x00	; 0
    264e:	8a 81       	ldd	r24, Y+2	; 0x02
    2650:	88 2f       	mov	r24, r24
    2652:	90 e0       	ldi	r25, 0x00	; 0
    2654:	82 0f       	add	r24, r18
    2656:	93 1f       	adc	r25, r19
    2658:	84 0f       	add	r24, r20
    265a:	95 1f       	adc	r25, r21
    265c:	80 32       	cpi	r24, 0x20	; 32
    265e:	91 05       	cpc	r25, r1
    2660:	39 f4       	brne	.+14     	; 0x2670 <LCD_VoidSendStringFromPos+0x156>
			{
				LCD_VoidStartFrom(0,0);
    2662:	80 e0       	ldi	r24, 0x00	; 0
    2664:	60 e0       	ldi	r22, 0x00	; 0
    2666:	0e 94 65 12 	call	0x24ca	; 0x24ca <LCD_VoidStartFrom>
				Local_RowPosition = 0;
    266a:	1d 82       	std	Y+5, r1	; 0x05
				Local_ColPosition = 0;
    266c:	1e 82       	std	Y+6, r1	; 0x06
				line = Line_1;
    266e:	19 82       	std	Y+1, r1	; 0x01
	else if (Local_RowPosition == 1)
	{
		line = Line_2;
	}
	LCD_VoidStartFrom(Local_RowPosition,Local_ColPosition);
	while ((Ref_string[Local_Index] != '\0') && (((Local_RowPosition * Cols_Number) + (Local_ColPosition + Local_Index)) < Total_blocks_Num))
    2670:	8a 81       	ldd	r24, Y+2	; 0x02
    2672:	28 2f       	mov	r18, r24
    2674:	30 e0       	ldi	r19, 0x00	; 0
    2676:	8b 81       	ldd	r24, Y+3	; 0x03
    2678:	9c 81       	ldd	r25, Y+4	; 0x04
    267a:	fc 01       	movw	r30, r24
    267c:	e2 0f       	add	r30, r18
    267e:	f3 1f       	adc	r31, r19
    2680:	80 81       	ld	r24, Z
    2682:	88 23       	and	r24, r24
    2684:	c1 f0       	breq	.+48     	; 0x26b6 <LCD_VoidSendStringFromPos+0x19c>
    2686:	8d 81       	ldd	r24, Y+5	; 0x05
    2688:	88 2f       	mov	r24, r24
    268a:	90 e0       	ldi	r25, 0x00	; 0
    268c:	ac 01       	movw	r20, r24
    268e:	42 95       	swap	r20
    2690:	52 95       	swap	r21
    2692:	50 7f       	andi	r21, 0xF0	; 240
    2694:	54 27       	eor	r21, r20
    2696:	40 7f       	andi	r20, 0xF0	; 240
    2698:	54 27       	eor	r21, r20
    269a:	8e 81       	ldd	r24, Y+6	; 0x06
    269c:	28 2f       	mov	r18, r24
    269e:	30 e0       	ldi	r19, 0x00	; 0
    26a0:	8a 81       	ldd	r24, Y+2	; 0x02
    26a2:	88 2f       	mov	r24, r24
    26a4:	90 e0       	ldi	r25, 0x00	; 0
    26a6:	82 0f       	add	r24, r18
    26a8:	93 1f       	adc	r25, r19
    26aa:	84 0f       	add	r24, r20
    26ac:	95 1f       	adc	r25, r21
    26ae:	80 32       	cpi	r24, 0x20	; 32
    26b0:	91 05       	cpc	r25, r1
    26b2:	0c f4       	brge	.+2      	; 0x26b6 <LCD_VoidSendStringFromPos+0x19c>
    26b4:	4d cf       	rjmp	.-358    	; 0x2550 <LCD_VoidSendStringFromPos+0x36>
				Local_ColPosition = 0;
				line = Line_1;
			}
		}
	}
}
    26b6:	26 96       	adiw	r28, 0x06	; 6
    26b8:	0f b6       	in	r0, 0x3f	; 63
    26ba:	f8 94       	cli
    26bc:	de bf       	out	0x3e, r29	; 62
    26be:	0f be       	out	0x3f, r0	; 63
    26c0:	cd bf       	out	0x3d, r28	; 61
    26c2:	cf 91       	pop	r28
    26c4:	df 91       	pop	r29
    26c6:	08 95       	ret

000026c8 <LCD_VoidAddCustomPattern>:
void LCD_VoidAddCustomPattern(u8 * Local_Pattern, u8 Local_IndexCGRAM)
{
    26c8:	df 93       	push	r29
    26ca:	cf 93       	push	r28
    26cc:	cd b7       	in	r28, 0x3d	; 61
    26ce:	de b7       	in	r29, 0x3e	; 62
    26d0:	64 97       	sbiw	r28, 0x14	; 20
    26d2:	0f b6       	in	r0, 0x3f	; 63
    26d4:	f8 94       	cli
    26d6:	de bf       	out	0x3e, r29	; 62
    26d8:	0f be       	out	0x3f, r0	; 63
    26da:	cd bf       	out	0x3d, r28	; 61
    26dc:	9b 8b       	std	Y+19, r25	; 0x13
    26de:	8a 8b       	std	Y+18, r24	; 0x12
    26e0:	6c 8b       	std	Y+20, r22	; 0x14
	if(Local_IndexCGRAM < CGRAM_MaxSize)
    26e2:	8c 89       	ldd	r24, Y+20	; 0x14
    26e4:	88 30       	cpi	r24, 0x08	; 8
    26e6:	08 f0       	brcs	.+2      	; 0x26ea <LCD_VoidAddCustomPattern+0x22>
    26e8:	9a c0       	rjmp	.+308    	; 0x281e <LCD_VoidAddCustomPattern+0x156>
	{
		u8 Local_CGRAMAddress = LCD_SetAddressCGRAM + Local_IndexCGRAM * CGRAM_MaxSize;
    26ea:	8c 89       	ldd	r24, Y+20	; 0x14
    26ec:	88 2f       	mov	r24, r24
    26ee:	90 e0       	ldi	r25, 0x00	; 0
    26f0:	08 96       	adiw	r24, 0x08	; 8
    26f2:	88 0f       	add	r24, r24
    26f4:	99 1f       	adc	r25, r25
    26f6:	88 0f       	add	r24, r24
    26f8:	99 1f       	adc	r25, r25
    26fa:	88 0f       	add	r24, r24
    26fc:	99 1f       	adc	r25, r25
    26fe:	89 8b       	std	Y+17, r24	; 0x11
		LCD_VoidSendCommand(Local_CGRAMAddress);
    2700:	89 89       	ldd	r24, Y+17	; 0x11
    2702:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <LCD_VoidSendCommand>
		for(int index = 0; index < CGRAM_MaxSize; index++)
    2706:	18 8a       	std	Y+16, r1	; 0x10
    2708:	1f 86       	std	Y+15, r1	; 0x0f
    270a:	0f c0       	rjmp	.+30     	; 0x272a <LCD_VoidAddCustomPattern+0x62>
		{
			LCD_VoidSendChar(Local_Pattern[index]);
    270c:	2f 85       	ldd	r18, Y+15	; 0x0f
    270e:	38 89       	ldd	r19, Y+16	; 0x10
    2710:	8a 89       	ldd	r24, Y+18	; 0x12
    2712:	9b 89       	ldd	r25, Y+19	; 0x13
    2714:	fc 01       	movw	r30, r24
    2716:	e2 0f       	add	r30, r18
    2718:	f3 1f       	adc	r31, r19
    271a:	80 81       	ld	r24, Z
    271c:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <LCD_VoidSendChar>
{
	if(Local_IndexCGRAM < CGRAM_MaxSize)
	{
		u8 Local_CGRAMAddress = LCD_SetAddressCGRAM + Local_IndexCGRAM * CGRAM_MaxSize;
		LCD_VoidSendCommand(Local_CGRAMAddress);
		for(int index = 0; index < CGRAM_MaxSize; index++)
    2720:	8f 85       	ldd	r24, Y+15	; 0x0f
    2722:	98 89       	ldd	r25, Y+16	; 0x10
    2724:	01 96       	adiw	r24, 0x01	; 1
    2726:	98 8b       	std	Y+16, r25	; 0x10
    2728:	8f 87       	std	Y+15, r24	; 0x0f
    272a:	8f 85       	ldd	r24, Y+15	; 0x0f
    272c:	98 89       	ldd	r25, Y+16	; 0x10
    272e:	88 30       	cpi	r24, 0x08	; 8
    2730:	91 05       	cpc	r25, r1
    2732:	64 f3       	brlt	.-40     	; 0x270c <LCD_VoidAddCustomPattern+0x44>
		{
			LCD_VoidSendChar(Local_Pattern[index]);
		}
		LCD_VoidSendCommand(LCD_ReturnHome);
    2734:	82 e0       	ldi	r24, 0x02	; 2
    2736:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <LCD_VoidSendCommand>
    273a:	80 e0       	ldi	r24, 0x00	; 0
    273c:	90 e0       	ldi	r25, 0x00	; 0
    273e:	a0 e0       	ldi	r26, 0x00	; 0
    2740:	b0 e4       	ldi	r27, 0x40	; 64
    2742:	8b 87       	std	Y+11, r24	; 0x0b
    2744:	9c 87       	std	Y+12, r25	; 0x0c
    2746:	ad 87       	std	Y+13, r26	; 0x0d
    2748:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    274a:	6b 85       	ldd	r22, Y+11	; 0x0b
    274c:	7c 85       	ldd	r23, Y+12	; 0x0c
    274e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2750:	9e 85       	ldd	r25, Y+14	; 0x0e
    2752:	20 e0       	ldi	r18, 0x00	; 0
    2754:	30 e0       	ldi	r19, 0x00	; 0
    2756:	4a ef       	ldi	r20, 0xFA	; 250
    2758:	54 e4       	ldi	r21, 0x44	; 68
    275a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    275e:	dc 01       	movw	r26, r24
    2760:	cb 01       	movw	r24, r22
    2762:	8f 83       	std	Y+7, r24	; 0x07
    2764:	98 87       	std	Y+8, r25	; 0x08
    2766:	a9 87       	std	Y+9, r26	; 0x09
    2768:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    276a:	6f 81       	ldd	r22, Y+7	; 0x07
    276c:	78 85       	ldd	r23, Y+8	; 0x08
    276e:	89 85       	ldd	r24, Y+9	; 0x09
    2770:	9a 85       	ldd	r25, Y+10	; 0x0a
    2772:	20 e0       	ldi	r18, 0x00	; 0
    2774:	30 e0       	ldi	r19, 0x00	; 0
    2776:	40 e8       	ldi	r20, 0x80	; 128
    2778:	5f e3       	ldi	r21, 0x3F	; 63
    277a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    277e:	88 23       	and	r24, r24
    2780:	2c f4       	brge	.+10     	; 0x278c <LCD_VoidAddCustomPattern+0xc4>
		__ticks = 1;
    2782:	81 e0       	ldi	r24, 0x01	; 1
    2784:	90 e0       	ldi	r25, 0x00	; 0
    2786:	9e 83       	std	Y+6, r25	; 0x06
    2788:	8d 83       	std	Y+5, r24	; 0x05
    278a:	3f c0       	rjmp	.+126    	; 0x280a <LCD_VoidAddCustomPattern+0x142>
	else if (__tmp > 65535)
    278c:	6f 81       	ldd	r22, Y+7	; 0x07
    278e:	78 85       	ldd	r23, Y+8	; 0x08
    2790:	89 85       	ldd	r24, Y+9	; 0x09
    2792:	9a 85       	ldd	r25, Y+10	; 0x0a
    2794:	20 e0       	ldi	r18, 0x00	; 0
    2796:	3f ef       	ldi	r19, 0xFF	; 255
    2798:	4f e7       	ldi	r20, 0x7F	; 127
    279a:	57 e4       	ldi	r21, 0x47	; 71
    279c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27a0:	18 16       	cp	r1, r24
    27a2:	4c f5       	brge	.+82     	; 0x27f6 <LCD_VoidAddCustomPattern+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    27a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    27a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    27aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    27ac:	20 e0       	ldi	r18, 0x00	; 0
    27ae:	30 e0       	ldi	r19, 0x00	; 0
    27b0:	40 e2       	ldi	r20, 0x20	; 32
    27b2:	51 e4       	ldi	r21, 0x41	; 65
    27b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27b8:	dc 01       	movw	r26, r24
    27ba:	cb 01       	movw	r24, r22
    27bc:	bc 01       	movw	r22, r24
    27be:	cd 01       	movw	r24, r26
    27c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27c4:	dc 01       	movw	r26, r24
    27c6:	cb 01       	movw	r24, r22
    27c8:	9e 83       	std	Y+6, r25	; 0x06
    27ca:	8d 83       	std	Y+5, r24	; 0x05
    27cc:	0f c0       	rjmp	.+30     	; 0x27ec <LCD_VoidAddCustomPattern+0x124>
    27ce:	88 ec       	ldi	r24, 0xC8	; 200
    27d0:	90 e0       	ldi	r25, 0x00	; 0
    27d2:	9c 83       	std	Y+4, r25	; 0x04
    27d4:	8b 83       	std	Y+3, r24	; 0x03
    27d6:	8b 81       	ldd	r24, Y+3	; 0x03
    27d8:	9c 81       	ldd	r25, Y+4	; 0x04
    27da:	01 97       	sbiw	r24, 0x01	; 1
    27dc:	f1 f7       	brne	.-4      	; 0x27da <LCD_VoidAddCustomPattern+0x112>
    27de:	9c 83       	std	Y+4, r25	; 0x04
    27e0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27e2:	8d 81       	ldd	r24, Y+5	; 0x05
    27e4:	9e 81       	ldd	r25, Y+6	; 0x06
    27e6:	01 97       	sbiw	r24, 0x01	; 1
    27e8:	9e 83       	std	Y+6, r25	; 0x06
    27ea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27ec:	8d 81       	ldd	r24, Y+5	; 0x05
    27ee:	9e 81       	ldd	r25, Y+6	; 0x06
    27f0:	00 97       	sbiw	r24, 0x00	; 0
    27f2:	69 f7       	brne	.-38     	; 0x27ce <LCD_VoidAddCustomPattern+0x106>
    27f4:	14 c0       	rjmp	.+40     	; 0x281e <LCD_VoidAddCustomPattern+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27f6:	6f 81       	ldd	r22, Y+7	; 0x07
    27f8:	78 85       	ldd	r23, Y+8	; 0x08
    27fa:	89 85       	ldd	r24, Y+9	; 0x09
    27fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    27fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2802:	dc 01       	movw	r26, r24
    2804:	cb 01       	movw	r24, r22
    2806:	9e 83       	std	Y+6, r25	; 0x06
    2808:	8d 83       	std	Y+5, r24	; 0x05
    280a:	8d 81       	ldd	r24, Y+5	; 0x05
    280c:	9e 81       	ldd	r25, Y+6	; 0x06
    280e:	9a 83       	std	Y+2, r25	; 0x02
    2810:	89 83       	std	Y+1, r24	; 0x01
    2812:	89 81       	ldd	r24, Y+1	; 0x01
    2814:	9a 81       	ldd	r25, Y+2	; 0x02
    2816:	01 97       	sbiw	r24, 0x01	; 1
    2818:	f1 f7       	brne	.-4      	; 0x2816 <LCD_VoidAddCustomPattern+0x14e>
    281a:	9a 83       	std	Y+2, r25	; 0x02
    281c:	89 83       	std	Y+1, r24	; 0x01
		/*Wait more than 1.53ms after ReturnHome Command*/
		_delay_ms(2);
	}
}
    281e:	64 96       	adiw	r28, 0x14	; 20
    2820:	0f b6       	in	r0, 0x3f	; 63
    2822:	f8 94       	cli
    2824:	de bf       	out	0x3e, r29	; 62
    2826:	0f be       	out	0x3f, r0	; 63
    2828:	cd bf       	out	0x3d, r28	; 61
    282a:	cf 91       	pop	r28
    282c:	df 91       	pop	r29
    282e:	08 95       	ret

00002830 <LCD_VoidCustomDisplay>:
void LCD_VoidCustomDisplay(u8 Local_CGRAMIndex, u8 Local_RowPosition, u8 Local_ColPosition)
{
    2830:	df 93       	push	r29
    2832:	cf 93       	push	r28
    2834:	00 d0       	rcall	.+0      	; 0x2836 <LCD_VoidCustomDisplay+0x6>
    2836:	0f 92       	push	r0
    2838:	cd b7       	in	r28, 0x3d	; 61
    283a:	de b7       	in	r29, 0x3e	; 62
    283c:	89 83       	std	Y+1, r24	; 0x01
    283e:	6a 83       	std	Y+2, r22	; 0x02
    2840:	4b 83       	std	Y+3, r20	; 0x03
	LCD_VoidStartFrom(Local_RowPosition, Local_ColPosition);
    2842:	8a 81       	ldd	r24, Y+2	; 0x02
    2844:	6b 81       	ldd	r22, Y+3	; 0x03
    2846:	0e 94 65 12 	call	0x24ca	; 0x24ca <LCD_VoidStartFrom>
	LCD_VoidSendChar(Local_CGRAMIndex);
    284a:	89 81       	ldd	r24, Y+1	; 0x01
    284c:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <LCD_VoidSendChar>
}
    2850:	0f 90       	pop	r0
    2852:	0f 90       	pop	r0
    2854:	0f 90       	pop	r0
    2856:	cf 91       	pop	r28
    2858:	df 91       	pop	r29
    285a:	08 95       	ret

0000285c <LCD_VoidRightShift>:
void LCD_VoidRightShift (char *Ref_string)
{
    285c:	df 93       	push	r29
    285e:	cf 93       	push	r28
    2860:	cd b7       	in	r28, 0x3d	; 61
    2862:	de b7       	in	r29, 0x3e	; 62
    2864:	ae 97       	sbiw	r28, 0x2e	; 46
    2866:	0f b6       	in	r0, 0x3f	; 63
    2868:	f8 94       	cli
    286a:	de bf       	out	0x3e, r29	; 62
    286c:	0f be       	out	0x3f, r0	; 63
    286e:	cd bf       	out	0x3d, r28	; 61
    2870:	9e a7       	std	Y+46, r25	; 0x2e
    2872:	8d a7       	std	Y+45, r24	; 0x2d
	u8 Local_RowPosition = 0;
    2874:	1c a6       	std	Y+44, r1	; 0x2c
	u8 Local_ColPosition = 0;
    2876:	1b a6       	std	Y+43, r1	; 0x2b
    2878:	84 c0       	rjmp	.+264    	; 0x2982 <LCD_VoidRightShift+0x126>
	while(1){
		while(Local_RowPosition == Line_1)
		{
			LCD_VoidSendStringFromPos(Ref_string,0,0);
    287a:	8d a5       	ldd	r24, Y+45	; 0x2d
    287c:	9e a5       	ldd	r25, Y+46	; 0x2e
    287e:	60 e0       	ldi	r22, 0x00	; 0
    2880:	40 e0       	ldi	r20, 0x00	; 0
    2882:	0e 94 8d 12 	call	0x251a	; 0x251a <LCD_VoidSendStringFromPos>
			LCD_VoidSendCommand(LCD_DisplayShift);
    2886:	8c e1       	ldi	r24, 0x1C	; 28
    2888:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <LCD_VoidSendCommand>
    288c:	80 e0       	ldi	r24, 0x00	; 0
    288e:	90 e0       	ldi	r25, 0x00	; 0
    2890:	aa e7       	ldi	r26, 0x7A	; 122
    2892:	b3 e4       	ldi	r27, 0x43	; 67
    2894:	8f a3       	std	Y+39, r24	; 0x27
    2896:	98 a7       	std	Y+40, r25	; 0x28
    2898:	a9 a7       	std	Y+41, r26	; 0x29
    289a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    289c:	6f a1       	ldd	r22, Y+39	; 0x27
    289e:	78 a5       	ldd	r23, Y+40	; 0x28
    28a0:	89 a5       	ldd	r24, Y+41	; 0x29
    28a2:	9a a5       	ldd	r25, Y+42	; 0x2a
    28a4:	20 e0       	ldi	r18, 0x00	; 0
    28a6:	30 e0       	ldi	r19, 0x00	; 0
    28a8:	4a ef       	ldi	r20, 0xFA	; 250
    28aa:	54 e4       	ldi	r21, 0x44	; 68
    28ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28b0:	dc 01       	movw	r26, r24
    28b2:	cb 01       	movw	r24, r22
    28b4:	8b a3       	std	Y+35, r24	; 0x23
    28b6:	9c a3       	std	Y+36, r25	; 0x24
    28b8:	ad a3       	std	Y+37, r26	; 0x25
    28ba:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    28bc:	6b a1       	ldd	r22, Y+35	; 0x23
    28be:	7c a1       	ldd	r23, Y+36	; 0x24
    28c0:	8d a1       	ldd	r24, Y+37	; 0x25
    28c2:	9e a1       	ldd	r25, Y+38	; 0x26
    28c4:	20 e0       	ldi	r18, 0x00	; 0
    28c6:	30 e0       	ldi	r19, 0x00	; 0
    28c8:	40 e8       	ldi	r20, 0x80	; 128
    28ca:	5f e3       	ldi	r21, 0x3F	; 63
    28cc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28d0:	88 23       	and	r24, r24
    28d2:	2c f4       	brge	.+10     	; 0x28de <LCD_VoidRightShift+0x82>
		__ticks = 1;
    28d4:	81 e0       	ldi	r24, 0x01	; 1
    28d6:	90 e0       	ldi	r25, 0x00	; 0
    28d8:	9a a3       	std	Y+34, r25	; 0x22
    28da:	89 a3       	std	Y+33, r24	; 0x21
    28dc:	3f c0       	rjmp	.+126    	; 0x295c <LCD_VoidRightShift+0x100>
	else if (__tmp > 65535)
    28de:	6b a1       	ldd	r22, Y+35	; 0x23
    28e0:	7c a1       	ldd	r23, Y+36	; 0x24
    28e2:	8d a1       	ldd	r24, Y+37	; 0x25
    28e4:	9e a1       	ldd	r25, Y+38	; 0x26
    28e6:	20 e0       	ldi	r18, 0x00	; 0
    28e8:	3f ef       	ldi	r19, 0xFF	; 255
    28ea:	4f e7       	ldi	r20, 0x7F	; 127
    28ec:	57 e4       	ldi	r21, 0x47	; 71
    28ee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28f2:	18 16       	cp	r1, r24
    28f4:	4c f5       	brge	.+82     	; 0x2948 <LCD_VoidRightShift+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28f6:	6f a1       	ldd	r22, Y+39	; 0x27
    28f8:	78 a5       	ldd	r23, Y+40	; 0x28
    28fa:	89 a5       	ldd	r24, Y+41	; 0x29
    28fc:	9a a5       	ldd	r25, Y+42	; 0x2a
    28fe:	20 e0       	ldi	r18, 0x00	; 0
    2900:	30 e0       	ldi	r19, 0x00	; 0
    2902:	40 e2       	ldi	r20, 0x20	; 32
    2904:	51 e4       	ldi	r21, 0x41	; 65
    2906:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    290a:	dc 01       	movw	r26, r24
    290c:	cb 01       	movw	r24, r22
    290e:	bc 01       	movw	r22, r24
    2910:	cd 01       	movw	r24, r26
    2912:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2916:	dc 01       	movw	r26, r24
    2918:	cb 01       	movw	r24, r22
    291a:	9a a3       	std	Y+34, r25	; 0x22
    291c:	89 a3       	std	Y+33, r24	; 0x21
    291e:	0f c0       	rjmp	.+30     	; 0x293e <LCD_VoidRightShift+0xe2>
    2920:	88 ec       	ldi	r24, 0xC8	; 200
    2922:	90 e0       	ldi	r25, 0x00	; 0
    2924:	98 a3       	std	Y+32, r25	; 0x20
    2926:	8f 8f       	std	Y+31, r24	; 0x1f
    2928:	8f 8d       	ldd	r24, Y+31	; 0x1f
    292a:	98 a1       	ldd	r25, Y+32	; 0x20
    292c:	01 97       	sbiw	r24, 0x01	; 1
    292e:	f1 f7       	brne	.-4      	; 0x292c <LCD_VoidRightShift+0xd0>
    2930:	98 a3       	std	Y+32, r25	; 0x20
    2932:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2934:	89 a1       	ldd	r24, Y+33	; 0x21
    2936:	9a a1       	ldd	r25, Y+34	; 0x22
    2938:	01 97       	sbiw	r24, 0x01	; 1
    293a:	9a a3       	std	Y+34, r25	; 0x22
    293c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    293e:	89 a1       	ldd	r24, Y+33	; 0x21
    2940:	9a a1       	ldd	r25, Y+34	; 0x22
    2942:	00 97       	sbiw	r24, 0x00	; 0
    2944:	69 f7       	brne	.-38     	; 0x2920 <LCD_VoidRightShift+0xc4>
    2946:	14 c0       	rjmp	.+40     	; 0x2970 <LCD_VoidRightShift+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2948:	6b a1       	ldd	r22, Y+35	; 0x23
    294a:	7c a1       	ldd	r23, Y+36	; 0x24
    294c:	8d a1       	ldd	r24, Y+37	; 0x25
    294e:	9e a1       	ldd	r25, Y+38	; 0x26
    2950:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2954:	dc 01       	movw	r26, r24
    2956:	cb 01       	movw	r24, r22
    2958:	9a a3       	std	Y+34, r25	; 0x22
    295a:	89 a3       	std	Y+33, r24	; 0x21
    295c:	89 a1       	ldd	r24, Y+33	; 0x21
    295e:	9a a1       	ldd	r25, Y+34	; 0x22
    2960:	9e 8f       	std	Y+30, r25	; 0x1e
    2962:	8d 8f       	std	Y+29, r24	; 0x1d
    2964:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2966:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2968:	01 97       	sbiw	r24, 0x01	; 1
    296a:	f1 f7       	brne	.-4      	; 0x2968 <LCD_VoidRightShift+0x10c>
    296c:	9e 8f       	std	Y+30, r25	; 0x1e
    296e:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(DisplayShiftDelay);
			Local_ColPosition++;
    2970:	8b a5       	ldd	r24, Y+43	; 0x2b
    2972:	8f 5f       	subi	r24, 0xFF	; 255
    2974:	8b a7       	std	Y+43, r24	; 0x2b
			if (Local_ColPosition == Cols_Number)
    2976:	8b a5       	ldd	r24, Y+43	; 0x2b
    2978:	80 31       	cpi	r24, 0x10	; 16
    297a:	19 f4       	brne	.+6      	; 0x2982 <LCD_VoidRightShift+0x126>
			{
				Local_ColPosition = 0;
    297c:	1b a6       	std	Y+43, r1	; 0x2b
				Local_RowPosition = Line_2;
    297e:	81 e0       	ldi	r24, 0x01	; 1
    2980:	8c a7       	std	Y+44, r24	; 0x2c
void LCD_VoidRightShift (char *Ref_string)
{
	u8 Local_RowPosition = 0;
	u8 Local_ColPosition = 0;
	while(1){
		while(Local_RowPosition == Line_1)
    2982:	8c a5       	ldd	r24, Y+44	; 0x2c
    2984:	88 23       	and	r24, r24
    2986:	09 f4       	brne	.+2      	; 0x298a <LCD_VoidRightShift+0x12e>
    2988:	78 cf       	rjmp	.-272    	; 0x287a <LCD_VoidRightShift+0x1e>
			{
				Local_ColPosition = 0;
				Local_RowPosition = Line_2;
			}
		}
		LCD_VoidSendCommand(LCD_ClearDisplay);
    298a:	81 e0       	ldi	r24, 0x01	; 1
    298c:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <LCD_VoidSendCommand>
    2990:	80 e0       	ldi	r24, 0x00	; 0
    2992:	90 e0       	ldi	r25, 0x00	; 0
    2994:	a0 e0       	ldi	r26, 0x00	; 0
    2996:	b0 e4       	ldi	r27, 0x40	; 64
    2998:	89 8f       	std	Y+25, r24	; 0x19
    299a:	9a 8f       	std	Y+26, r25	; 0x1a
    299c:	ab 8f       	std	Y+27, r26	; 0x1b
    299e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29a0:	69 8d       	ldd	r22, Y+25	; 0x19
    29a2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29a4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29a6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29a8:	20 e0       	ldi	r18, 0x00	; 0
    29aa:	30 e0       	ldi	r19, 0x00	; 0
    29ac:	4a ef       	ldi	r20, 0xFA	; 250
    29ae:	54 e4       	ldi	r21, 0x44	; 68
    29b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29b4:	dc 01       	movw	r26, r24
    29b6:	cb 01       	movw	r24, r22
    29b8:	8d 8b       	std	Y+21, r24	; 0x15
    29ba:	9e 8b       	std	Y+22, r25	; 0x16
    29bc:	af 8b       	std	Y+23, r26	; 0x17
    29be:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    29c0:	6d 89       	ldd	r22, Y+21	; 0x15
    29c2:	7e 89       	ldd	r23, Y+22	; 0x16
    29c4:	8f 89       	ldd	r24, Y+23	; 0x17
    29c6:	98 8d       	ldd	r25, Y+24	; 0x18
    29c8:	20 e0       	ldi	r18, 0x00	; 0
    29ca:	30 e0       	ldi	r19, 0x00	; 0
    29cc:	40 e8       	ldi	r20, 0x80	; 128
    29ce:	5f e3       	ldi	r21, 0x3F	; 63
    29d0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29d4:	88 23       	and	r24, r24
    29d6:	2c f4       	brge	.+10     	; 0x29e2 <LCD_VoidRightShift+0x186>
		__ticks = 1;
    29d8:	81 e0       	ldi	r24, 0x01	; 1
    29da:	90 e0       	ldi	r25, 0x00	; 0
    29dc:	9c 8b       	std	Y+20, r25	; 0x14
    29de:	8b 8b       	std	Y+19, r24	; 0x13
    29e0:	3f c0       	rjmp	.+126    	; 0x2a60 <LCD_VoidRightShift+0x204>
	else if (__tmp > 65535)
    29e2:	6d 89       	ldd	r22, Y+21	; 0x15
    29e4:	7e 89       	ldd	r23, Y+22	; 0x16
    29e6:	8f 89       	ldd	r24, Y+23	; 0x17
    29e8:	98 8d       	ldd	r25, Y+24	; 0x18
    29ea:	20 e0       	ldi	r18, 0x00	; 0
    29ec:	3f ef       	ldi	r19, 0xFF	; 255
    29ee:	4f e7       	ldi	r20, 0x7F	; 127
    29f0:	57 e4       	ldi	r21, 0x47	; 71
    29f2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29f6:	18 16       	cp	r1, r24
    29f8:	4c f5       	brge	.+82     	; 0x2a4c <LCD_VoidRightShift+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29fa:	69 8d       	ldd	r22, Y+25	; 0x19
    29fc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a00:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a02:	20 e0       	ldi	r18, 0x00	; 0
    2a04:	30 e0       	ldi	r19, 0x00	; 0
    2a06:	40 e2       	ldi	r20, 0x20	; 32
    2a08:	51 e4       	ldi	r21, 0x41	; 65
    2a0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a0e:	dc 01       	movw	r26, r24
    2a10:	cb 01       	movw	r24, r22
    2a12:	bc 01       	movw	r22, r24
    2a14:	cd 01       	movw	r24, r26
    2a16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a1a:	dc 01       	movw	r26, r24
    2a1c:	cb 01       	movw	r24, r22
    2a1e:	9c 8b       	std	Y+20, r25	; 0x14
    2a20:	8b 8b       	std	Y+19, r24	; 0x13
    2a22:	0f c0       	rjmp	.+30     	; 0x2a42 <LCD_VoidRightShift+0x1e6>
    2a24:	88 ec       	ldi	r24, 0xC8	; 200
    2a26:	90 e0       	ldi	r25, 0x00	; 0
    2a28:	9a 8b       	std	Y+18, r25	; 0x12
    2a2a:	89 8b       	std	Y+17, r24	; 0x11
    2a2c:	89 89       	ldd	r24, Y+17	; 0x11
    2a2e:	9a 89       	ldd	r25, Y+18	; 0x12
    2a30:	01 97       	sbiw	r24, 0x01	; 1
    2a32:	f1 f7       	brne	.-4      	; 0x2a30 <LCD_VoidRightShift+0x1d4>
    2a34:	9a 8b       	std	Y+18, r25	; 0x12
    2a36:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a38:	8b 89       	ldd	r24, Y+19	; 0x13
    2a3a:	9c 89       	ldd	r25, Y+20	; 0x14
    2a3c:	01 97       	sbiw	r24, 0x01	; 1
    2a3e:	9c 8b       	std	Y+20, r25	; 0x14
    2a40:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a42:	8b 89       	ldd	r24, Y+19	; 0x13
    2a44:	9c 89       	ldd	r25, Y+20	; 0x14
    2a46:	00 97       	sbiw	r24, 0x00	; 0
    2a48:	69 f7       	brne	.-38     	; 0x2a24 <LCD_VoidRightShift+0x1c8>
    2a4a:	98 c0       	rjmp	.+304    	; 0x2b7c <LCD_VoidRightShift+0x320>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a4c:	6d 89       	ldd	r22, Y+21	; 0x15
    2a4e:	7e 89       	ldd	r23, Y+22	; 0x16
    2a50:	8f 89       	ldd	r24, Y+23	; 0x17
    2a52:	98 8d       	ldd	r25, Y+24	; 0x18
    2a54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a58:	dc 01       	movw	r26, r24
    2a5a:	cb 01       	movw	r24, r22
    2a5c:	9c 8b       	std	Y+20, r25	; 0x14
    2a5e:	8b 8b       	std	Y+19, r24	; 0x13
    2a60:	8b 89       	ldd	r24, Y+19	; 0x13
    2a62:	9c 89       	ldd	r25, Y+20	; 0x14
    2a64:	98 8b       	std	Y+16, r25	; 0x10
    2a66:	8f 87       	std	Y+15, r24	; 0x0f
    2a68:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a6a:	98 89       	ldd	r25, Y+16	; 0x10
    2a6c:	01 97       	sbiw	r24, 0x01	; 1
    2a6e:	f1 f7       	brne	.-4      	; 0x2a6c <LCD_VoidRightShift+0x210>
    2a70:	98 8b       	std	Y+16, r25	; 0x10
    2a72:	8f 87       	std	Y+15, r24	; 0x0f
    2a74:	83 c0       	rjmp	.+262    	; 0x2b7c <LCD_VoidRightShift+0x320>
		_delay_ms(2);
		while(Local_RowPosition == Line_2)
		{
			LCD_VoidSendStringFromPos(Ref_string,1,0);
    2a76:	8d a5       	ldd	r24, Y+45	; 0x2d
    2a78:	9e a5       	ldd	r25, Y+46	; 0x2e
    2a7a:	61 e0       	ldi	r22, 0x01	; 1
    2a7c:	40 e0       	ldi	r20, 0x00	; 0
    2a7e:	0e 94 8d 12 	call	0x251a	; 0x251a <LCD_VoidSendStringFromPos>
			LCD_VoidSendCommand(LCD_DisplayShift);
    2a82:	8c e1       	ldi	r24, 0x1C	; 28
    2a84:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <LCD_VoidSendCommand>
    2a88:	80 e0       	ldi	r24, 0x00	; 0
    2a8a:	90 e0       	ldi	r25, 0x00	; 0
    2a8c:	aa e7       	ldi	r26, 0x7A	; 122
    2a8e:	b3 e4       	ldi	r27, 0x43	; 67
    2a90:	8b 87       	std	Y+11, r24	; 0x0b
    2a92:	9c 87       	std	Y+12, r25	; 0x0c
    2a94:	ad 87       	std	Y+13, r26	; 0x0d
    2a96:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a98:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a9a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a9c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a9e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2aa0:	20 e0       	ldi	r18, 0x00	; 0
    2aa2:	30 e0       	ldi	r19, 0x00	; 0
    2aa4:	4a ef       	ldi	r20, 0xFA	; 250
    2aa6:	54 e4       	ldi	r21, 0x44	; 68
    2aa8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aac:	dc 01       	movw	r26, r24
    2aae:	cb 01       	movw	r24, r22
    2ab0:	8f 83       	std	Y+7, r24	; 0x07
    2ab2:	98 87       	std	Y+8, r25	; 0x08
    2ab4:	a9 87       	std	Y+9, r26	; 0x09
    2ab6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ab8:	6f 81       	ldd	r22, Y+7	; 0x07
    2aba:	78 85       	ldd	r23, Y+8	; 0x08
    2abc:	89 85       	ldd	r24, Y+9	; 0x09
    2abe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ac0:	20 e0       	ldi	r18, 0x00	; 0
    2ac2:	30 e0       	ldi	r19, 0x00	; 0
    2ac4:	40 e8       	ldi	r20, 0x80	; 128
    2ac6:	5f e3       	ldi	r21, 0x3F	; 63
    2ac8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2acc:	88 23       	and	r24, r24
    2ace:	2c f4       	brge	.+10     	; 0x2ada <LCD_VoidRightShift+0x27e>
		__ticks = 1;
    2ad0:	81 e0       	ldi	r24, 0x01	; 1
    2ad2:	90 e0       	ldi	r25, 0x00	; 0
    2ad4:	9e 83       	std	Y+6, r25	; 0x06
    2ad6:	8d 83       	std	Y+5, r24	; 0x05
    2ad8:	3f c0       	rjmp	.+126    	; 0x2b58 <LCD_VoidRightShift+0x2fc>
	else if (__tmp > 65535)
    2ada:	6f 81       	ldd	r22, Y+7	; 0x07
    2adc:	78 85       	ldd	r23, Y+8	; 0x08
    2ade:	89 85       	ldd	r24, Y+9	; 0x09
    2ae0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ae2:	20 e0       	ldi	r18, 0x00	; 0
    2ae4:	3f ef       	ldi	r19, 0xFF	; 255
    2ae6:	4f e7       	ldi	r20, 0x7F	; 127
    2ae8:	57 e4       	ldi	r21, 0x47	; 71
    2aea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2aee:	18 16       	cp	r1, r24
    2af0:	4c f5       	brge	.+82     	; 0x2b44 <LCD_VoidRightShift+0x2e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2af2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2af4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2af6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2af8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2afa:	20 e0       	ldi	r18, 0x00	; 0
    2afc:	30 e0       	ldi	r19, 0x00	; 0
    2afe:	40 e2       	ldi	r20, 0x20	; 32
    2b00:	51 e4       	ldi	r21, 0x41	; 65
    2b02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b06:	dc 01       	movw	r26, r24
    2b08:	cb 01       	movw	r24, r22
    2b0a:	bc 01       	movw	r22, r24
    2b0c:	cd 01       	movw	r24, r26
    2b0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b12:	dc 01       	movw	r26, r24
    2b14:	cb 01       	movw	r24, r22
    2b16:	9e 83       	std	Y+6, r25	; 0x06
    2b18:	8d 83       	std	Y+5, r24	; 0x05
    2b1a:	0f c0       	rjmp	.+30     	; 0x2b3a <LCD_VoidRightShift+0x2de>
    2b1c:	88 ec       	ldi	r24, 0xC8	; 200
    2b1e:	90 e0       	ldi	r25, 0x00	; 0
    2b20:	9c 83       	std	Y+4, r25	; 0x04
    2b22:	8b 83       	std	Y+3, r24	; 0x03
    2b24:	8b 81       	ldd	r24, Y+3	; 0x03
    2b26:	9c 81       	ldd	r25, Y+4	; 0x04
    2b28:	01 97       	sbiw	r24, 0x01	; 1
    2b2a:	f1 f7       	brne	.-4      	; 0x2b28 <LCD_VoidRightShift+0x2cc>
    2b2c:	9c 83       	std	Y+4, r25	; 0x04
    2b2e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b30:	8d 81       	ldd	r24, Y+5	; 0x05
    2b32:	9e 81       	ldd	r25, Y+6	; 0x06
    2b34:	01 97       	sbiw	r24, 0x01	; 1
    2b36:	9e 83       	std	Y+6, r25	; 0x06
    2b38:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b3a:	8d 81       	ldd	r24, Y+5	; 0x05
    2b3c:	9e 81       	ldd	r25, Y+6	; 0x06
    2b3e:	00 97       	sbiw	r24, 0x00	; 0
    2b40:	69 f7       	brne	.-38     	; 0x2b1c <LCD_VoidRightShift+0x2c0>
    2b42:	14 c0       	rjmp	.+40     	; 0x2b6c <LCD_VoidRightShift+0x310>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b44:	6f 81       	ldd	r22, Y+7	; 0x07
    2b46:	78 85       	ldd	r23, Y+8	; 0x08
    2b48:	89 85       	ldd	r24, Y+9	; 0x09
    2b4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b50:	dc 01       	movw	r26, r24
    2b52:	cb 01       	movw	r24, r22
    2b54:	9e 83       	std	Y+6, r25	; 0x06
    2b56:	8d 83       	std	Y+5, r24	; 0x05
    2b58:	8d 81       	ldd	r24, Y+5	; 0x05
    2b5a:	9e 81       	ldd	r25, Y+6	; 0x06
    2b5c:	9a 83       	std	Y+2, r25	; 0x02
    2b5e:	89 83       	std	Y+1, r24	; 0x01
    2b60:	89 81       	ldd	r24, Y+1	; 0x01
    2b62:	9a 81       	ldd	r25, Y+2	; 0x02
    2b64:	01 97       	sbiw	r24, 0x01	; 1
    2b66:	f1 f7       	brne	.-4      	; 0x2b64 <LCD_VoidRightShift+0x308>
    2b68:	9a 83       	std	Y+2, r25	; 0x02
    2b6a:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(DisplayShiftDelay);
			Local_ColPosition++;
    2b6c:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b6e:	8f 5f       	subi	r24, 0xFF	; 255
    2b70:	8b a7       	std	Y+43, r24	; 0x2b
			if (Local_ColPosition == Cols_Number)
    2b72:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b74:	80 31       	cpi	r24, 0x10	; 16
    2b76:	11 f4       	brne	.+4      	; 0x2b7c <LCD_VoidRightShift+0x320>
			{
				Local_ColPosition = 0;
    2b78:	1b a6       	std	Y+43, r1	; 0x2b
				Local_RowPosition = Line_1;
    2b7a:	1c a6       	std	Y+44, r1	; 0x2c
				Local_RowPosition = Line_2;
			}
		}
		LCD_VoidSendCommand(LCD_ClearDisplay);
		_delay_ms(2);
		while(Local_RowPosition == Line_2)
    2b7c:	8c a5       	ldd	r24, Y+44	; 0x2c
    2b7e:	81 30       	cpi	r24, 0x01	; 1
    2b80:	09 f4       	brne	.+2      	; 0x2b84 <LCD_VoidRightShift+0x328>
    2b82:	79 cf       	rjmp	.-270    	; 0x2a76 <LCD_VoidRightShift+0x21a>
    2b84:	fe ce       	rjmp	.-516    	; 0x2982 <LCD_VoidRightShift+0x126>

00002b86 <DCM_VoidInitSingleControl>:

#include "../Header/DCM_Config.h"
#include "../Header/DCM_Interface.h"

void DCM_VoidInitSingleControl (u8 Local_State)
{
    2b86:	df 93       	push	r29
    2b88:	cf 93       	push	r28
    2b8a:	0f 92       	push	r0
    2b8c:	cd b7       	in	r28, 0x3d	; 61
    2b8e:	de b7       	in	r29, 0x3e	; 62
    2b90:	89 83       	std	Y+1, r24	; 0x01
	DIO_VoidSetPinDir(DCM_BridgeGroup,DCM_SingleControlPin,Output);
    2b92:	82 e0       	ldi	r24, 0x02	; 2
    2b94:	61 e0       	ldi	r22, 0x01	; 1
    2b96:	41 e0       	ldi	r20, 0x01	; 1
    2b98:	0e 94 c1 07 	call	0xf82	; 0xf82 <DIO_VoidSetPinDir>

	if (Local_State == DCM_Start)
    2b9c:	89 81       	ldd	r24, Y+1	; 0x01
    2b9e:	81 30       	cpi	r24, 0x01	; 1
    2ba0:	31 f4       	brne	.+12     	; 0x2bae <DCM_VoidInitSingleControl+0x28>
	{
		DIO_VoidSetPinValue(DCM_BridgeGroup,DCM_SingleControlPin,High);
    2ba2:	82 e0       	ldi	r24, 0x02	; 2
    2ba4:	61 e0       	ldi	r22, 0x01	; 1
    2ba6:	41 e0       	ldi	r20, 0x01	; 1
    2ba8:	0e 94 cb 08 	call	0x1196	; 0x1196 <DIO_VoidSetPinValue>
    2bac:	08 c0       	rjmp	.+16     	; 0x2bbe <DCM_VoidInitSingleControl+0x38>
	}
	else if (Local_State == DCM_Stop)
    2bae:	89 81       	ldd	r24, Y+1	; 0x01
    2bb0:	88 23       	and	r24, r24
    2bb2:	29 f4       	brne	.+10     	; 0x2bbe <DCM_VoidInitSingleControl+0x38>
	{
		DIO_VoidSetPinValue(DCM_BridgeGroup,DCM_SingleControlPin,Low);
    2bb4:	82 e0       	ldi	r24, 0x02	; 2
    2bb6:	61 e0       	ldi	r22, 0x01	; 1
    2bb8:	40 e0       	ldi	r20, 0x00	; 0
    2bba:	0e 94 cb 08 	call	0x1196	; 0x1196 <DIO_VoidSetPinValue>
	}
}
    2bbe:	0f 90       	pop	r0
    2bc0:	cf 91       	pop	r28
    2bc2:	df 91       	pop	r29
    2bc4:	08 95       	ret

00002bc6 <DCM_VoidInitHBridge>:
void DCM_VoidInitHBridge (void)
{
    2bc6:	df 93       	push	r29
    2bc8:	cf 93       	push	r28
    2bca:	cd b7       	in	r28, 0x3d	; 61
    2bcc:	de b7       	in	r29, 0x3e	; 62
	DIO_VoidSetPinDir(DCM_BridgeGroup,DCM_Tran1,Output);
    2bce:	82 e0       	ldi	r24, 0x02	; 2
    2bd0:	63 e0       	ldi	r22, 0x03	; 3
    2bd2:	41 e0       	ldi	r20, 0x01	; 1
    2bd4:	0e 94 c1 07 	call	0xf82	; 0xf82 <DIO_VoidSetPinDir>
	DIO_VoidSetPinDir(DCM_BridgeGroup,DCM_Tran2,Output);
    2bd8:	82 e0       	ldi	r24, 0x02	; 2
    2bda:	64 e0       	ldi	r22, 0x04	; 4
    2bdc:	41 e0       	ldi	r20, 0x01	; 1
    2bde:	0e 94 c1 07 	call	0xf82	; 0xf82 <DIO_VoidSetPinDir>
	DIO_VoidSetPinDir(DCM_BridgeGroup,DCM_Tran3,Output);
    2be2:	82 e0       	ldi	r24, 0x02	; 2
    2be4:	65 e0       	ldi	r22, 0x05	; 5
    2be6:	41 e0       	ldi	r20, 0x01	; 1
    2be8:	0e 94 c1 07 	call	0xf82	; 0xf82 <DIO_VoidSetPinDir>
	DIO_VoidSetPinDir(DCM_BridgeGroup,DCM_Tran4,Output);
    2bec:	82 e0       	ldi	r24, 0x02	; 2
    2bee:	66 e0       	ldi	r22, 0x06	; 6
    2bf0:	41 e0       	ldi	r20, 0x01	; 1
    2bf2:	0e 94 c1 07 	call	0xf82	; 0xf82 <DIO_VoidSetPinDir>
}
    2bf6:	cf 91       	pop	r28
    2bf8:	df 91       	pop	r29
    2bfa:	08 95       	ret

00002bfc <DCM_VoidRotateCW>:
void DCM_VoidRotateCW (void)
{
    2bfc:	df 93       	push	r29
    2bfe:	cf 93       	push	r28
    2c00:	cd b7       	in	r28, 0x3d	; 61
    2c02:	de b7       	in	r29, 0x3e	; 62
	DIO_VoidSetPinValue(DCM_BridgeGroup,DCM_Tran1,Low);
    2c04:	82 e0       	ldi	r24, 0x02	; 2
    2c06:	63 e0       	ldi	r22, 0x03	; 3
    2c08:	40 e0       	ldi	r20, 0x00	; 0
    2c0a:	0e 94 cb 08 	call	0x1196	; 0x1196 <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(DCM_BridgeGroup,DCM_Tran4,Low);
    2c0e:	82 e0       	ldi	r24, 0x02	; 2
    2c10:	66 e0       	ldi	r22, 0x06	; 6
    2c12:	40 e0       	ldi	r20, 0x00	; 0
    2c14:	0e 94 cb 08 	call	0x1196	; 0x1196 <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(DCM_BridgeGroup,DCM_Tran2,High);
    2c18:	82 e0       	ldi	r24, 0x02	; 2
    2c1a:	64 e0       	ldi	r22, 0x04	; 4
    2c1c:	41 e0       	ldi	r20, 0x01	; 1
    2c1e:	0e 94 cb 08 	call	0x1196	; 0x1196 <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(DCM_BridgeGroup,DCM_Tran3,High);
    2c22:	82 e0       	ldi	r24, 0x02	; 2
    2c24:	65 e0       	ldi	r22, 0x05	; 5
    2c26:	41 e0       	ldi	r20, 0x01	; 1
    2c28:	0e 94 cb 08 	call	0x1196	; 0x1196 <DIO_VoidSetPinValue>
}
    2c2c:	cf 91       	pop	r28
    2c2e:	df 91       	pop	r29
    2c30:	08 95       	ret

00002c32 <DCM_VoidRotateCCW>:
void DCM_VoidRotateCCW (void)
{
    2c32:	df 93       	push	r29
    2c34:	cf 93       	push	r28
    2c36:	cd b7       	in	r28, 0x3d	; 61
    2c38:	de b7       	in	r29, 0x3e	; 62
	DIO_VoidSetPinValue(DCM_BridgeGroup,DCM_Tran2,Low);
    2c3a:	82 e0       	ldi	r24, 0x02	; 2
    2c3c:	64 e0       	ldi	r22, 0x04	; 4
    2c3e:	40 e0       	ldi	r20, 0x00	; 0
    2c40:	0e 94 cb 08 	call	0x1196	; 0x1196 <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(DCM_BridgeGroup,DCM_Tran3,Low);
    2c44:	82 e0       	ldi	r24, 0x02	; 2
    2c46:	65 e0       	ldi	r22, 0x05	; 5
    2c48:	40 e0       	ldi	r20, 0x00	; 0
    2c4a:	0e 94 cb 08 	call	0x1196	; 0x1196 <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(DCM_BridgeGroup,DCM_Tran1,High);
    2c4e:	82 e0       	ldi	r24, 0x02	; 2
    2c50:	63 e0       	ldi	r22, 0x03	; 3
    2c52:	41 e0       	ldi	r20, 0x01	; 1
    2c54:	0e 94 cb 08 	call	0x1196	; 0x1196 <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(DCM_BridgeGroup,DCM_Tran4,High);
    2c58:	82 e0       	ldi	r24, 0x02	; 2
    2c5a:	66 e0       	ldi	r22, 0x06	; 6
    2c5c:	41 e0       	ldi	r20, 0x01	; 1
    2c5e:	0e 94 cb 08 	call	0x1196	; 0x1196 <DIO_VoidSetPinValue>
}
    2c62:	cf 91       	pop	r28
    2c64:	df 91       	pop	r29
    2c66:	08 95       	ret

00002c68 <DCM_VoidStop>:
void DCM_VoidStop (void)
{
    2c68:	df 93       	push	r29
    2c6a:	cf 93       	push	r28
    2c6c:	cd b7       	in	r28, 0x3d	; 61
    2c6e:	de b7       	in	r29, 0x3e	; 62
	DIO_VoidSetPinValue(DCM_BridgeGroup,DCM_Tran1,Low);
    2c70:	82 e0       	ldi	r24, 0x02	; 2
    2c72:	63 e0       	ldi	r22, 0x03	; 3
    2c74:	40 e0       	ldi	r20, 0x00	; 0
    2c76:	0e 94 cb 08 	call	0x1196	; 0x1196 <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(DCM_BridgeGroup,DCM_Tran2,Low);
    2c7a:	82 e0       	ldi	r24, 0x02	; 2
    2c7c:	64 e0       	ldi	r22, 0x04	; 4
    2c7e:	40 e0       	ldi	r20, 0x00	; 0
    2c80:	0e 94 cb 08 	call	0x1196	; 0x1196 <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(DCM_BridgeGroup,DCM_Tran3,Low);
    2c84:	82 e0       	ldi	r24, 0x02	; 2
    2c86:	65 e0       	ldi	r22, 0x05	; 5
    2c88:	40 e0       	ldi	r20, 0x00	; 0
    2c8a:	0e 94 cb 08 	call	0x1196	; 0x1196 <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(DCM_BridgeGroup,DCM_Tran4,Low);
    2c8e:	82 e0       	ldi	r24, 0x02	; 2
    2c90:	66 e0       	ldi	r22, 0x06	; 6
    2c92:	40 e0       	ldi	r20, 0x00	; 0
    2c94:	0e 94 cb 08 	call	0x1196	; 0x1196 <DIO_VoidSetPinValue>
}
    2c98:	cf 91       	pop	r28
    2c9a:	df 91       	pop	r29
    2c9c:	08 95       	ret

00002c9e <main>:

volatile u8 seconds = 0;
void TimerFun (void);

void main (void)
{
    2c9e:	0f 93       	push	r16
    2ca0:	1f 93       	push	r17
    2ca2:	df 93       	push	r29
    2ca4:	cf 93       	push	r28
    2ca6:	cd b7       	in	r28, 0x3d	; 61
    2ca8:	de b7       	in	r29, 0x3e	; 62
    2caa:	c7 57       	subi	r28, 0x77	; 119
    2cac:	d0 40       	sbci	r29, 0x00	; 0
    2cae:	0f b6       	in	r0, 0x3f	; 63
    2cb0:	f8 94       	cli
    2cb2:	de bf       	out	0x3e, r29	; 62
    2cb4:	0f be       	out	0x3f, r0	; 63
    2cb6:	cd bf       	out	0x3d, r28	; 61
	LCD_Void8BitInit();
    2cb8:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <LCD_Void8BitInit>
	LED_VoidInit();
    2cbc:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <LED_VoidInit>
	Timer0_CallBackFunctionNormal(TimerFun);
    2cc0:	87 eb       	ldi	r24, 0xB7	; 183
    2cc2:	9b e1       	ldi	r25, 0x1B	; 27
    2cc4:	0e 94 27 07 	call	0xe4e	; 0xe4e <Timer0_CallBackFunctionNormal>

	u8 minuts = 29;
    2cc8:	fe 01       	movw	r30, r28
    2cca:	e9 58       	subi	r30, 0x89	; 137
    2ccc:	ff 4f       	sbci	r31, 0xFF	; 255
    2cce:	8d e1       	ldi	r24, 0x1D	; 29
    2cd0:	80 83       	st	Z, r24
	u8 hours = 2;
    2cd2:	fe 01       	movw	r30, r28
    2cd4:	ea 58       	subi	r30, 0x8A	; 138
    2cd6:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd8:	82 e0       	ldi	r24, 0x02	; 2
    2cda:	80 83       	st	Z, r24
	u8 Temperature;
	u32 LDR_Value;

	ADC_VoidInitPolling();
    2cdc:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <ADC_VoidInitPolling>

	Timer0_VoidInitNormal(123);
    2ce0:	8b e7       	ldi	r24, 0x7B	; 123
    2ce2:	0e 94 9b 06 	call	0xd36	; 0xd36 <Timer0_VoidInitNormal>
	GIE_VoidEnable();
    2ce6:	0e 94 a5 07 	call	0xf4a	; 0xf4a <GIE_VoidEnable>

	while (1)
	{
		/*Clock*/
		if (seconds == 60)
    2cea:	80 91 86 00 	lds	r24, 0x0086
    2cee:	8c 33       	cpi	r24, 0x3C	; 60
    2cf0:	09 f0       	breq	.+2      	; 0x2cf4 <main+0x56>
    2cf2:	95 c1       	rjmp	.+810    	; 0x301e <main+0x380>
		{
			LCD_VoidSendCommand(LCD_ClearDisplay);
    2cf4:	81 e0       	ldi	r24, 0x01	; 1
    2cf6:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <LCD_VoidSendCommand>
    2cfa:	fe 01       	movw	r30, r28
    2cfc:	e3 59       	subi	r30, 0x93	; 147
    2cfe:	ff 4f       	sbci	r31, 0xFF	; 255
    2d00:	80 e0       	ldi	r24, 0x00	; 0
    2d02:	90 e0       	ldi	r25, 0x00	; 0
    2d04:	a0 e0       	ldi	r26, 0x00	; 0
    2d06:	b0 e4       	ldi	r27, 0x40	; 64
    2d08:	80 83       	st	Z, r24
    2d0a:	91 83       	std	Z+1, r25	; 0x01
    2d0c:	a2 83       	std	Z+2, r26	; 0x02
    2d0e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d10:	8e 01       	movw	r16, r28
    2d12:	07 59       	subi	r16, 0x97	; 151
    2d14:	1f 4f       	sbci	r17, 0xFF	; 255
    2d16:	fe 01       	movw	r30, r28
    2d18:	e3 59       	subi	r30, 0x93	; 147
    2d1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d1c:	60 81       	ld	r22, Z
    2d1e:	71 81       	ldd	r23, Z+1	; 0x01
    2d20:	82 81       	ldd	r24, Z+2	; 0x02
    2d22:	93 81       	ldd	r25, Z+3	; 0x03
    2d24:	20 e0       	ldi	r18, 0x00	; 0
    2d26:	30 e0       	ldi	r19, 0x00	; 0
    2d28:	4a ef       	ldi	r20, 0xFA	; 250
    2d2a:	54 e4       	ldi	r21, 0x44	; 68
    2d2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d30:	dc 01       	movw	r26, r24
    2d32:	cb 01       	movw	r24, r22
    2d34:	f8 01       	movw	r30, r16
    2d36:	80 83       	st	Z, r24
    2d38:	91 83       	std	Z+1, r25	; 0x01
    2d3a:	a2 83       	std	Z+2, r26	; 0x02
    2d3c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2d3e:	fe 01       	movw	r30, r28
    2d40:	e7 59       	subi	r30, 0x97	; 151
    2d42:	ff 4f       	sbci	r31, 0xFF	; 255
    2d44:	60 81       	ld	r22, Z
    2d46:	71 81       	ldd	r23, Z+1	; 0x01
    2d48:	82 81       	ldd	r24, Z+2	; 0x02
    2d4a:	93 81       	ldd	r25, Z+3	; 0x03
    2d4c:	20 e0       	ldi	r18, 0x00	; 0
    2d4e:	30 e0       	ldi	r19, 0x00	; 0
    2d50:	40 e8       	ldi	r20, 0x80	; 128
    2d52:	5f e3       	ldi	r21, 0x3F	; 63
    2d54:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d58:	88 23       	and	r24, r24
    2d5a:	44 f4       	brge	.+16     	; 0x2d6c <main+0xce>
		__ticks = 1;
    2d5c:	fe 01       	movw	r30, r28
    2d5e:	e9 59       	subi	r30, 0x99	; 153
    2d60:	ff 4f       	sbci	r31, 0xFF	; 255
    2d62:	81 e0       	ldi	r24, 0x01	; 1
    2d64:	90 e0       	ldi	r25, 0x00	; 0
    2d66:	91 83       	std	Z+1, r25	; 0x01
    2d68:	80 83       	st	Z, r24
    2d6a:	64 c0       	rjmp	.+200    	; 0x2e34 <main+0x196>
	else if (__tmp > 65535)
    2d6c:	fe 01       	movw	r30, r28
    2d6e:	e7 59       	subi	r30, 0x97	; 151
    2d70:	ff 4f       	sbci	r31, 0xFF	; 255
    2d72:	60 81       	ld	r22, Z
    2d74:	71 81       	ldd	r23, Z+1	; 0x01
    2d76:	82 81       	ldd	r24, Z+2	; 0x02
    2d78:	93 81       	ldd	r25, Z+3	; 0x03
    2d7a:	20 e0       	ldi	r18, 0x00	; 0
    2d7c:	3f ef       	ldi	r19, 0xFF	; 255
    2d7e:	4f e7       	ldi	r20, 0x7F	; 127
    2d80:	57 e4       	ldi	r21, 0x47	; 71
    2d82:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d86:	18 16       	cp	r1, r24
    2d88:	0c f0       	brlt	.+2      	; 0x2d8c <main+0xee>
    2d8a:	43 c0       	rjmp	.+134    	; 0x2e12 <main+0x174>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d8c:	fe 01       	movw	r30, r28
    2d8e:	e3 59       	subi	r30, 0x93	; 147
    2d90:	ff 4f       	sbci	r31, 0xFF	; 255
    2d92:	60 81       	ld	r22, Z
    2d94:	71 81       	ldd	r23, Z+1	; 0x01
    2d96:	82 81       	ldd	r24, Z+2	; 0x02
    2d98:	93 81       	ldd	r25, Z+3	; 0x03
    2d9a:	20 e0       	ldi	r18, 0x00	; 0
    2d9c:	30 e0       	ldi	r19, 0x00	; 0
    2d9e:	40 e2       	ldi	r20, 0x20	; 32
    2da0:	51 e4       	ldi	r21, 0x41	; 65
    2da2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2da6:	dc 01       	movw	r26, r24
    2da8:	cb 01       	movw	r24, r22
    2daa:	8e 01       	movw	r16, r28
    2dac:	09 59       	subi	r16, 0x99	; 153
    2dae:	1f 4f       	sbci	r17, 0xFF	; 255
    2db0:	bc 01       	movw	r22, r24
    2db2:	cd 01       	movw	r24, r26
    2db4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2db8:	dc 01       	movw	r26, r24
    2dba:	cb 01       	movw	r24, r22
    2dbc:	f8 01       	movw	r30, r16
    2dbe:	91 83       	std	Z+1, r25	; 0x01
    2dc0:	80 83       	st	Z, r24
    2dc2:	1f c0       	rjmp	.+62     	; 0x2e02 <main+0x164>
    2dc4:	fe 01       	movw	r30, r28
    2dc6:	eb 59       	subi	r30, 0x9B	; 155
    2dc8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dca:	88 ec       	ldi	r24, 0xC8	; 200
    2dcc:	90 e0       	ldi	r25, 0x00	; 0
    2dce:	91 83       	std	Z+1, r25	; 0x01
    2dd0:	80 83       	st	Z, r24
    2dd2:	fe 01       	movw	r30, r28
    2dd4:	eb 59       	subi	r30, 0x9B	; 155
    2dd6:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd8:	80 81       	ld	r24, Z
    2dda:	91 81       	ldd	r25, Z+1	; 0x01
    2ddc:	01 97       	sbiw	r24, 0x01	; 1
    2dde:	f1 f7       	brne	.-4      	; 0x2ddc <main+0x13e>
    2de0:	fe 01       	movw	r30, r28
    2de2:	eb 59       	subi	r30, 0x9B	; 155
    2de4:	ff 4f       	sbci	r31, 0xFF	; 255
    2de6:	91 83       	std	Z+1, r25	; 0x01
    2de8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dea:	de 01       	movw	r26, r28
    2dec:	a9 59       	subi	r26, 0x99	; 153
    2dee:	bf 4f       	sbci	r27, 0xFF	; 255
    2df0:	fe 01       	movw	r30, r28
    2df2:	e9 59       	subi	r30, 0x99	; 153
    2df4:	ff 4f       	sbci	r31, 0xFF	; 255
    2df6:	80 81       	ld	r24, Z
    2df8:	91 81       	ldd	r25, Z+1	; 0x01
    2dfa:	01 97       	sbiw	r24, 0x01	; 1
    2dfc:	11 96       	adiw	r26, 0x01	; 1
    2dfe:	9c 93       	st	X, r25
    2e00:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e02:	fe 01       	movw	r30, r28
    2e04:	e9 59       	subi	r30, 0x99	; 153
    2e06:	ff 4f       	sbci	r31, 0xFF	; 255
    2e08:	80 81       	ld	r24, Z
    2e0a:	91 81       	ldd	r25, Z+1	; 0x01
    2e0c:	00 97       	sbiw	r24, 0x00	; 0
    2e0e:	d1 f6       	brne	.-76     	; 0x2dc4 <main+0x126>
    2e10:	27 c0       	rjmp	.+78     	; 0x2e60 <main+0x1c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e12:	8e 01       	movw	r16, r28
    2e14:	09 59       	subi	r16, 0x99	; 153
    2e16:	1f 4f       	sbci	r17, 0xFF	; 255
    2e18:	fe 01       	movw	r30, r28
    2e1a:	e7 59       	subi	r30, 0x97	; 151
    2e1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e1e:	60 81       	ld	r22, Z
    2e20:	71 81       	ldd	r23, Z+1	; 0x01
    2e22:	82 81       	ldd	r24, Z+2	; 0x02
    2e24:	93 81       	ldd	r25, Z+3	; 0x03
    2e26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e2a:	dc 01       	movw	r26, r24
    2e2c:	cb 01       	movw	r24, r22
    2e2e:	f8 01       	movw	r30, r16
    2e30:	91 83       	std	Z+1, r25	; 0x01
    2e32:	80 83       	st	Z, r24
    2e34:	de 01       	movw	r26, r28
    2e36:	ad 59       	subi	r26, 0x9D	; 157
    2e38:	bf 4f       	sbci	r27, 0xFF	; 255
    2e3a:	fe 01       	movw	r30, r28
    2e3c:	e9 59       	subi	r30, 0x99	; 153
    2e3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e40:	80 81       	ld	r24, Z
    2e42:	91 81       	ldd	r25, Z+1	; 0x01
    2e44:	8d 93       	st	X+, r24
    2e46:	9c 93       	st	X, r25
    2e48:	fe 01       	movw	r30, r28
    2e4a:	ed 59       	subi	r30, 0x9D	; 157
    2e4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e4e:	80 81       	ld	r24, Z
    2e50:	91 81       	ldd	r25, Z+1	; 0x01
    2e52:	01 97       	sbiw	r24, 0x01	; 1
    2e54:	f1 f7       	brne	.-4      	; 0x2e52 <main+0x1b4>
    2e56:	fe 01       	movw	r30, r28
    2e58:	ed 59       	subi	r30, 0x9D	; 157
    2e5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e5c:	91 83       	std	Z+1, r25	; 0x01
    2e5e:	80 83       	st	Z, r24
			_delay_ms(2);
			seconds = 0;
    2e60:	10 92 86 00 	sts	0x0086, r1
			minuts++;
    2e64:	de 01       	movw	r26, r28
    2e66:	a9 58       	subi	r26, 0x89	; 137
    2e68:	bf 4f       	sbci	r27, 0xFF	; 255
    2e6a:	fe 01       	movw	r30, r28
    2e6c:	e9 58       	subi	r30, 0x89	; 137
    2e6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e70:	80 81       	ld	r24, Z
    2e72:	8f 5f       	subi	r24, 0xFF	; 255
    2e74:	8c 93       	st	X, r24
			if (minuts == 60)
    2e76:	fe 01       	movw	r30, r28
    2e78:	e9 58       	subi	r30, 0x89	; 137
    2e7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e7c:	80 81       	ld	r24, Z
    2e7e:	8c 33       	cpi	r24, 0x3C	; 60
    2e80:	09 f0       	breq	.+2      	; 0x2e84 <main+0x1e6>
    2e82:	cd c0       	rjmp	.+410    	; 0x301e <main+0x380>
			{
				LCD_VoidSendCommand(LCD_ClearDisplay);
    2e84:	81 e0       	ldi	r24, 0x01	; 1
    2e86:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <LCD_VoidSendCommand>
    2e8a:	fe 01       	movw	r30, r28
    2e8c:	e1 5a       	subi	r30, 0xA1	; 161
    2e8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e90:	80 e0       	ldi	r24, 0x00	; 0
    2e92:	90 e0       	ldi	r25, 0x00	; 0
    2e94:	a0 e0       	ldi	r26, 0x00	; 0
    2e96:	b0 e4       	ldi	r27, 0x40	; 64
    2e98:	80 83       	st	Z, r24
    2e9a:	91 83       	std	Z+1, r25	; 0x01
    2e9c:	a2 83       	std	Z+2, r26	; 0x02
    2e9e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ea0:	8e 01       	movw	r16, r28
    2ea2:	05 5a       	subi	r16, 0xA5	; 165
    2ea4:	1f 4f       	sbci	r17, 0xFF	; 255
    2ea6:	fe 01       	movw	r30, r28
    2ea8:	e1 5a       	subi	r30, 0xA1	; 161
    2eaa:	ff 4f       	sbci	r31, 0xFF	; 255
    2eac:	60 81       	ld	r22, Z
    2eae:	71 81       	ldd	r23, Z+1	; 0x01
    2eb0:	82 81       	ldd	r24, Z+2	; 0x02
    2eb2:	93 81       	ldd	r25, Z+3	; 0x03
    2eb4:	20 e0       	ldi	r18, 0x00	; 0
    2eb6:	30 e0       	ldi	r19, 0x00	; 0
    2eb8:	4a ef       	ldi	r20, 0xFA	; 250
    2eba:	54 e4       	ldi	r21, 0x44	; 68
    2ebc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ec0:	dc 01       	movw	r26, r24
    2ec2:	cb 01       	movw	r24, r22
    2ec4:	f8 01       	movw	r30, r16
    2ec6:	80 83       	st	Z, r24
    2ec8:	91 83       	std	Z+1, r25	; 0x01
    2eca:	a2 83       	std	Z+2, r26	; 0x02
    2ecc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2ece:	fe 01       	movw	r30, r28
    2ed0:	e5 5a       	subi	r30, 0xA5	; 165
    2ed2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed4:	60 81       	ld	r22, Z
    2ed6:	71 81       	ldd	r23, Z+1	; 0x01
    2ed8:	82 81       	ldd	r24, Z+2	; 0x02
    2eda:	93 81       	ldd	r25, Z+3	; 0x03
    2edc:	20 e0       	ldi	r18, 0x00	; 0
    2ede:	30 e0       	ldi	r19, 0x00	; 0
    2ee0:	40 e8       	ldi	r20, 0x80	; 128
    2ee2:	5f e3       	ldi	r21, 0x3F	; 63
    2ee4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ee8:	88 23       	and	r24, r24
    2eea:	44 f4       	brge	.+16     	; 0x2efc <main+0x25e>
		__ticks = 1;
    2eec:	fe 01       	movw	r30, r28
    2eee:	e7 5a       	subi	r30, 0xA7	; 167
    2ef0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ef2:	81 e0       	ldi	r24, 0x01	; 1
    2ef4:	90 e0       	ldi	r25, 0x00	; 0
    2ef6:	91 83       	std	Z+1, r25	; 0x01
    2ef8:	80 83       	st	Z, r24
    2efa:	64 c0       	rjmp	.+200    	; 0x2fc4 <main+0x326>
	else if (__tmp > 65535)
    2efc:	fe 01       	movw	r30, r28
    2efe:	e5 5a       	subi	r30, 0xA5	; 165
    2f00:	ff 4f       	sbci	r31, 0xFF	; 255
    2f02:	60 81       	ld	r22, Z
    2f04:	71 81       	ldd	r23, Z+1	; 0x01
    2f06:	82 81       	ldd	r24, Z+2	; 0x02
    2f08:	93 81       	ldd	r25, Z+3	; 0x03
    2f0a:	20 e0       	ldi	r18, 0x00	; 0
    2f0c:	3f ef       	ldi	r19, 0xFF	; 255
    2f0e:	4f e7       	ldi	r20, 0x7F	; 127
    2f10:	57 e4       	ldi	r21, 0x47	; 71
    2f12:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f16:	18 16       	cp	r1, r24
    2f18:	0c f0       	brlt	.+2      	; 0x2f1c <main+0x27e>
    2f1a:	43 c0       	rjmp	.+134    	; 0x2fa2 <main+0x304>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f1c:	fe 01       	movw	r30, r28
    2f1e:	e1 5a       	subi	r30, 0xA1	; 161
    2f20:	ff 4f       	sbci	r31, 0xFF	; 255
    2f22:	60 81       	ld	r22, Z
    2f24:	71 81       	ldd	r23, Z+1	; 0x01
    2f26:	82 81       	ldd	r24, Z+2	; 0x02
    2f28:	93 81       	ldd	r25, Z+3	; 0x03
    2f2a:	20 e0       	ldi	r18, 0x00	; 0
    2f2c:	30 e0       	ldi	r19, 0x00	; 0
    2f2e:	40 e2       	ldi	r20, 0x20	; 32
    2f30:	51 e4       	ldi	r21, 0x41	; 65
    2f32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f36:	dc 01       	movw	r26, r24
    2f38:	cb 01       	movw	r24, r22
    2f3a:	8e 01       	movw	r16, r28
    2f3c:	07 5a       	subi	r16, 0xA7	; 167
    2f3e:	1f 4f       	sbci	r17, 0xFF	; 255
    2f40:	bc 01       	movw	r22, r24
    2f42:	cd 01       	movw	r24, r26
    2f44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f48:	dc 01       	movw	r26, r24
    2f4a:	cb 01       	movw	r24, r22
    2f4c:	f8 01       	movw	r30, r16
    2f4e:	91 83       	std	Z+1, r25	; 0x01
    2f50:	80 83       	st	Z, r24
    2f52:	1f c0       	rjmp	.+62     	; 0x2f92 <main+0x2f4>
    2f54:	fe 01       	movw	r30, r28
    2f56:	e9 5a       	subi	r30, 0xA9	; 169
    2f58:	ff 4f       	sbci	r31, 0xFF	; 255
    2f5a:	88 ec       	ldi	r24, 0xC8	; 200
    2f5c:	90 e0       	ldi	r25, 0x00	; 0
    2f5e:	91 83       	std	Z+1, r25	; 0x01
    2f60:	80 83       	st	Z, r24
    2f62:	fe 01       	movw	r30, r28
    2f64:	e9 5a       	subi	r30, 0xA9	; 169
    2f66:	ff 4f       	sbci	r31, 0xFF	; 255
    2f68:	80 81       	ld	r24, Z
    2f6a:	91 81       	ldd	r25, Z+1	; 0x01
    2f6c:	01 97       	sbiw	r24, 0x01	; 1
    2f6e:	f1 f7       	brne	.-4      	; 0x2f6c <main+0x2ce>
    2f70:	fe 01       	movw	r30, r28
    2f72:	e9 5a       	subi	r30, 0xA9	; 169
    2f74:	ff 4f       	sbci	r31, 0xFF	; 255
    2f76:	91 83       	std	Z+1, r25	; 0x01
    2f78:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f7a:	de 01       	movw	r26, r28
    2f7c:	a7 5a       	subi	r26, 0xA7	; 167
    2f7e:	bf 4f       	sbci	r27, 0xFF	; 255
    2f80:	fe 01       	movw	r30, r28
    2f82:	e7 5a       	subi	r30, 0xA7	; 167
    2f84:	ff 4f       	sbci	r31, 0xFF	; 255
    2f86:	80 81       	ld	r24, Z
    2f88:	91 81       	ldd	r25, Z+1	; 0x01
    2f8a:	01 97       	sbiw	r24, 0x01	; 1
    2f8c:	11 96       	adiw	r26, 0x01	; 1
    2f8e:	9c 93       	st	X, r25
    2f90:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f92:	fe 01       	movw	r30, r28
    2f94:	e7 5a       	subi	r30, 0xA7	; 167
    2f96:	ff 4f       	sbci	r31, 0xFF	; 255
    2f98:	80 81       	ld	r24, Z
    2f9a:	91 81       	ldd	r25, Z+1	; 0x01
    2f9c:	00 97       	sbiw	r24, 0x00	; 0
    2f9e:	d1 f6       	brne	.-76     	; 0x2f54 <main+0x2b6>
    2fa0:	27 c0       	rjmp	.+78     	; 0x2ff0 <main+0x352>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fa2:	8e 01       	movw	r16, r28
    2fa4:	07 5a       	subi	r16, 0xA7	; 167
    2fa6:	1f 4f       	sbci	r17, 0xFF	; 255
    2fa8:	fe 01       	movw	r30, r28
    2faa:	e5 5a       	subi	r30, 0xA5	; 165
    2fac:	ff 4f       	sbci	r31, 0xFF	; 255
    2fae:	60 81       	ld	r22, Z
    2fb0:	71 81       	ldd	r23, Z+1	; 0x01
    2fb2:	82 81       	ldd	r24, Z+2	; 0x02
    2fb4:	93 81       	ldd	r25, Z+3	; 0x03
    2fb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fba:	dc 01       	movw	r26, r24
    2fbc:	cb 01       	movw	r24, r22
    2fbe:	f8 01       	movw	r30, r16
    2fc0:	91 83       	std	Z+1, r25	; 0x01
    2fc2:	80 83       	st	Z, r24
    2fc4:	de 01       	movw	r26, r28
    2fc6:	ab 5a       	subi	r26, 0xAB	; 171
    2fc8:	bf 4f       	sbci	r27, 0xFF	; 255
    2fca:	fe 01       	movw	r30, r28
    2fcc:	e7 5a       	subi	r30, 0xA7	; 167
    2fce:	ff 4f       	sbci	r31, 0xFF	; 255
    2fd0:	80 81       	ld	r24, Z
    2fd2:	91 81       	ldd	r25, Z+1	; 0x01
    2fd4:	8d 93       	st	X+, r24
    2fd6:	9c 93       	st	X, r25
    2fd8:	fe 01       	movw	r30, r28
    2fda:	eb 5a       	subi	r30, 0xAB	; 171
    2fdc:	ff 4f       	sbci	r31, 0xFF	; 255
    2fde:	80 81       	ld	r24, Z
    2fe0:	91 81       	ldd	r25, Z+1	; 0x01
    2fe2:	01 97       	sbiw	r24, 0x01	; 1
    2fe4:	f1 f7       	brne	.-4      	; 0x2fe2 <main+0x344>
    2fe6:	fe 01       	movw	r30, r28
    2fe8:	eb 5a       	subi	r30, 0xAB	; 171
    2fea:	ff 4f       	sbci	r31, 0xFF	; 255
    2fec:	91 83       	std	Z+1, r25	; 0x01
    2fee:	80 83       	st	Z, r24
				_delay_ms(2);
				minuts = 0;
    2ff0:	fe 01       	movw	r30, r28
    2ff2:	e9 58       	subi	r30, 0x89	; 137
    2ff4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ff6:	10 82       	st	Z, r1
				hours++;
    2ff8:	de 01       	movw	r26, r28
    2ffa:	aa 58       	subi	r26, 0x8A	; 138
    2ffc:	bf 4f       	sbci	r27, 0xFF	; 255
    2ffe:	fe 01       	movw	r30, r28
    3000:	ea 58       	subi	r30, 0x8A	; 138
    3002:	ff 4f       	sbci	r31, 0xFF	; 255
    3004:	80 81       	ld	r24, Z
    3006:	8f 5f       	subi	r24, 0xFF	; 255
    3008:	8c 93       	st	X, r24
				if (hours == 24)
    300a:	fe 01       	movw	r30, r28
    300c:	ea 58       	subi	r30, 0x8A	; 138
    300e:	ff 4f       	sbci	r31, 0xFF	; 255
    3010:	80 81       	ld	r24, Z
    3012:	88 31       	cpi	r24, 0x18	; 24
    3014:	21 f4       	brne	.+8      	; 0x301e <main+0x380>
				{
					hours = 0;
    3016:	fe 01       	movw	r30, r28
    3018:	ea 58       	subi	r30, 0x8A	; 138
    301a:	ff 4f       	sbci	r31, 0xFF	; 255
    301c:	10 82       	st	Z, r1
				}
			}
		}
		/*Display Clock*/
		LCD_VoidStartFrom(0,0);
    301e:	80 e0       	ldi	r24, 0x00	; 0
    3020:	60 e0       	ldi	r22, 0x00	; 0
    3022:	0e 94 65 12 	call	0x24ca	; 0x24ca <LCD_VoidStartFrom>
    3026:	fe 01       	movw	r30, r28
    3028:	ef 5a       	subi	r30, 0xAF	; 175
    302a:	ff 4f       	sbci	r31, 0xFF	; 255
    302c:	80 e0       	ldi	r24, 0x00	; 0
    302e:	90 e0       	ldi	r25, 0x00	; 0
    3030:	a8 e4       	ldi	r26, 0x48	; 72
    3032:	b3 e4       	ldi	r27, 0x43	; 67
    3034:	80 83       	st	Z, r24
    3036:	91 83       	std	Z+1, r25	; 0x01
    3038:	a2 83       	std	Z+2, r26	; 0x02
    303a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    303c:	8e 01       	movw	r16, r28
    303e:	03 5b       	subi	r16, 0xB3	; 179
    3040:	1f 4f       	sbci	r17, 0xFF	; 255
    3042:	fe 01       	movw	r30, r28
    3044:	ef 5a       	subi	r30, 0xAF	; 175
    3046:	ff 4f       	sbci	r31, 0xFF	; 255
    3048:	60 81       	ld	r22, Z
    304a:	71 81       	ldd	r23, Z+1	; 0x01
    304c:	82 81       	ldd	r24, Z+2	; 0x02
    304e:	93 81       	ldd	r25, Z+3	; 0x03
    3050:	20 e0       	ldi	r18, 0x00	; 0
    3052:	30 e0       	ldi	r19, 0x00	; 0
    3054:	4a ef       	ldi	r20, 0xFA	; 250
    3056:	54 e4       	ldi	r21, 0x44	; 68
    3058:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    305c:	dc 01       	movw	r26, r24
    305e:	cb 01       	movw	r24, r22
    3060:	f8 01       	movw	r30, r16
    3062:	80 83       	st	Z, r24
    3064:	91 83       	std	Z+1, r25	; 0x01
    3066:	a2 83       	std	Z+2, r26	; 0x02
    3068:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    306a:	fe 01       	movw	r30, r28
    306c:	e3 5b       	subi	r30, 0xB3	; 179
    306e:	ff 4f       	sbci	r31, 0xFF	; 255
    3070:	60 81       	ld	r22, Z
    3072:	71 81       	ldd	r23, Z+1	; 0x01
    3074:	82 81       	ldd	r24, Z+2	; 0x02
    3076:	93 81       	ldd	r25, Z+3	; 0x03
    3078:	20 e0       	ldi	r18, 0x00	; 0
    307a:	30 e0       	ldi	r19, 0x00	; 0
    307c:	40 e8       	ldi	r20, 0x80	; 128
    307e:	5f e3       	ldi	r21, 0x3F	; 63
    3080:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3084:	88 23       	and	r24, r24
    3086:	44 f4       	brge	.+16     	; 0x3098 <main+0x3fa>
		__ticks = 1;
    3088:	fe 01       	movw	r30, r28
    308a:	e5 5b       	subi	r30, 0xB5	; 181
    308c:	ff 4f       	sbci	r31, 0xFF	; 255
    308e:	81 e0       	ldi	r24, 0x01	; 1
    3090:	90 e0       	ldi	r25, 0x00	; 0
    3092:	91 83       	std	Z+1, r25	; 0x01
    3094:	80 83       	st	Z, r24
    3096:	64 c0       	rjmp	.+200    	; 0x3160 <main+0x4c2>
	else if (__tmp > 65535)
    3098:	fe 01       	movw	r30, r28
    309a:	e3 5b       	subi	r30, 0xB3	; 179
    309c:	ff 4f       	sbci	r31, 0xFF	; 255
    309e:	60 81       	ld	r22, Z
    30a0:	71 81       	ldd	r23, Z+1	; 0x01
    30a2:	82 81       	ldd	r24, Z+2	; 0x02
    30a4:	93 81       	ldd	r25, Z+3	; 0x03
    30a6:	20 e0       	ldi	r18, 0x00	; 0
    30a8:	3f ef       	ldi	r19, 0xFF	; 255
    30aa:	4f e7       	ldi	r20, 0x7F	; 127
    30ac:	57 e4       	ldi	r21, 0x47	; 71
    30ae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    30b2:	18 16       	cp	r1, r24
    30b4:	0c f0       	brlt	.+2      	; 0x30b8 <main+0x41a>
    30b6:	43 c0       	rjmp	.+134    	; 0x313e <main+0x4a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30b8:	fe 01       	movw	r30, r28
    30ba:	ef 5a       	subi	r30, 0xAF	; 175
    30bc:	ff 4f       	sbci	r31, 0xFF	; 255
    30be:	60 81       	ld	r22, Z
    30c0:	71 81       	ldd	r23, Z+1	; 0x01
    30c2:	82 81       	ldd	r24, Z+2	; 0x02
    30c4:	93 81       	ldd	r25, Z+3	; 0x03
    30c6:	20 e0       	ldi	r18, 0x00	; 0
    30c8:	30 e0       	ldi	r19, 0x00	; 0
    30ca:	40 e2       	ldi	r20, 0x20	; 32
    30cc:	51 e4       	ldi	r21, 0x41	; 65
    30ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30d2:	dc 01       	movw	r26, r24
    30d4:	cb 01       	movw	r24, r22
    30d6:	8e 01       	movw	r16, r28
    30d8:	05 5b       	subi	r16, 0xB5	; 181
    30da:	1f 4f       	sbci	r17, 0xFF	; 255
    30dc:	bc 01       	movw	r22, r24
    30de:	cd 01       	movw	r24, r26
    30e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30e4:	dc 01       	movw	r26, r24
    30e6:	cb 01       	movw	r24, r22
    30e8:	f8 01       	movw	r30, r16
    30ea:	91 83       	std	Z+1, r25	; 0x01
    30ec:	80 83       	st	Z, r24
    30ee:	1f c0       	rjmp	.+62     	; 0x312e <main+0x490>
    30f0:	fe 01       	movw	r30, r28
    30f2:	e7 5b       	subi	r30, 0xB7	; 183
    30f4:	ff 4f       	sbci	r31, 0xFF	; 255
    30f6:	88 ec       	ldi	r24, 0xC8	; 200
    30f8:	90 e0       	ldi	r25, 0x00	; 0
    30fa:	91 83       	std	Z+1, r25	; 0x01
    30fc:	80 83       	st	Z, r24
    30fe:	fe 01       	movw	r30, r28
    3100:	e7 5b       	subi	r30, 0xB7	; 183
    3102:	ff 4f       	sbci	r31, 0xFF	; 255
    3104:	80 81       	ld	r24, Z
    3106:	91 81       	ldd	r25, Z+1	; 0x01
    3108:	01 97       	sbiw	r24, 0x01	; 1
    310a:	f1 f7       	brne	.-4      	; 0x3108 <main+0x46a>
    310c:	fe 01       	movw	r30, r28
    310e:	e7 5b       	subi	r30, 0xB7	; 183
    3110:	ff 4f       	sbci	r31, 0xFF	; 255
    3112:	91 83       	std	Z+1, r25	; 0x01
    3114:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3116:	de 01       	movw	r26, r28
    3118:	a5 5b       	subi	r26, 0xB5	; 181
    311a:	bf 4f       	sbci	r27, 0xFF	; 255
    311c:	fe 01       	movw	r30, r28
    311e:	e5 5b       	subi	r30, 0xB5	; 181
    3120:	ff 4f       	sbci	r31, 0xFF	; 255
    3122:	80 81       	ld	r24, Z
    3124:	91 81       	ldd	r25, Z+1	; 0x01
    3126:	01 97       	sbiw	r24, 0x01	; 1
    3128:	11 96       	adiw	r26, 0x01	; 1
    312a:	9c 93       	st	X, r25
    312c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    312e:	fe 01       	movw	r30, r28
    3130:	e5 5b       	subi	r30, 0xB5	; 181
    3132:	ff 4f       	sbci	r31, 0xFF	; 255
    3134:	80 81       	ld	r24, Z
    3136:	91 81       	ldd	r25, Z+1	; 0x01
    3138:	00 97       	sbiw	r24, 0x00	; 0
    313a:	d1 f6       	brne	.-76     	; 0x30f0 <main+0x452>
    313c:	27 c0       	rjmp	.+78     	; 0x318c <main+0x4ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    313e:	8e 01       	movw	r16, r28
    3140:	05 5b       	subi	r16, 0xB5	; 181
    3142:	1f 4f       	sbci	r17, 0xFF	; 255
    3144:	fe 01       	movw	r30, r28
    3146:	e3 5b       	subi	r30, 0xB3	; 179
    3148:	ff 4f       	sbci	r31, 0xFF	; 255
    314a:	60 81       	ld	r22, Z
    314c:	71 81       	ldd	r23, Z+1	; 0x01
    314e:	82 81       	ldd	r24, Z+2	; 0x02
    3150:	93 81       	ldd	r25, Z+3	; 0x03
    3152:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3156:	dc 01       	movw	r26, r24
    3158:	cb 01       	movw	r24, r22
    315a:	f8 01       	movw	r30, r16
    315c:	91 83       	std	Z+1, r25	; 0x01
    315e:	80 83       	st	Z, r24
    3160:	de 01       	movw	r26, r28
    3162:	a9 5b       	subi	r26, 0xB9	; 185
    3164:	bf 4f       	sbci	r27, 0xFF	; 255
    3166:	fe 01       	movw	r30, r28
    3168:	e5 5b       	subi	r30, 0xB5	; 181
    316a:	ff 4f       	sbci	r31, 0xFF	; 255
    316c:	80 81       	ld	r24, Z
    316e:	91 81       	ldd	r25, Z+1	; 0x01
    3170:	8d 93       	st	X+, r24
    3172:	9c 93       	st	X, r25
    3174:	fe 01       	movw	r30, r28
    3176:	e9 5b       	subi	r30, 0xB9	; 185
    3178:	ff 4f       	sbci	r31, 0xFF	; 255
    317a:	80 81       	ld	r24, Z
    317c:	91 81       	ldd	r25, Z+1	; 0x01
    317e:	01 97       	sbiw	r24, 0x01	; 1
    3180:	f1 f7       	brne	.-4      	; 0x317e <main+0x4e0>
    3182:	fe 01       	movw	r30, r28
    3184:	e9 5b       	subi	r30, 0xB9	; 185
    3186:	ff 4f       	sbci	r31, 0xFF	; 255
    3188:	91 83       	std	Z+1, r25	; 0x01
    318a:	80 83       	st	Z, r24
		_delay_ms(200);
		LCD_VoidSendString("Time:  ");
    318c:	80 e6       	ldi	r24, 0x60	; 96
    318e:	90 e0       	ldi	r25, 0x00	; 0
    3190:	0e 94 b7 11 	call	0x236e	; 0x236e <LCD_VoidSendString>
    3194:	fe 01       	movw	r30, r28
    3196:	ed 5b       	subi	r30, 0xBD	; 189
    3198:	ff 4f       	sbci	r31, 0xFF	; 255
    319a:	80 e0       	ldi	r24, 0x00	; 0
    319c:	90 e0       	ldi	r25, 0x00	; 0
    319e:	a8 e4       	ldi	r26, 0x48	; 72
    31a0:	b3 e4       	ldi	r27, 0x43	; 67
    31a2:	80 83       	st	Z, r24
    31a4:	91 83       	std	Z+1, r25	; 0x01
    31a6:	a2 83       	std	Z+2, r26	; 0x02
    31a8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31aa:	8e 01       	movw	r16, r28
    31ac:	01 5c       	subi	r16, 0xC1	; 193
    31ae:	1f 4f       	sbci	r17, 0xFF	; 255
    31b0:	fe 01       	movw	r30, r28
    31b2:	ed 5b       	subi	r30, 0xBD	; 189
    31b4:	ff 4f       	sbci	r31, 0xFF	; 255
    31b6:	60 81       	ld	r22, Z
    31b8:	71 81       	ldd	r23, Z+1	; 0x01
    31ba:	82 81       	ldd	r24, Z+2	; 0x02
    31bc:	93 81       	ldd	r25, Z+3	; 0x03
    31be:	20 e0       	ldi	r18, 0x00	; 0
    31c0:	30 e0       	ldi	r19, 0x00	; 0
    31c2:	4a ef       	ldi	r20, 0xFA	; 250
    31c4:	54 e4       	ldi	r21, 0x44	; 68
    31c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31ca:	dc 01       	movw	r26, r24
    31cc:	cb 01       	movw	r24, r22
    31ce:	f8 01       	movw	r30, r16
    31d0:	80 83       	st	Z, r24
    31d2:	91 83       	std	Z+1, r25	; 0x01
    31d4:	a2 83       	std	Z+2, r26	; 0x02
    31d6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    31d8:	fe 01       	movw	r30, r28
    31da:	ff 96       	adiw	r30, 0x3f	; 63
    31dc:	60 81       	ld	r22, Z
    31de:	71 81       	ldd	r23, Z+1	; 0x01
    31e0:	82 81       	ldd	r24, Z+2	; 0x02
    31e2:	93 81       	ldd	r25, Z+3	; 0x03
    31e4:	20 e0       	ldi	r18, 0x00	; 0
    31e6:	30 e0       	ldi	r19, 0x00	; 0
    31e8:	40 e8       	ldi	r20, 0x80	; 128
    31ea:	5f e3       	ldi	r21, 0x3F	; 63
    31ec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    31f0:	88 23       	and	r24, r24
    31f2:	2c f4       	brge	.+10     	; 0x31fe <main+0x560>
		__ticks = 1;
    31f4:	81 e0       	ldi	r24, 0x01	; 1
    31f6:	90 e0       	ldi	r25, 0x00	; 0
    31f8:	9e af       	std	Y+62, r25	; 0x3e
    31fa:	8d af       	std	Y+61, r24	; 0x3d
    31fc:	46 c0       	rjmp	.+140    	; 0x328a <main+0x5ec>
	else if (__tmp > 65535)
    31fe:	fe 01       	movw	r30, r28
    3200:	ff 96       	adiw	r30, 0x3f	; 63
    3202:	60 81       	ld	r22, Z
    3204:	71 81       	ldd	r23, Z+1	; 0x01
    3206:	82 81       	ldd	r24, Z+2	; 0x02
    3208:	93 81       	ldd	r25, Z+3	; 0x03
    320a:	20 e0       	ldi	r18, 0x00	; 0
    320c:	3f ef       	ldi	r19, 0xFF	; 255
    320e:	4f e7       	ldi	r20, 0x7F	; 127
    3210:	57 e4       	ldi	r21, 0x47	; 71
    3212:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3216:	18 16       	cp	r1, r24
    3218:	64 f5       	brge	.+88     	; 0x3272 <main+0x5d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    321a:	fe 01       	movw	r30, r28
    321c:	ed 5b       	subi	r30, 0xBD	; 189
    321e:	ff 4f       	sbci	r31, 0xFF	; 255
    3220:	60 81       	ld	r22, Z
    3222:	71 81       	ldd	r23, Z+1	; 0x01
    3224:	82 81       	ldd	r24, Z+2	; 0x02
    3226:	93 81       	ldd	r25, Z+3	; 0x03
    3228:	20 e0       	ldi	r18, 0x00	; 0
    322a:	30 e0       	ldi	r19, 0x00	; 0
    322c:	40 e2       	ldi	r20, 0x20	; 32
    322e:	51 e4       	ldi	r21, 0x41	; 65
    3230:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3234:	dc 01       	movw	r26, r24
    3236:	cb 01       	movw	r24, r22
    3238:	bc 01       	movw	r22, r24
    323a:	cd 01       	movw	r24, r26
    323c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3240:	dc 01       	movw	r26, r24
    3242:	cb 01       	movw	r24, r22
    3244:	9e af       	std	Y+62, r25	; 0x3e
    3246:	8d af       	std	Y+61, r24	; 0x3d
    3248:	0f c0       	rjmp	.+30     	; 0x3268 <main+0x5ca>
    324a:	88 ec       	ldi	r24, 0xC8	; 200
    324c:	90 e0       	ldi	r25, 0x00	; 0
    324e:	9c af       	std	Y+60, r25	; 0x3c
    3250:	8b af       	std	Y+59, r24	; 0x3b
    3252:	8b ad       	ldd	r24, Y+59	; 0x3b
    3254:	9c ad       	ldd	r25, Y+60	; 0x3c
    3256:	01 97       	sbiw	r24, 0x01	; 1
    3258:	f1 f7       	brne	.-4      	; 0x3256 <main+0x5b8>
    325a:	9c af       	std	Y+60, r25	; 0x3c
    325c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    325e:	8d ad       	ldd	r24, Y+61	; 0x3d
    3260:	9e ad       	ldd	r25, Y+62	; 0x3e
    3262:	01 97       	sbiw	r24, 0x01	; 1
    3264:	9e af       	std	Y+62, r25	; 0x3e
    3266:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3268:	8d ad       	ldd	r24, Y+61	; 0x3d
    326a:	9e ad       	ldd	r25, Y+62	; 0x3e
    326c:	00 97       	sbiw	r24, 0x00	; 0
    326e:	69 f7       	brne	.-38     	; 0x324a <main+0x5ac>
    3270:	16 c0       	rjmp	.+44     	; 0x329e <main+0x600>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3272:	fe 01       	movw	r30, r28
    3274:	ff 96       	adiw	r30, 0x3f	; 63
    3276:	60 81       	ld	r22, Z
    3278:	71 81       	ldd	r23, Z+1	; 0x01
    327a:	82 81       	ldd	r24, Z+2	; 0x02
    327c:	93 81       	ldd	r25, Z+3	; 0x03
    327e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3282:	dc 01       	movw	r26, r24
    3284:	cb 01       	movw	r24, r22
    3286:	9e af       	std	Y+62, r25	; 0x3e
    3288:	8d af       	std	Y+61, r24	; 0x3d
    328a:	8d ad       	ldd	r24, Y+61	; 0x3d
    328c:	9e ad       	ldd	r25, Y+62	; 0x3e
    328e:	9a af       	std	Y+58, r25	; 0x3a
    3290:	89 af       	std	Y+57, r24	; 0x39
    3292:	89 ad       	ldd	r24, Y+57	; 0x39
    3294:	9a ad       	ldd	r25, Y+58	; 0x3a
    3296:	01 97       	sbiw	r24, 0x01	; 1
    3298:	f1 f7       	brne	.-4      	; 0x3296 <main+0x5f8>
    329a:	9a af       	std	Y+58, r25	; 0x3a
    329c:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(200);
		LCD_VoidSendNumber(hours);
    329e:	fe 01       	movw	r30, r28
    32a0:	ea 58       	subi	r30, 0x8A	; 138
    32a2:	ff 4f       	sbci	r31, 0xFF	; 255
    32a4:	80 81       	ld	r24, Z
    32a6:	88 2f       	mov	r24, r24
    32a8:	90 e0       	ldi	r25, 0x00	; 0
    32aa:	a0 e0       	ldi	r26, 0x00	; 0
    32ac:	b0 e0       	ldi	r27, 0x00	; 0
    32ae:	bc 01       	movw	r22, r24
    32b0:	cd 01       	movw	r24, r26
    32b2:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <LCD_VoidSendNumber>
    32b6:	80 e0       	ldi	r24, 0x00	; 0
    32b8:	90 e0       	ldi	r25, 0x00	; 0
    32ba:	a8 e4       	ldi	r26, 0x48	; 72
    32bc:	b3 e4       	ldi	r27, 0x43	; 67
    32be:	8d ab       	std	Y+53, r24	; 0x35
    32c0:	9e ab       	std	Y+54, r25	; 0x36
    32c2:	af ab       	std	Y+55, r26	; 0x37
    32c4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32c6:	6d a9       	ldd	r22, Y+53	; 0x35
    32c8:	7e a9       	ldd	r23, Y+54	; 0x36
    32ca:	8f a9       	ldd	r24, Y+55	; 0x37
    32cc:	98 ad       	ldd	r25, Y+56	; 0x38
    32ce:	20 e0       	ldi	r18, 0x00	; 0
    32d0:	30 e0       	ldi	r19, 0x00	; 0
    32d2:	4a ef       	ldi	r20, 0xFA	; 250
    32d4:	54 e4       	ldi	r21, 0x44	; 68
    32d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32da:	dc 01       	movw	r26, r24
    32dc:	cb 01       	movw	r24, r22
    32de:	89 ab       	std	Y+49, r24	; 0x31
    32e0:	9a ab       	std	Y+50, r25	; 0x32
    32e2:	ab ab       	std	Y+51, r26	; 0x33
    32e4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    32e6:	69 a9       	ldd	r22, Y+49	; 0x31
    32e8:	7a a9       	ldd	r23, Y+50	; 0x32
    32ea:	8b a9       	ldd	r24, Y+51	; 0x33
    32ec:	9c a9       	ldd	r25, Y+52	; 0x34
    32ee:	20 e0       	ldi	r18, 0x00	; 0
    32f0:	30 e0       	ldi	r19, 0x00	; 0
    32f2:	40 e8       	ldi	r20, 0x80	; 128
    32f4:	5f e3       	ldi	r21, 0x3F	; 63
    32f6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    32fa:	88 23       	and	r24, r24
    32fc:	2c f4       	brge	.+10     	; 0x3308 <main+0x66a>
		__ticks = 1;
    32fe:	81 e0       	ldi	r24, 0x01	; 1
    3300:	90 e0       	ldi	r25, 0x00	; 0
    3302:	98 ab       	std	Y+48, r25	; 0x30
    3304:	8f a7       	std	Y+47, r24	; 0x2f
    3306:	3f c0       	rjmp	.+126    	; 0x3386 <main+0x6e8>
	else if (__tmp > 65535)
    3308:	69 a9       	ldd	r22, Y+49	; 0x31
    330a:	7a a9       	ldd	r23, Y+50	; 0x32
    330c:	8b a9       	ldd	r24, Y+51	; 0x33
    330e:	9c a9       	ldd	r25, Y+52	; 0x34
    3310:	20 e0       	ldi	r18, 0x00	; 0
    3312:	3f ef       	ldi	r19, 0xFF	; 255
    3314:	4f e7       	ldi	r20, 0x7F	; 127
    3316:	57 e4       	ldi	r21, 0x47	; 71
    3318:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    331c:	18 16       	cp	r1, r24
    331e:	4c f5       	brge	.+82     	; 0x3372 <main+0x6d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3320:	6d a9       	ldd	r22, Y+53	; 0x35
    3322:	7e a9       	ldd	r23, Y+54	; 0x36
    3324:	8f a9       	ldd	r24, Y+55	; 0x37
    3326:	98 ad       	ldd	r25, Y+56	; 0x38
    3328:	20 e0       	ldi	r18, 0x00	; 0
    332a:	30 e0       	ldi	r19, 0x00	; 0
    332c:	40 e2       	ldi	r20, 0x20	; 32
    332e:	51 e4       	ldi	r21, 0x41	; 65
    3330:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3334:	dc 01       	movw	r26, r24
    3336:	cb 01       	movw	r24, r22
    3338:	bc 01       	movw	r22, r24
    333a:	cd 01       	movw	r24, r26
    333c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3340:	dc 01       	movw	r26, r24
    3342:	cb 01       	movw	r24, r22
    3344:	98 ab       	std	Y+48, r25	; 0x30
    3346:	8f a7       	std	Y+47, r24	; 0x2f
    3348:	0f c0       	rjmp	.+30     	; 0x3368 <main+0x6ca>
    334a:	88 ec       	ldi	r24, 0xC8	; 200
    334c:	90 e0       	ldi	r25, 0x00	; 0
    334e:	9e a7       	std	Y+46, r25	; 0x2e
    3350:	8d a7       	std	Y+45, r24	; 0x2d
    3352:	8d a5       	ldd	r24, Y+45	; 0x2d
    3354:	9e a5       	ldd	r25, Y+46	; 0x2e
    3356:	01 97       	sbiw	r24, 0x01	; 1
    3358:	f1 f7       	brne	.-4      	; 0x3356 <main+0x6b8>
    335a:	9e a7       	std	Y+46, r25	; 0x2e
    335c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    335e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3360:	98 a9       	ldd	r25, Y+48	; 0x30
    3362:	01 97       	sbiw	r24, 0x01	; 1
    3364:	98 ab       	std	Y+48, r25	; 0x30
    3366:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3368:	8f a5       	ldd	r24, Y+47	; 0x2f
    336a:	98 a9       	ldd	r25, Y+48	; 0x30
    336c:	00 97       	sbiw	r24, 0x00	; 0
    336e:	69 f7       	brne	.-38     	; 0x334a <main+0x6ac>
    3370:	14 c0       	rjmp	.+40     	; 0x339a <main+0x6fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3372:	69 a9       	ldd	r22, Y+49	; 0x31
    3374:	7a a9       	ldd	r23, Y+50	; 0x32
    3376:	8b a9       	ldd	r24, Y+51	; 0x33
    3378:	9c a9       	ldd	r25, Y+52	; 0x34
    337a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    337e:	dc 01       	movw	r26, r24
    3380:	cb 01       	movw	r24, r22
    3382:	98 ab       	std	Y+48, r25	; 0x30
    3384:	8f a7       	std	Y+47, r24	; 0x2f
    3386:	8f a5       	ldd	r24, Y+47	; 0x2f
    3388:	98 a9       	ldd	r25, Y+48	; 0x30
    338a:	9c a7       	std	Y+44, r25	; 0x2c
    338c:	8b a7       	std	Y+43, r24	; 0x2b
    338e:	8b a5       	ldd	r24, Y+43	; 0x2b
    3390:	9c a5       	ldd	r25, Y+44	; 0x2c
    3392:	01 97       	sbiw	r24, 0x01	; 1
    3394:	f1 f7       	brne	.-4      	; 0x3392 <main+0x6f4>
    3396:	9c a7       	std	Y+44, r25	; 0x2c
    3398:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(200);
		LCD_VoidSendString(":");
    339a:	88 e6       	ldi	r24, 0x68	; 104
    339c:	90 e0       	ldi	r25, 0x00	; 0
    339e:	0e 94 b7 11 	call	0x236e	; 0x236e <LCD_VoidSendString>
    33a2:	80 e0       	ldi	r24, 0x00	; 0
    33a4:	90 e0       	ldi	r25, 0x00	; 0
    33a6:	a8 e4       	ldi	r26, 0x48	; 72
    33a8:	b3 e4       	ldi	r27, 0x43	; 67
    33aa:	8f a3       	std	Y+39, r24	; 0x27
    33ac:	98 a7       	std	Y+40, r25	; 0x28
    33ae:	a9 a7       	std	Y+41, r26	; 0x29
    33b0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33b2:	6f a1       	ldd	r22, Y+39	; 0x27
    33b4:	78 a5       	ldd	r23, Y+40	; 0x28
    33b6:	89 a5       	ldd	r24, Y+41	; 0x29
    33b8:	9a a5       	ldd	r25, Y+42	; 0x2a
    33ba:	20 e0       	ldi	r18, 0x00	; 0
    33bc:	30 e0       	ldi	r19, 0x00	; 0
    33be:	4a ef       	ldi	r20, 0xFA	; 250
    33c0:	54 e4       	ldi	r21, 0x44	; 68
    33c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33c6:	dc 01       	movw	r26, r24
    33c8:	cb 01       	movw	r24, r22
    33ca:	8b a3       	std	Y+35, r24	; 0x23
    33cc:	9c a3       	std	Y+36, r25	; 0x24
    33ce:	ad a3       	std	Y+37, r26	; 0x25
    33d0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    33d2:	6b a1       	ldd	r22, Y+35	; 0x23
    33d4:	7c a1       	ldd	r23, Y+36	; 0x24
    33d6:	8d a1       	ldd	r24, Y+37	; 0x25
    33d8:	9e a1       	ldd	r25, Y+38	; 0x26
    33da:	20 e0       	ldi	r18, 0x00	; 0
    33dc:	30 e0       	ldi	r19, 0x00	; 0
    33de:	40 e8       	ldi	r20, 0x80	; 128
    33e0:	5f e3       	ldi	r21, 0x3F	; 63
    33e2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    33e6:	88 23       	and	r24, r24
    33e8:	2c f4       	brge	.+10     	; 0x33f4 <main+0x756>
		__ticks = 1;
    33ea:	81 e0       	ldi	r24, 0x01	; 1
    33ec:	90 e0       	ldi	r25, 0x00	; 0
    33ee:	9a a3       	std	Y+34, r25	; 0x22
    33f0:	89 a3       	std	Y+33, r24	; 0x21
    33f2:	3f c0       	rjmp	.+126    	; 0x3472 <main+0x7d4>
	else if (__tmp > 65535)
    33f4:	6b a1       	ldd	r22, Y+35	; 0x23
    33f6:	7c a1       	ldd	r23, Y+36	; 0x24
    33f8:	8d a1       	ldd	r24, Y+37	; 0x25
    33fa:	9e a1       	ldd	r25, Y+38	; 0x26
    33fc:	20 e0       	ldi	r18, 0x00	; 0
    33fe:	3f ef       	ldi	r19, 0xFF	; 255
    3400:	4f e7       	ldi	r20, 0x7F	; 127
    3402:	57 e4       	ldi	r21, 0x47	; 71
    3404:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3408:	18 16       	cp	r1, r24
    340a:	4c f5       	brge	.+82     	; 0x345e <main+0x7c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    340c:	6f a1       	ldd	r22, Y+39	; 0x27
    340e:	78 a5       	ldd	r23, Y+40	; 0x28
    3410:	89 a5       	ldd	r24, Y+41	; 0x29
    3412:	9a a5       	ldd	r25, Y+42	; 0x2a
    3414:	20 e0       	ldi	r18, 0x00	; 0
    3416:	30 e0       	ldi	r19, 0x00	; 0
    3418:	40 e2       	ldi	r20, 0x20	; 32
    341a:	51 e4       	ldi	r21, 0x41	; 65
    341c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3420:	dc 01       	movw	r26, r24
    3422:	cb 01       	movw	r24, r22
    3424:	bc 01       	movw	r22, r24
    3426:	cd 01       	movw	r24, r26
    3428:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    342c:	dc 01       	movw	r26, r24
    342e:	cb 01       	movw	r24, r22
    3430:	9a a3       	std	Y+34, r25	; 0x22
    3432:	89 a3       	std	Y+33, r24	; 0x21
    3434:	0f c0       	rjmp	.+30     	; 0x3454 <main+0x7b6>
    3436:	88 ec       	ldi	r24, 0xC8	; 200
    3438:	90 e0       	ldi	r25, 0x00	; 0
    343a:	98 a3       	std	Y+32, r25	; 0x20
    343c:	8f 8f       	std	Y+31, r24	; 0x1f
    343e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3440:	98 a1       	ldd	r25, Y+32	; 0x20
    3442:	01 97       	sbiw	r24, 0x01	; 1
    3444:	f1 f7       	brne	.-4      	; 0x3442 <main+0x7a4>
    3446:	98 a3       	std	Y+32, r25	; 0x20
    3448:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    344a:	89 a1       	ldd	r24, Y+33	; 0x21
    344c:	9a a1       	ldd	r25, Y+34	; 0x22
    344e:	01 97       	sbiw	r24, 0x01	; 1
    3450:	9a a3       	std	Y+34, r25	; 0x22
    3452:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3454:	89 a1       	ldd	r24, Y+33	; 0x21
    3456:	9a a1       	ldd	r25, Y+34	; 0x22
    3458:	00 97       	sbiw	r24, 0x00	; 0
    345a:	69 f7       	brne	.-38     	; 0x3436 <main+0x798>
    345c:	14 c0       	rjmp	.+40     	; 0x3486 <main+0x7e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    345e:	6b a1       	ldd	r22, Y+35	; 0x23
    3460:	7c a1       	ldd	r23, Y+36	; 0x24
    3462:	8d a1       	ldd	r24, Y+37	; 0x25
    3464:	9e a1       	ldd	r25, Y+38	; 0x26
    3466:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    346a:	dc 01       	movw	r26, r24
    346c:	cb 01       	movw	r24, r22
    346e:	9a a3       	std	Y+34, r25	; 0x22
    3470:	89 a3       	std	Y+33, r24	; 0x21
    3472:	89 a1       	ldd	r24, Y+33	; 0x21
    3474:	9a a1       	ldd	r25, Y+34	; 0x22
    3476:	9e 8f       	std	Y+30, r25	; 0x1e
    3478:	8d 8f       	std	Y+29, r24	; 0x1d
    347a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    347c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    347e:	01 97       	sbiw	r24, 0x01	; 1
    3480:	f1 f7       	brne	.-4      	; 0x347e <main+0x7e0>
    3482:	9e 8f       	std	Y+30, r25	; 0x1e
    3484:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(200);
		LCD_VoidSendNumber(minuts);
    3486:	fe 01       	movw	r30, r28
    3488:	e9 58       	subi	r30, 0x89	; 137
    348a:	ff 4f       	sbci	r31, 0xFF	; 255
    348c:	80 81       	ld	r24, Z
    348e:	88 2f       	mov	r24, r24
    3490:	90 e0       	ldi	r25, 0x00	; 0
    3492:	a0 e0       	ldi	r26, 0x00	; 0
    3494:	b0 e0       	ldi	r27, 0x00	; 0
    3496:	bc 01       	movw	r22, r24
    3498:	cd 01       	movw	r24, r26
    349a:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <LCD_VoidSendNumber>
    349e:	80 e0       	ldi	r24, 0x00	; 0
    34a0:	90 e0       	ldi	r25, 0x00	; 0
    34a2:	a8 e4       	ldi	r26, 0x48	; 72
    34a4:	b3 e4       	ldi	r27, 0x43	; 67
    34a6:	89 8f       	std	Y+25, r24	; 0x19
    34a8:	9a 8f       	std	Y+26, r25	; 0x1a
    34aa:	ab 8f       	std	Y+27, r26	; 0x1b
    34ac:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34ae:	69 8d       	ldd	r22, Y+25	; 0x19
    34b0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    34b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    34b4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    34b6:	20 e0       	ldi	r18, 0x00	; 0
    34b8:	30 e0       	ldi	r19, 0x00	; 0
    34ba:	4a ef       	ldi	r20, 0xFA	; 250
    34bc:	54 e4       	ldi	r21, 0x44	; 68
    34be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34c2:	dc 01       	movw	r26, r24
    34c4:	cb 01       	movw	r24, r22
    34c6:	8d 8b       	std	Y+21, r24	; 0x15
    34c8:	9e 8b       	std	Y+22, r25	; 0x16
    34ca:	af 8b       	std	Y+23, r26	; 0x17
    34cc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    34ce:	6d 89       	ldd	r22, Y+21	; 0x15
    34d0:	7e 89       	ldd	r23, Y+22	; 0x16
    34d2:	8f 89       	ldd	r24, Y+23	; 0x17
    34d4:	98 8d       	ldd	r25, Y+24	; 0x18
    34d6:	20 e0       	ldi	r18, 0x00	; 0
    34d8:	30 e0       	ldi	r19, 0x00	; 0
    34da:	40 e8       	ldi	r20, 0x80	; 128
    34dc:	5f e3       	ldi	r21, 0x3F	; 63
    34de:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    34e2:	88 23       	and	r24, r24
    34e4:	2c f4       	brge	.+10     	; 0x34f0 <main+0x852>
		__ticks = 1;
    34e6:	81 e0       	ldi	r24, 0x01	; 1
    34e8:	90 e0       	ldi	r25, 0x00	; 0
    34ea:	9c 8b       	std	Y+20, r25	; 0x14
    34ec:	8b 8b       	std	Y+19, r24	; 0x13
    34ee:	3f c0       	rjmp	.+126    	; 0x356e <main+0x8d0>
	else if (__tmp > 65535)
    34f0:	6d 89       	ldd	r22, Y+21	; 0x15
    34f2:	7e 89       	ldd	r23, Y+22	; 0x16
    34f4:	8f 89       	ldd	r24, Y+23	; 0x17
    34f6:	98 8d       	ldd	r25, Y+24	; 0x18
    34f8:	20 e0       	ldi	r18, 0x00	; 0
    34fa:	3f ef       	ldi	r19, 0xFF	; 255
    34fc:	4f e7       	ldi	r20, 0x7F	; 127
    34fe:	57 e4       	ldi	r21, 0x47	; 71
    3500:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3504:	18 16       	cp	r1, r24
    3506:	4c f5       	brge	.+82     	; 0x355a <main+0x8bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3508:	69 8d       	ldd	r22, Y+25	; 0x19
    350a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    350c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    350e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3510:	20 e0       	ldi	r18, 0x00	; 0
    3512:	30 e0       	ldi	r19, 0x00	; 0
    3514:	40 e2       	ldi	r20, 0x20	; 32
    3516:	51 e4       	ldi	r21, 0x41	; 65
    3518:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    351c:	dc 01       	movw	r26, r24
    351e:	cb 01       	movw	r24, r22
    3520:	bc 01       	movw	r22, r24
    3522:	cd 01       	movw	r24, r26
    3524:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3528:	dc 01       	movw	r26, r24
    352a:	cb 01       	movw	r24, r22
    352c:	9c 8b       	std	Y+20, r25	; 0x14
    352e:	8b 8b       	std	Y+19, r24	; 0x13
    3530:	0f c0       	rjmp	.+30     	; 0x3550 <main+0x8b2>
    3532:	88 ec       	ldi	r24, 0xC8	; 200
    3534:	90 e0       	ldi	r25, 0x00	; 0
    3536:	9a 8b       	std	Y+18, r25	; 0x12
    3538:	89 8b       	std	Y+17, r24	; 0x11
    353a:	89 89       	ldd	r24, Y+17	; 0x11
    353c:	9a 89       	ldd	r25, Y+18	; 0x12
    353e:	01 97       	sbiw	r24, 0x01	; 1
    3540:	f1 f7       	brne	.-4      	; 0x353e <main+0x8a0>
    3542:	9a 8b       	std	Y+18, r25	; 0x12
    3544:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3546:	8b 89       	ldd	r24, Y+19	; 0x13
    3548:	9c 89       	ldd	r25, Y+20	; 0x14
    354a:	01 97       	sbiw	r24, 0x01	; 1
    354c:	9c 8b       	std	Y+20, r25	; 0x14
    354e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3550:	8b 89       	ldd	r24, Y+19	; 0x13
    3552:	9c 89       	ldd	r25, Y+20	; 0x14
    3554:	00 97       	sbiw	r24, 0x00	; 0
    3556:	69 f7       	brne	.-38     	; 0x3532 <main+0x894>
    3558:	14 c0       	rjmp	.+40     	; 0x3582 <main+0x8e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    355a:	6d 89       	ldd	r22, Y+21	; 0x15
    355c:	7e 89       	ldd	r23, Y+22	; 0x16
    355e:	8f 89       	ldd	r24, Y+23	; 0x17
    3560:	98 8d       	ldd	r25, Y+24	; 0x18
    3562:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3566:	dc 01       	movw	r26, r24
    3568:	cb 01       	movw	r24, r22
    356a:	9c 8b       	std	Y+20, r25	; 0x14
    356c:	8b 8b       	std	Y+19, r24	; 0x13
    356e:	8b 89       	ldd	r24, Y+19	; 0x13
    3570:	9c 89       	ldd	r25, Y+20	; 0x14
    3572:	98 8b       	std	Y+16, r25	; 0x10
    3574:	8f 87       	std	Y+15, r24	; 0x0f
    3576:	8f 85       	ldd	r24, Y+15	; 0x0f
    3578:	98 89       	ldd	r25, Y+16	; 0x10
    357a:	01 97       	sbiw	r24, 0x01	; 1
    357c:	f1 f7       	brne	.-4      	; 0x357a <main+0x8dc>
    357e:	98 8b       	std	Y+16, r25	; 0x10
    3580:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(200);
		LCD_VoidSendString(":");
    3582:	88 e6       	ldi	r24, 0x68	; 104
    3584:	90 e0       	ldi	r25, 0x00	; 0
    3586:	0e 94 b7 11 	call	0x236e	; 0x236e <LCD_VoidSendString>
    358a:	80 e0       	ldi	r24, 0x00	; 0
    358c:	90 e0       	ldi	r25, 0x00	; 0
    358e:	a8 e4       	ldi	r26, 0x48	; 72
    3590:	b3 e4       	ldi	r27, 0x43	; 67
    3592:	8b 87       	std	Y+11, r24	; 0x0b
    3594:	9c 87       	std	Y+12, r25	; 0x0c
    3596:	ad 87       	std	Y+13, r26	; 0x0d
    3598:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    359a:	6b 85       	ldd	r22, Y+11	; 0x0b
    359c:	7c 85       	ldd	r23, Y+12	; 0x0c
    359e:	8d 85       	ldd	r24, Y+13	; 0x0d
    35a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    35a2:	20 e0       	ldi	r18, 0x00	; 0
    35a4:	30 e0       	ldi	r19, 0x00	; 0
    35a6:	4a ef       	ldi	r20, 0xFA	; 250
    35a8:	54 e4       	ldi	r21, 0x44	; 68
    35aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35ae:	dc 01       	movw	r26, r24
    35b0:	cb 01       	movw	r24, r22
    35b2:	8f 83       	std	Y+7, r24	; 0x07
    35b4:	98 87       	std	Y+8, r25	; 0x08
    35b6:	a9 87       	std	Y+9, r26	; 0x09
    35b8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    35ba:	6f 81       	ldd	r22, Y+7	; 0x07
    35bc:	78 85       	ldd	r23, Y+8	; 0x08
    35be:	89 85       	ldd	r24, Y+9	; 0x09
    35c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    35c2:	20 e0       	ldi	r18, 0x00	; 0
    35c4:	30 e0       	ldi	r19, 0x00	; 0
    35c6:	40 e8       	ldi	r20, 0x80	; 128
    35c8:	5f e3       	ldi	r21, 0x3F	; 63
    35ca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    35ce:	88 23       	and	r24, r24
    35d0:	2c f4       	brge	.+10     	; 0x35dc <main+0x93e>
		__ticks = 1;
    35d2:	81 e0       	ldi	r24, 0x01	; 1
    35d4:	90 e0       	ldi	r25, 0x00	; 0
    35d6:	9e 83       	std	Y+6, r25	; 0x06
    35d8:	8d 83       	std	Y+5, r24	; 0x05
    35da:	3f c0       	rjmp	.+126    	; 0x365a <main+0x9bc>
	else if (__tmp > 65535)
    35dc:	6f 81       	ldd	r22, Y+7	; 0x07
    35de:	78 85       	ldd	r23, Y+8	; 0x08
    35e0:	89 85       	ldd	r24, Y+9	; 0x09
    35e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    35e4:	20 e0       	ldi	r18, 0x00	; 0
    35e6:	3f ef       	ldi	r19, 0xFF	; 255
    35e8:	4f e7       	ldi	r20, 0x7F	; 127
    35ea:	57 e4       	ldi	r21, 0x47	; 71
    35ec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    35f0:	18 16       	cp	r1, r24
    35f2:	4c f5       	brge	.+82     	; 0x3646 <main+0x9a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    35f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    35f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    35fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    35fc:	20 e0       	ldi	r18, 0x00	; 0
    35fe:	30 e0       	ldi	r19, 0x00	; 0
    3600:	40 e2       	ldi	r20, 0x20	; 32
    3602:	51 e4       	ldi	r21, 0x41	; 65
    3604:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3608:	dc 01       	movw	r26, r24
    360a:	cb 01       	movw	r24, r22
    360c:	bc 01       	movw	r22, r24
    360e:	cd 01       	movw	r24, r26
    3610:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3614:	dc 01       	movw	r26, r24
    3616:	cb 01       	movw	r24, r22
    3618:	9e 83       	std	Y+6, r25	; 0x06
    361a:	8d 83       	std	Y+5, r24	; 0x05
    361c:	0f c0       	rjmp	.+30     	; 0x363c <main+0x99e>
    361e:	88 ec       	ldi	r24, 0xC8	; 200
    3620:	90 e0       	ldi	r25, 0x00	; 0
    3622:	9c 83       	std	Y+4, r25	; 0x04
    3624:	8b 83       	std	Y+3, r24	; 0x03
    3626:	8b 81       	ldd	r24, Y+3	; 0x03
    3628:	9c 81       	ldd	r25, Y+4	; 0x04
    362a:	01 97       	sbiw	r24, 0x01	; 1
    362c:	f1 f7       	brne	.-4      	; 0x362a <main+0x98c>
    362e:	9c 83       	std	Y+4, r25	; 0x04
    3630:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3632:	8d 81       	ldd	r24, Y+5	; 0x05
    3634:	9e 81       	ldd	r25, Y+6	; 0x06
    3636:	01 97       	sbiw	r24, 0x01	; 1
    3638:	9e 83       	std	Y+6, r25	; 0x06
    363a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    363c:	8d 81       	ldd	r24, Y+5	; 0x05
    363e:	9e 81       	ldd	r25, Y+6	; 0x06
    3640:	00 97       	sbiw	r24, 0x00	; 0
    3642:	69 f7       	brne	.-38     	; 0x361e <main+0x980>
    3644:	14 c0       	rjmp	.+40     	; 0x366e <main+0x9d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3646:	6f 81       	ldd	r22, Y+7	; 0x07
    3648:	78 85       	ldd	r23, Y+8	; 0x08
    364a:	89 85       	ldd	r24, Y+9	; 0x09
    364c:	9a 85       	ldd	r25, Y+10	; 0x0a
    364e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3652:	dc 01       	movw	r26, r24
    3654:	cb 01       	movw	r24, r22
    3656:	9e 83       	std	Y+6, r25	; 0x06
    3658:	8d 83       	std	Y+5, r24	; 0x05
    365a:	8d 81       	ldd	r24, Y+5	; 0x05
    365c:	9e 81       	ldd	r25, Y+6	; 0x06
    365e:	9a 83       	std	Y+2, r25	; 0x02
    3660:	89 83       	std	Y+1, r24	; 0x01
    3662:	89 81       	ldd	r24, Y+1	; 0x01
    3664:	9a 81       	ldd	r25, Y+2	; 0x02
    3666:	01 97       	sbiw	r24, 0x01	; 1
    3668:	f1 f7       	brne	.-4      	; 0x3666 <main+0x9c8>
    366a:	9a 83       	std	Y+2, r25	; 0x02
    366c:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(200);
		LCD_VoidSendNumber(seconds);
    366e:	80 91 86 00 	lds	r24, 0x0086
    3672:	88 2f       	mov	r24, r24
    3674:	90 e0       	ldi	r25, 0x00	; 0
    3676:	a0 e0       	ldi	r26, 0x00	; 0
    3678:	b0 e0       	ldi	r27, 0x00	; 0
    367a:	bc 01       	movw	r22, r24
    367c:	cd 01       	movw	r24, r26
    367e:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <LCD_VoidSendNumber>

		/*Get Temperature*/
		Temperature = TEMPL35_u8GetTemp(1);
    3682:	81 e0       	ldi	r24, 0x01	; 1
    3684:	0e 94 aa 0c 	call	0x1954	; 0x1954 <TEMPL35_u8GetTemp>
    3688:	fe 01       	movw	r30, r28
    368a:	eb 58       	subi	r30, 0x8B	; 139
    368c:	ff 4f       	sbci	r31, 0xFF	; 255
    368e:	80 83       	st	Z, r24

		/*Display temperature*/
		LCD_VoidStartFrom(1,0);
    3690:	81 e0       	ldi	r24, 0x01	; 1
    3692:	60 e0       	ldi	r22, 0x00	; 0
    3694:	0e 94 65 12 	call	0x24ca	; 0x24ca <LCD_VoidStartFrom>
		LCD_VoidSendString("Temp:  ");
    3698:	8a e6       	ldi	r24, 0x6A	; 106
    369a:	90 e0       	ldi	r25, 0x00	; 0
    369c:	0e 94 b7 11 	call	0x236e	; 0x236e <LCD_VoidSendString>
		LCD_VoidSendNumber(Temperature);
    36a0:	fe 01       	movw	r30, r28
    36a2:	eb 58       	subi	r30, 0x8B	; 139
    36a4:	ff 4f       	sbci	r31, 0xFF	; 255
    36a6:	80 81       	ld	r24, Z
    36a8:	88 2f       	mov	r24, r24
    36aa:	90 e0       	ldi	r25, 0x00	; 0
    36ac:	a0 e0       	ldi	r26, 0x00	; 0
    36ae:	b0 e0       	ldi	r27, 0x00	; 0
    36b0:	bc 01       	movw	r22, r24
    36b2:	cd 01       	movw	r24, r26
    36b4:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <LCD_VoidSendNumber>
		LCD_VoidSendString(" C     ");
    36b8:	82 e7       	ldi	r24, 0x72	; 114
    36ba:	90 e0       	ldi	r25, 0x00	; 0
    36bc:	0e 94 b7 11 	call	0x236e	; 0x236e <LCD_VoidSendString>

		/*Temperature Action*/
		if(Temperature >= 50)
    36c0:	fe 01       	movw	r30, r28
    36c2:	eb 58       	subi	r30, 0x8B	; 139
    36c4:	ff 4f       	sbci	r31, 0xFF	; 255
    36c6:	80 81       	ld	r24, Z
    36c8:	82 33       	cpi	r24, 0x32	; 50
    36ca:	48 f0       	brcs	.+18     	; 0x36de <main+0xa40>
		{
			/*ALARM On, Fan off*/
			DCM_VoidInitSingleControl(DCM_Stop);
    36cc:	80 e0       	ldi	r24, 0x00	; 0
    36ce:	0e 94 c3 15 	call	0x2b86	; 0x2b86 <DCM_VoidInitSingleControl>
			DIO_VoidSetPinValue(Group_B,Pin_B0,High);
    36d2:	82 e0       	ldi	r24, 0x02	; 2
    36d4:	60 e0       	ldi	r22, 0x00	; 0
    36d6:	41 e0       	ldi	r20, 0x01	; 1
    36d8:	0e 94 cb 08 	call	0x1196	; 0x1196 <DIO_VoidSetPinValue>
    36dc:	23 c0       	rjmp	.+70     	; 0x3724 <main+0xa86>
		}
		else if(Temperature > 30 && Temperature < 50)
    36de:	fe 01       	movw	r30, r28
    36e0:	eb 58       	subi	r30, 0x8B	; 139
    36e2:	ff 4f       	sbci	r31, 0xFF	; 255
    36e4:	80 81       	ld	r24, Z
    36e6:	8f 31       	cpi	r24, 0x1F	; 31
    36e8:	78 f0       	brcs	.+30     	; 0x3708 <main+0xa6a>
    36ea:	fe 01       	movw	r30, r28
    36ec:	eb 58       	subi	r30, 0x8B	; 139
    36ee:	ff 4f       	sbci	r31, 0xFF	; 255
    36f0:	80 81       	ld	r24, Z
    36f2:	82 33       	cpi	r24, 0x32	; 50
    36f4:	48 f4       	brcc	.+18     	; 0x3708 <main+0xa6a>
		{
			/*FAN on, ALARM off*/
			DIO_VoidSetPinValue(Group_B,Pin_B0,Low);
    36f6:	82 e0       	ldi	r24, 0x02	; 2
    36f8:	60 e0       	ldi	r22, 0x00	; 0
    36fa:	40 e0       	ldi	r20, 0x00	; 0
    36fc:	0e 94 cb 08 	call	0x1196	; 0x1196 <DIO_VoidSetPinValue>
			DCM_VoidInitSingleControl(DCM_Start);
    3700:	81 e0       	ldi	r24, 0x01	; 1
    3702:	0e 94 c3 15 	call	0x2b86	; 0x2b86 <DCM_VoidInitSingleControl>
    3706:	0e c0       	rjmp	.+28     	; 0x3724 <main+0xa86>
		}
		else if (Temperature < 30)
    3708:	fe 01       	movw	r30, r28
    370a:	eb 58       	subi	r30, 0x8B	; 139
    370c:	ff 4f       	sbci	r31, 0xFF	; 255
    370e:	80 81       	ld	r24, Z
    3710:	8e 31       	cpi	r24, 0x1E	; 30
    3712:	40 f4       	brcc	.+16     	; 0x3724 <main+0xa86>
		{
			/*Both off*/
			DIO_VoidSetPinValue(Group_B,Pin_B0,Low);
    3714:	82 e0       	ldi	r24, 0x02	; 2
    3716:	60 e0       	ldi	r22, 0x00	; 0
    3718:	40 e0       	ldi	r20, 0x00	; 0
    371a:	0e 94 cb 08 	call	0x1196	; 0x1196 <DIO_VoidSetPinValue>
			DCM_VoidInitSingleControl(DCM_Stop);
    371e:	80 e0       	ldi	r24, 0x00	; 0
    3720:	0e 94 c3 15 	call	0x2b86	; 0x2b86 <DCM_VoidInitSingleControl>
		}
		/*Get LDR*/
		LDR_Value = LDR_u8GetValue(0,LDR_Resistor);
    3724:	80 e0       	ldi	r24, 0x00	; 0
    3726:	40 e1       	ldi	r20, 0x10	; 16
    3728:	57 e2       	ldi	r21, 0x27	; 39
    372a:	60 e0       	ldi	r22, 0x00	; 0
    372c:	70 e0       	ldi	r23, 0x00	; 0
    372e:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <LDR_u8GetValue>
    3732:	dc 01       	movw	r26, r24
    3734:	cb 01       	movw	r24, r22
    3736:	fe 01       	movw	r30, r28
    3738:	ef 58       	subi	r30, 0x8F	; 143
    373a:	ff 4f       	sbci	r31, 0xFF	; 255
    373c:	80 83       	st	Z, r24
    373e:	91 83       	std	Z+1, r25	; 0x01
    3740:	a2 83       	std	Z+2, r26	; 0x02
    3742:	b3 83       	std	Z+3, r27	; 0x03

		/*LDR action*/
		if(LDR_Value < 400)
    3744:	fe 01       	movw	r30, r28
    3746:	ef 58       	subi	r30, 0x8F	; 143
    3748:	ff 4f       	sbci	r31, 0xFF	; 255
    374a:	80 81       	ld	r24, Z
    374c:	91 81       	ldd	r25, Z+1	; 0x01
    374e:	a2 81       	ldd	r26, Z+2	; 0x02
    3750:	b3 81       	ldd	r27, Z+3	; 0x03
    3752:	80 39       	cpi	r24, 0x90	; 144
    3754:	f1 e0       	ldi	r31, 0x01	; 1
    3756:	9f 07       	cpc	r25, r31
    3758:	f0 e0       	ldi	r31, 0x00	; 0
    375a:	af 07       	cpc	r26, r31
    375c:	f0 e0       	ldi	r31, 0x00	; 0
    375e:	bf 07       	cpc	r27, r31
    3760:	18 f4       	brcc	.+6      	; 0x3768 <main+0xaca>
		{
			/*Lights off*/
			LED_VoidTurnOffAll();
    3762:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <LED_VoidTurnOffAll>
    3766:	c1 ca       	rjmp	.-2686   	; 0x2cea <main+0x4c>
		}
		else
		{
			/*Lights on*/
			LED_VoidTurnOnAll();
    3768:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <LED_VoidTurnOnAll>
    376c:	be ca       	rjmp	.-2692   	; 0x2cea <main+0x4c>

0000376e <TimerFun>:
		}
	}
}
void TimerFun (void)
{
    376e:	df 93       	push	r29
    3770:	cf 93       	push	r28
    3772:	cd b7       	in	r28, 0x3d	; 61
    3774:	de b7       	in	r29, 0x3e	; 62
	static u8 TimerCounter = 0;
	TimerCounter++;
    3776:	80 91 87 00 	lds	r24, 0x0087
    377a:	8f 5f       	subi	r24, 0xFF	; 255
    377c:	80 93 87 00 	sts	0x0087, r24
	if (TimerCounter == 31)	//one second
    3780:	80 91 87 00 	lds	r24, 0x0087
    3784:	8f 31       	cpi	r24, 0x1F	; 31
    3786:	51 f4       	brne	.+20     	; 0x379c <TimerFun+0x2e>
	{
		seconds++;
    3788:	80 91 86 00 	lds	r24, 0x0086
    378c:	8f 5f       	subi	r24, 0xFF	; 255
    378e:	80 93 86 00 	sts	0x0086, r24
		TimerCounter = 0;
    3792:	10 92 87 00 	sts	0x0087, r1
		Timer0_VoidSetPreload(123);
    3796:	8b e7       	ldi	r24, 0x7B	; 123
    3798:	0e 94 19 07 	call	0xe32	; 0xe32 <Timer0_VoidSetPreload>
	}
}
    379c:	cf 91       	pop	r28
    379e:	df 91       	pop	r29
    37a0:	08 95       	ret

000037a2 <__mulsi3>:
    37a2:	62 9f       	mul	r22, r18
    37a4:	d0 01       	movw	r26, r0
    37a6:	73 9f       	mul	r23, r19
    37a8:	f0 01       	movw	r30, r0
    37aa:	82 9f       	mul	r24, r18
    37ac:	e0 0d       	add	r30, r0
    37ae:	f1 1d       	adc	r31, r1
    37b0:	64 9f       	mul	r22, r20
    37b2:	e0 0d       	add	r30, r0
    37b4:	f1 1d       	adc	r31, r1
    37b6:	92 9f       	mul	r25, r18
    37b8:	f0 0d       	add	r31, r0
    37ba:	83 9f       	mul	r24, r19
    37bc:	f0 0d       	add	r31, r0
    37be:	74 9f       	mul	r23, r20
    37c0:	f0 0d       	add	r31, r0
    37c2:	65 9f       	mul	r22, r21
    37c4:	f0 0d       	add	r31, r0
    37c6:	99 27       	eor	r25, r25
    37c8:	72 9f       	mul	r23, r18
    37ca:	b0 0d       	add	r27, r0
    37cc:	e1 1d       	adc	r30, r1
    37ce:	f9 1f       	adc	r31, r25
    37d0:	63 9f       	mul	r22, r19
    37d2:	b0 0d       	add	r27, r0
    37d4:	e1 1d       	adc	r30, r1
    37d6:	f9 1f       	adc	r31, r25
    37d8:	bd 01       	movw	r22, r26
    37da:	cf 01       	movw	r24, r30
    37dc:	11 24       	eor	r1, r1
    37de:	08 95       	ret

000037e0 <__udivmodhi4>:
    37e0:	aa 1b       	sub	r26, r26
    37e2:	bb 1b       	sub	r27, r27
    37e4:	51 e1       	ldi	r21, 0x11	; 17
    37e6:	07 c0       	rjmp	.+14     	; 0x37f6 <__udivmodhi4_ep>

000037e8 <__udivmodhi4_loop>:
    37e8:	aa 1f       	adc	r26, r26
    37ea:	bb 1f       	adc	r27, r27
    37ec:	a6 17       	cp	r26, r22
    37ee:	b7 07       	cpc	r27, r23
    37f0:	10 f0       	brcs	.+4      	; 0x37f6 <__udivmodhi4_ep>
    37f2:	a6 1b       	sub	r26, r22
    37f4:	b7 0b       	sbc	r27, r23

000037f6 <__udivmodhi4_ep>:
    37f6:	88 1f       	adc	r24, r24
    37f8:	99 1f       	adc	r25, r25
    37fa:	5a 95       	dec	r21
    37fc:	a9 f7       	brne	.-22     	; 0x37e8 <__udivmodhi4_loop>
    37fe:	80 95       	com	r24
    3800:	90 95       	com	r25
    3802:	bc 01       	movw	r22, r24
    3804:	cd 01       	movw	r24, r26
    3806:	08 95       	ret

00003808 <__udivmodsi4>:
    3808:	a1 e2       	ldi	r26, 0x21	; 33
    380a:	1a 2e       	mov	r1, r26
    380c:	aa 1b       	sub	r26, r26
    380e:	bb 1b       	sub	r27, r27
    3810:	fd 01       	movw	r30, r26
    3812:	0d c0       	rjmp	.+26     	; 0x382e <__udivmodsi4_ep>

00003814 <__udivmodsi4_loop>:
    3814:	aa 1f       	adc	r26, r26
    3816:	bb 1f       	adc	r27, r27
    3818:	ee 1f       	adc	r30, r30
    381a:	ff 1f       	adc	r31, r31
    381c:	a2 17       	cp	r26, r18
    381e:	b3 07       	cpc	r27, r19
    3820:	e4 07       	cpc	r30, r20
    3822:	f5 07       	cpc	r31, r21
    3824:	20 f0       	brcs	.+8      	; 0x382e <__udivmodsi4_ep>
    3826:	a2 1b       	sub	r26, r18
    3828:	b3 0b       	sbc	r27, r19
    382a:	e4 0b       	sbc	r30, r20
    382c:	f5 0b       	sbc	r31, r21

0000382e <__udivmodsi4_ep>:
    382e:	66 1f       	adc	r22, r22
    3830:	77 1f       	adc	r23, r23
    3832:	88 1f       	adc	r24, r24
    3834:	99 1f       	adc	r25, r25
    3836:	1a 94       	dec	r1
    3838:	69 f7       	brne	.-38     	; 0x3814 <__udivmodsi4_loop>
    383a:	60 95       	com	r22
    383c:	70 95       	com	r23
    383e:	80 95       	com	r24
    3840:	90 95       	com	r25
    3842:	9b 01       	movw	r18, r22
    3844:	ac 01       	movw	r20, r24
    3846:	bd 01       	movw	r22, r26
    3848:	cf 01       	movw	r24, r30
    384a:	08 95       	ret

0000384c <__prologue_saves__>:
    384c:	2f 92       	push	r2
    384e:	3f 92       	push	r3
    3850:	4f 92       	push	r4
    3852:	5f 92       	push	r5
    3854:	6f 92       	push	r6
    3856:	7f 92       	push	r7
    3858:	8f 92       	push	r8
    385a:	9f 92       	push	r9
    385c:	af 92       	push	r10
    385e:	bf 92       	push	r11
    3860:	cf 92       	push	r12
    3862:	df 92       	push	r13
    3864:	ef 92       	push	r14
    3866:	ff 92       	push	r15
    3868:	0f 93       	push	r16
    386a:	1f 93       	push	r17
    386c:	cf 93       	push	r28
    386e:	df 93       	push	r29
    3870:	cd b7       	in	r28, 0x3d	; 61
    3872:	de b7       	in	r29, 0x3e	; 62
    3874:	ca 1b       	sub	r28, r26
    3876:	db 0b       	sbc	r29, r27
    3878:	0f b6       	in	r0, 0x3f	; 63
    387a:	f8 94       	cli
    387c:	de bf       	out	0x3e, r29	; 62
    387e:	0f be       	out	0x3f, r0	; 63
    3880:	cd bf       	out	0x3d, r28	; 61
    3882:	09 94       	ijmp

00003884 <__epilogue_restores__>:
    3884:	2a 88       	ldd	r2, Y+18	; 0x12
    3886:	39 88       	ldd	r3, Y+17	; 0x11
    3888:	48 88       	ldd	r4, Y+16	; 0x10
    388a:	5f 84       	ldd	r5, Y+15	; 0x0f
    388c:	6e 84       	ldd	r6, Y+14	; 0x0e
    388e:	7d 84       	ldd	r7, Y+13	; 0x0d
    3890:	8c 84       	ldd	r8, Y+12	; 0x0c
    3892:	9b 84       	ldd	r9, Y+11	; 0x0b
    3894:	aa 84       	ldd	r10, Y+10	; 0x0a
    3896:	b9 84       	ldd	r11, Y+9	; 0x09
    3898:	c8 84       	ldd	r12, Y+8	; 0x08
    389a:	df 80       	ldd	r13, Y+7	; 0x07
    389c:	ee 80       	ldd	r14, Y+6	; 0x06
    389e:	fd 80       	ldd	r15, Y+5	; 0x05
    38a0:	0c 81       	ldd	r16, Y+4	; 0x04
    38a2:	1b 81       	ldd	r17, Y+3	; 0x03
    38a4:	aa 81       	ldd	r26, Y+2	; 0x02
    38a6:	b9 81       	ldd	r27, Y+1	; 0x01
    38a8:	ce 0f       	add	r28, r30
    38aa:	d1 1d       	adc	r29, r1
    38ac:	0f b6       	in	r0, 0x3f	; 63
    38ae:	f8 94       	cli
    38b0:	de bf       	out	0x3e, r29	; 62
    38b2:	0f be       	out	0x3f, r0	; 63
    38b4:	cd bf       	out	0x3d, r28	; 61
    38b6:	ed 01       	movw	r28, r26
    38b8:	08 95       	ret

000038ba <_exit>:
    38ba:	f8 94       	cli

000038bc <__stop_program>:
    38bc:	ff cf       	rjmp	.-2      	; 0x38bc <__stop_program>
